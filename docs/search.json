[
  {
    "objectID": "03-cartography.html",
    "href": "03-cartography.html",
    "title": "1 Cartography and Visualisation",
    "section": "",
    "text": "This week’s lecture has given you an introduction into how we can create a successful map. We further talked about map projections, cartographic conventions and issues faced with the analysis of aggregated data at areal units. The practical component of the week puts some of these learnings into practice as we analyse crime rates in London at two different scales.\n\n\nThe slides for this week’s lecture can be downloaded here: [Link]\n\n\n\n\n\n\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 4: Georeferencing, pp. 77-98. [Link]\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 11: Cartography and Map Production, pp. 237-252. [Link]\nWong, D. 2009. Modifiable Areal Unit Problem. International Encyclopedia of Human Geography 169-174. [Link]\n\n\n\n\n\nLongley, P. et al. 2015. Geographic Information Science & systems, Chapter 12: Geovisualization, pp. 266-289. [Link]\nUsery, L. and Seong, J. 2001. All equal-area map projections are created equal, but some are more equal than others. Cartography and Geographic Information Science 28(3): 183-194. [Link]\n\n\n\n\n\nOver the next few weeks, we will explore the spatial patterns of crime across London from a spatial perspective. Reid et al. (2018) suggest:\n\nSpatial analysis can be employed in both an exploratory and well as a more confirmatory manner with the primary purpose of identifying how certain community or ecological factors (such as population characteristics or the built environment) influence the spatial patterns of crime.\n\nAgainst this background, we are actually going to answer a very simple question today: does our perception of crime rates (and its distribution) in London vary at different scales? Here we are looking to test whether we would make the ecological fallacy mistake of assuming patterns at the LSOA level are the same at the Borough level by looking to directly account for the impact of the Modifiable Area Unit Problem within our results. Here we will be looking specifically at a specific type of crime: Theft from a person.\n\n\n\n\n\n\nWe will use the population dataset we create today to normalise other datasets in the module. Why? When we record events created by humans, there is often a population bias: simply, more people in an area will by probability lead to a higher occurrence of said event, such as crime. We will look at this in greater detail next week.\n\n\n\n\n\n\n\n\n\nThe datasets you will create in this practical will be used in other practicals, so make sure to follow every step and export your data to your data folder at the end of the practical.\n\n\n\n\n\nFor our crime data, we will use data directly from the Police Data Portal, which you can find at data.polic.uk. This data portal allows you to access and generate tabular data for crime recorded in the UK across different the different police forces since 2017.\n\n\n\n\n\n\nIn the United Kingdom, there are 45 territorial police forces (TPF) and 3 special police forces (SPF). Each TPF covers a specific area in the UK (e.g. the West Midlands Police Force), whilst the SPFs are cross-jurisdiction and cover specific types of crime, such as the British Transport Police. Therefore, when we want to download data for a specific area, we need to know which police force covers our area interest.\n\n\n\nWhen you look to download crime data for London, there are two territorial police forces working within the city and its greater metropolitan area:\n\nThe Metropolitan Police Force, which covers Greater London.\nThe City of London Police, which covers the City of London.\n\n\n\nNormally, we would now head to the Police Data Portal and download our crime data. However, the manual processing that is required to clean and prepare the data that we need today is too exhaustive and far easier to do using programming, so you can download a pre-filtered spreadsheet below. Unzip the file and copy the csv into a new folder in your raw data folder called: crime.\n\n\n\nFile\nType\nLink\n\n\n\n\nTheft from persons in 2021\ncsv\nDownload\n\n\n\n\n\n\n\n\n\nWhen mapping the data from the provided longitude and latitude coordinates, it is important to know that these locations represent the approximate location of a crime — not the exact place where it happened. This displacement is introduced on purpose to preserve anonymity of the individuals involved. The process by how this displacement occurs is standardised: There is a list of anonymous map points to which the exact location of each crime is compared against this master list to find the nearest map point. The co-ordinates of the actual crime are then replaced with the co-ordinates of the map point. Each map point is specifically chosen to avoid associating that point with an exact household.\n\n\n\n\n\n\n\nIn last week’s practical we mentioned that if we want to study a phenomena like crime and aggregate it to an areal unit, we will need to normalise this by some denominator (e.g. population). This week we will actually do this. Fortunately, we already sorted out our 2021 LSOA population dataset last week (i.e. LSOA2021_London.gpkg).\nIn addition to our LSOA level dataset, we also want to generate a similar dataset for our London Boroughs today, utilising the same approach as last week by joining Borough population table data to Borough spatial data and creating a Borough2021_London.gpkg file.\n\n\nA lot of data about London is collated by the Greater London Authority (GLA) and made available through the London Datastore. Whereas some of the data is relatively old, it is a good place to get some data specific to London:\n\nNavigate to the London Datastore: [Link].\nClick on Data in the navigation menu.\nType London Boroughs into the search field.\nDownload the GeoPackage containing the boundaries of each of London’s 33 Boroughs.\nRename the file to Boroughs_London.gpkg and move it to boundaries folder in your raw data folder.\n\n\n\n\nThe final data that we need is the total population for each of the London Boroughs in 2021. A good source for this is the 2021 Census again.\n\nNavigate to the Nomis portal: [Link]\nClick on Query data in the Data Downloads panel.\nClick on Census 2021 -&gt; Topic Summaries.\nClick on TS007A - Age by five-year age bands.\nSelect Geography and set Local authorities: district / unitary (as of April 2023) to Some.\nUnder List areas within select London. Click on Tick all.\nClick on Download data at the left hand side of the screen.\nOnce the data is ready for download, download the file to your computer and save it as LondonBorough2021_population.xlsx.\nOpen the dataset in your spreadsheet editing software and extract the relevant information: the Borough names and associated population counts. Copy the data that you require into a new csv file and rename the columns as BoroughNames and pop2021.\nNow format the pop2021 column so that it is recognised as being a numeric column.\nSave the file as a new csv in your data folder: LondonBorough2021_population.csv.\n\n\n\n\n\n\n\n\nStart QGIS\nClick on Project -&gt; New. Save your project as w3-crime-analysis. Remember to save your work throughout the practical.\nBefore we get started with adding data, we will first set the Coordinate Reference System of our Project. Click on Project -&gt; Properties – CRS. In the Filter box, type British National Grid. Select OSGB 1936 / British National Grid - EPSG:27700 and click Apply. Click OK.\n\n\n\n\n\nClick on Layer -&gt; Add Layer -&gt; Add Vector Layer.\nWith File select as your source type, click on the small three dots button and navigate to your LSOA2021_London.gpkg file in your boundaries folder. Select the file, then click Add. You may need to close the box after adding the layer.\n\nWe now need to create our Borough population spatial layer. To do so, we need to repeat exactly the same process as last week in terms of joining our table data to our spatial layer. You should now be able to do this, so we will not provide you with detailed instructions. Remember, you need to:\n\nLoad the respective Borough dataset as a Vector Layer found in your raw/boundaries/ data folder: Boroughs_London.gpkg.\nLoad the respective population dataset that you just created as a Delimited Text File Layer. Remember the settings, including no geometry!\nJoin the two datasets together using the Join tool in the Borough dataset Properties box. Remember which fields to use, which to add, and to remove the prefix.\nExport your joined dataset into a new dataset within your data folder as: Boroughs_London_Pop2021.gpkg.\nMake sure this dataset is loaded into your Layers / added to the map.\nRemove the original Borough and population data layers.\n\n\n\n\n\n\n\nBecause the population file that we downloaded does not contain Borough codes, we need to use the Borough names to join the two files together. Whilst it works here and we can easily manually check whether the join was succesful because there are only 33 records, codes are preferred as there is much less room for error and incomplete joins. This means it is often worth it to spend a bit more time and find these codes over relying on names.\n\n\n\nWe will now load and map our crime data. We will load this data using the Delimited Text File Layer option you would have used just now to load the Borough population, but this time we will be adding point coordinates to map our crime data as points.\n\nClick on Layer -&gt; Add Layer -&gt; Add Delimited Text File Layer.\n\nClick on the three dots button next to File Name and navigate to your crime-theft-2021-london.csv in your raw/crime folder.\nClick on the .csv file of this dataset and click Open.\nYour file format should be set to csv. In Record and Fields Options tick Decimal separator is comma, First record has field names, Detect field types and Discard empty fields.\nUnder Geometry Definition, select Point coordinates and set the X field to Longitude and the Y field to Latitude. The Geometry CRS should be: EPSG:4326 - WGS84. Click Add.\n\n\n\n\n\n\n\n\nWhen you click Add, you should have gotten a pop-up from QGIS asking about transformations. Transformations are algorithms that convert data from one CRS to another. QGIS knows that the Project CRS is British National GRid but the Layer you are trying to add has a WGS84 CRS. QGIS is asking you what transformation it should use to project the Layer in the Project CRS. This is one of the key strengths of QGIS: it can project data “on the fly”. What this means is that QGIS will automatically convert all Layers to the Project CRS once it knows which transformation you would like to use so that they will all be rendered in the correct position with respect to each other. More details on this can be found in QGIS’ user manual section on working with projections.\n\n\n\n\nClick OK to accept QGIS’ suggested on-the-fly projection. You should now see your crime dataset displayed on the map canvas.\n\n\n\n\n\n\nFigure 1: Borough map with crime data. [Enlarge image]\n\n\n\n\n\nWe can test the ‘temporary’ nature of the projection by looking at the CRS of the crime-theft-2021-london layer. Right-click on the layer then select Properties -&gt; Information and then look at the associated CRS. You should see that the CRS of the layer is still WGS84.\n\nWe want to make sure our analysis is as accurate and efficient as possible, so it is best to reproject our data into the same CRS as our administrative datasets, i.e. British National Grid. This also means we will have the dataset to use in other projects, just in case.\n\nBack in the main QGIS window, click on Vector -&gt; Data Management Tools -&gt; Reproject Layer. Fill in the parameters as follows:\n\nInput Layer: crime-theft-2021-london\nTarget CRS: Project CRS: EPSG: 27700\nReprojected: Click on the three buttons and Save to GeoPackage to create a new data file.\nSave it in your raw/crime folder as crime-theft-2021-london-prj.gpkg, using theft2021 as Layer Name.\nClick Run. You should now see the new data layer added to your project. You can now close the Reproject Layer tool.\n\nYou can now also remove the original crime-theft-2021-london dataset, only keeping the reprojected version.\n\n\n\n\nThe next step of our analysis is incredibly simple, as QGIS has an in-built tool for us to use. We will use the Count Points in Polygons in the Analysis toolset for Vector data to count how many crimes have occurred in our LSOAs and our Boroughs. We will then have our count statistic which we will need to normalise by our population data to create a crime rate statistic.\n\nClick on Vector -&gt; Analysis Tools -&gt; Count Points in Polygons.\nWithin the toolbox, select the parameters as follows:\n\nPolygons: Boroughs_London_Pop2021\nPoints: theft2021 (Note how both our data layers state the same CRS!)\nNo weight field or class field\nCount field names: theft2021\nClick on the three dot button and Save to GeoPackage: output -&gt; Borough2021_crime.gpkg, with borough-theft2021 as Layer Name.\n\nClick Run and Close the box. You should now see an Output layer added to your Layers box. Rename the layer to borough-theft2021.\nRight-click on the borough-theft2021 layer and open the Attribute Table. You should now see a theft2021 column next to your pop2021 column. You can look through the column to see the different levels of crime in the each Borough. You can also sort the column, from small to big, big to small, like you would do in a spreadsheet software.\n\nWhilst it is great that we have got our theft2021, what we actually need is a crime rate to account for the different population sizes across the Boroughs. To get our crime rate statistic, we are going to do our first bit of table manipulation in QGIS.\n\nWith the Attribute Table of your borough-theft2021 layer still open, click on the pencil icon at the top left corner. This pencil switches on the Editing mode.\n\n\n\n\n\n\n\nThe Editing mode allows you to edit both the Attribute Table values and the geometry of your data. When it comes to the Attribute Table, it means you can directly edit existing values in the table or create and add new fields to the table. Whilst you can actually do the latter outside of the Editing mode, this Editing mode means you can reverse any edits you make and they are not permanent just in case you make a mistake. Using the Editing mode is the safest approach to editing your table, however, it might not always be the approach you use when generating new fields.\n\n\n\n\nWhilst in the Editing mode, click on New Field button (hotkeys: ctrl + w or cmd + w and fill in the Field Parameters as follows:\n\nName: crime-rate\nComment: leave blank\nType: Decimal number\n\nClick OK. You should now see a new field added to our Attribute Table.\n\nThe empty field has NULL populated for each row, so we need to find a way to give our Boroughs some crime rate data. To do this, we will calculate a simple Crime Rate using the Field Calculator tool provided by QGIS within the Attribute Table. We will create a crime rate that details the number of crimes per 10,000 people in the Borough.\n\nWhilst still in the Editing mode, click on the Abacus button (ctrl + i or cmd + i), which is known as the Field Calculator.\nIn the Field Calculator window:\n\nCheck the Update existing field box.\nUse the drop-down to select the crime-rate field.\nIn the Expression editor, add the following expression: ( “theft2021” / “pop2021” ) * 10000\nOnce done, click OK.\n\nClick on the Save button to save these edits. Click again on the Pencil button to exit Editing mode.\n\n\n\n\n\n\n\nThe crime-rate is stored as a decimal as this is required for the calculation to succeed, but ultimately you cannot have half a crime. You can transform the decimal number to an integer by forcing the crime-rate column to a new field using the Field Calculator using Editing mode again. Instead of ticking the Update existing field box you would now keep the Create a new field box ticked. Name the new field crime-rate-int, make sure the Output field type is set to Whole number (integer), and use the following expression to create a new field with an integer value: to_int(“crime-rate”). Save your changes by clicking on the Save button.\n\n\n\n\nWe now have our Borough crime rate dataset ready for mapping. We just now need to repeat this process to have our LSOA dataset. So, add the LSOA2021_London.gpkg file to your project and repeat the above process to create a crime-rate and crime-rate-int column within the LSOA dataset as well. After reordering some of the layers, your screen should look something like this:\n\n\n\n\n\n\nFigure 2: QGIS view containing crime data layers for both the London Boroughs and LSOAs. [Enlarge image]\n\n\n\n\n\n\n\nNow you have both datasets ready, it is time to style the maps. Remember to use the Properties box to symbolise your mapss. Think through using an appropriate colour scheme, perhaps have a look at the online colorbrewer 2.0 for inspiration if you do not want to use the default settings. Once you are happy with their symbolisation, we can turn them into proper publishable maps using QGIS’s Print Layout.\n\n\n\n\n\nFigure 3: An example of how your maps could have been symbolised. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nIf you have used ArcMap before, Print Layout is similar to switch the view of your map canvas to a print layout within the main window but in QGIS’s case, it loads up a new window.\n\n\n\nFrom the main QGIS window, click on Project -&gt; New Print Layout. In the small box that first appears, call your new print layout: crime-map-borough-lsoa. A new window should open up that shows a blank canvas. On the left-hand side of the window, you will find buttons to add print layout items: the current QGIS map canvas, text labels, images, legends, scale bars, basic shapes, arrows, attribute tables and HTML frames. In this toolbar you also find buttons to navigate, zoom in on an area and pan the view on the layout a well as buttons to select any layout item and to move the contents of the map item.\nOn the right-hand side of the window, you will find two set of panels. The upper one holds the panels Items and Undo History and the lower holds the panels Layout, Item properties and Atlas generation. Today, we are most interested in the bottom panel as Layout will control the overall look of our map, whilst Item properties will allow us to customise the elements, such as title or legend, that we may add to our map.\nIn the bottom part of the window, you can find a status bar with mouse position, current page number, a combo box to set the zoom level and the number of selected items if applicable. In the upper part of the window, you can find menus and other toolbars. All print layout tools are available in menus and as icons in a toolbar.\n\n\n\n\n\n\nWorking with maps in the Print Layout is simple but it can be a little fiddly and, to make more complicated maps, requires you to understand how to use certain aspects of Print Layout, such as locking items. If you get stuck, have a look at the training manual or the detailed documentation.\n\n\n\nTo start with creating a map, you use the Add Map tool to draw a box in which a snapshot of the current active map you have displayed in your QGIS main window will be loaded.\n\nClick on the Add Map tool and draw a box in the first half of our map to load our current map. Note, you can move your map around and resize the box simply by clicking on it as you would in Word etc.\n\n\n\n\n\n\nFigure 4: Current active map in the Print Layout. [Enlarge image]\n\n\n\n\n\nWith your map selected, head to the Items Properties panel and look for the Scale parameter.\n\nHere we can manually edit the scale of our map to find the right zoom level.\nHave a go at entering different values and see what level you think suits the size of your map.\nKeep a note of the scale, as we will need this for the second map we will add to our map layout - our LSOA map.\nNext, in the same panel, if you would like, you can add a frame to your map - this will draw a box (of your selected formatting) around the current map.\nIn the same panel, note down the size of your map - we want to make sure the next map we add is of the same size.\nNote, if you need to move the position of the map within the box, look for the Move Item Content tool on the left-hand side toolbar.\nOnce you are done, finally click on the Lock Layers and Lock Style for layers.\n\n\nBy locking the Layers (and their symbology) in our map, it means we can change our data/map in our main QGIS window without changing the map in the Print Layout - as we will see in a minute when adding our Borough crime rate map. If we do not lock our layers, our map would automatically update to whatever is next displayed in the main QGIS window.\n\nClick on the Add Legend tool and again, draw a box on your map in which your legend will appear.\n\nAs you will see, your Legend auto-generates an entry for every layer in our Layers box in the main QGIS application:\nIn Item Properties, uncheck auto-update - this stops QGIS automatically populating your legend and enables you to customise your legend.\nFirst, let us rename our layer in the legend to: Borough Crime Rate (per 10,000 people).\nNext, we want to remove all other Layers, using the - (minus) button\nWe can also customise the Legend further, including type, size and alignment of font. Go ahead and style your legend as you would prefer.\nMove the Legend to an appropriate part of the layout near your Borough crime rate map - resize if necessary.\n\n\n\n\n\n\n\nFigure 5: The automatically generated legend for your map. [Enlarge image]\n\n\n\n\nNow we are finished with the Borough map, we want to make sure we do not change any aspect of its layout. To do so, we need to lock both the map layer and legend in the Items panel. This prevents us accidentally moving items in our layout. Note, this is different to locking your layers in the Items Properties as we did earlier.\n\nIn the Items panel, click the Lock check box for both our map layer and legend.\nIn the main QGIS window, uncheck your borough-theft2021 layer and make sure your lsoa-theft2021 layer is now visible.\nReturn to the Print Layout window annd repeat the process above of adding a map to the window. This time you should see your LSOA map loaded in the box (and you should see no changes to your Borough map).\n\nPlace your LSOA map next to your LSOA map - use the snap grids to help.\nSet your LSOA map to the same zoom level as your Borough map.\nMake sure your LSOA map is the same size as your Borough map.\nAdd a frame if you want.\nLock your layer and its symbology in the Items Properties once ready and the lock your layer in the Items panel.\n\n\nWe now just need to add a second legend for our Borough map.\n\n\n\n\n\n\nIf we had standardised our values across our two maps, then we would only need to use one legend. However, in this case, as there are large differences in the value ranges, we need to have two legends.\n\n\n\n\nRepeat the process as above to add a Legend for our LSOA map.\n\nRemember to re-title the legend to make it more legible/informative.\nMatch the same formatting for a clean look.\n\nOnce complete, lock these two items in the Items panel as well.\nNow we have our two maps ready, we can add our main map elements. Using the tools on the left-hand tool bar:\n\nAdd a scale bar: use the Item Properties to adjust the Style, number of segments, font, etc.\nAdd a north arrow: draw a box to generate the arrow and then use the Item Properties to adjust..\nAdd a title at the top of the page, and subtitles above the individual maps.\nFinally add a box detailing our data sources, you can copy and paste the following: Contains National Statistics data © Crown copyright and database right [2021] (Open Government Licence). Contains Ordnance Survey data © Crown copyright and database right [2021]. Crime data obtained from data.police.uk (Open Government Licence).\n\n\nOnce you have added these properties in, you should have something that looks a little like this:\n\n\n\n\n\nFigure 6: Crime rates in London Boroughs and LSOAs. [Enlarge image]\n\n\n\n\nThe only thing outstanding is to export our map to a file. Go to Layout -&gt; Export as Image and then save it as London-2021-crime-rate.png.\n\n\n\n\n\n\nLooking at the maps you have created, how does your perception of crime (and its distribution) in London vary at different scales?\nAt the moment, we have looked at the crime rate as an amount, therefore we use a sequential colour scheme that shows, predominantly, where the crime rate is the highest. As an alternative, we could use a diverging colour scheme that could show us where the crime rate is lower and/or higher than a critical mid-point, such as the average crime rate across the Boroughs and LSOAs. Create a map of crime in London, at both the Borough and LSOA levels that shows for each of these administrative geographies the percentage difference from the overall mean crime rate.\n\n\n\n\n\n\n\n\nYou will need to start by calculating the average crime rate for both datasets and subsequently calculate the difference from these values for each geography.\nAll calculations can be done using the field calculator in QGIS, but you might have to think through writing the right expression.\n\n\n\n\n\n\n\nThat is us all done. Remember to save your project."
  },
  {
    "objectID": "03-cartography.html#slides-w03",
    "href": "03-cartography.html#slides-w03",
    "title": "1 Cartography and Visualisation",
    "section": "",
    "text": "The slides for this week’s lecture can be downloaded here: [Link]"
  },
  {
    "objectID": "03-cartography.html#reading-w03",
    "href": "03-cartography.html#reading-w03",
    "title": "1 Cartography and Visualisation",
    "section": "",
    "text": "Longley, P. et al. 2015. Geographic Information Science & Systems, Chapter 4: Georeferencing, pp. 77-98. [Link]\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 11: Cartography and Map Production, pp. 237-252. [Link]\nWong, D. 2009. Modifiable Areal Unit Problem. International Encyclopedia of Human Geography 169-174. [Link]\n\n\n\n\n\nLongley, P. et al. 2015. Geographic Information Science & systems, Chapter 12: Geovisualization, pp. 266-289. [Link]\nUsery, L. and Seong, J. 2001. All equal-area map projections are created equal, but some are more equal than others. Cartography and Geographic Information Science 28(3): 183-194. [Link]"
  },
  {
    "objectID": "03-cartography.html#crime-in-london-i",
    "href": "03-cartography.html#crime-in-london-i",
    "title": "1 Cartography and Visualisation",
    "section": "",
    "text": "Over the next few weeks, we will explore the spatial patterns of crime across London from a spatial perspective. Reid et al. (2018) suggest:\n\nSpatial analysis can be employed in both an exploratory and well as a more confirmatory manner with the primary purpose of identifying how certain community or ecological factors (such as population characteristics or the built environment) influence the spatial patterns of crime.\n\nAgainst this background, we are actually going to answer a very simple question today: does our perception of crime rates (and its distribution) in London vary at different scales? Here we are looking to test whether we would make the ecological fallacy mistake of assuming patterns at the LSOA level are the same at the Borough level by looking to directly account for the impact of the Modifiable Area Unit Problem within our results. Here we will be looking specifically at a specific type of crime: Theft from a person.\n\n\n\n\n\n\nWe will use the population dataset we create today to normalise other datasets in the module. Why? When we record events created by humans, there is often a population bias: simply, more people in an area will by probability lead to a higher occurrence of said event, such as crime. We will look at this in greater detail next week.\n\n\n\n\n\n\n\n\n\nThe datasets you will create in this practical will be used in other practicals, so make sure to follow every step and export your data to your data folder at the end of the practical.\n\n\n\n\n\nFor our crime data, we will use data directly from the Police Data Portal, which you can find at data.polic.uk. This data portal allows you to access and generate tabular data for crime recorded in the UK across different the different police forces since 2017.\n\n\n\n\n\n\nIn the United Kingdom, there are 45 territorial police forces (TPF) and 3 special police forces (SPF). Each TPF covers a specific area in the UK (e.g. the West Midlands Police Force), whilst the SPFs are cross-jurisdiction and cover specific types of crime, such as the British Transport Police. Therefore, when we want to download data for a specific area, we need to know which police force covers our area interest.\n\n\n\nWhen you look to download crime data for London, there are two territorial police forces working within the city and its greater metropolitan area:\n\nThe Metropolitan Police Force, which covers Greater London.\nThe City of London Police, which covers the City of London.\n\n\n\nNormally, we would now head to the Police Data Portal and download our crime data. However, the manual processing that is required to clean and prepare the data that we need today is too exhaustive and far easier to do using programming, so you can download a pre-filtered spreadsheet below. Unzip the file and copy the csv into a new folder in your raw data folder called: crime.\n\n\n\nFile\nType\nLink\n\n\n\n\nTheft from persons in 2021\ncsv\nDownload\n\n\n\n\n\n\n\n\n\nWhen mapping the data from the provided longitude and latitude coordinates, it is important to know that these locations represent the approximate location of a crime — not the exact place where it happened. This displacement is introduced on purpose to preserve anonymity of the individuals involved. The process by how this displacement occurs is standardised: There is a list of anonymous map points to which the exact location of each crime is compared against this master list to find the nearest map point. The co-ordinates of the actual crime are then replaced with the co-ordinates of the map point. Each map point is specifically chosen to avoid associating that point with an exact household.\n\n\n\n\n\n\n\nIn last week’s practical we mentioned that if we want to study a phenomena like crime and aggregate it to an areal unit, we will need to normalise this by some denominator (e.g. population). This week we will actually do this. Fortunately, we already sorted out our 2021 LSOA population dataset last week (i.e. LSOA2021_London.gpkg).\nIn addition to our LSOA level dataset, we also want to generate a similar dataset for our London Boroughs today, utilising the same approach as last week by joining Borough population table data to Borough spatial data and creating a Borough2021_London.gpkg file.\n\n\nA lot of data about London is collated by the Greater London Authority (GLA) and made available through the London Datastore. Whereas some of the data is relatively old, it is a good place to get some data specific to London:\n\nNavigate to the London Datastore: [Link].\nClick on Data in the navigation menu.\nType London Boroughs into the search field.\nDownload the GeoPackage containing the boundaries of each of London’s 33 Boroughs.\nRename the file to Boroughs_London.gpkg and move it to boundaries folder in your raw data folder.\n\n\n\n\nThe final data that we need is the total population for each of the London Boroughs in 2021. A good source for this is the 2021 Census again.\n\nNavigate to the Nomis portal: [Link]\nClick on Query data in the Data Downloads panel.\nClick on Census 2021 -&gt; Topic Summaries.\nClick on TS007A - Age by five-year age bands.\nSelect Geography and set Local authorities: district / unitary (as of April 2023) to Some.\nUnder List areas within select London. Click on Tick all.\nClick on Download data at the left hand side of the screen.\nOnce the data is ready for download, download the file to your computer and save it as LondonBorough2021_population.xlsx.\nOpen the dataset in your spreadsheet editing software and extract the relevant information: the Borough names and associated population counts. Copy the data that you require into a new csv file and rename the columns as BoroughNames and pop2021.\nNow format the pop2021 column so that it is recognised as being a numeric column.\nSave the file as a new csv in your data folder: LondonBorough2021_population.csv.\n\n\n\n\n\n\n\n\nStart QGIS\nClick on Project -&gt; New. Save your project as w3-crime-analysis. Remember to save your work throughout the practical.\nBefore we get started with adding data, we will first set the Coordinate Reference System of our Project. Click on Project -&gt; Properties – CRS. In the Filter box, type British National Grid. Select OSGB 1936 / British National Grid - EPSG:27700 and click Apply. Click OK.\n\n\n\n\n\nClick on Layer -&gt; Add Layer -&gt; Add Vector Layer.\nWith File select as your source type, click on the small three dots button and navigate to your LSOA2021_London.gpkg file in your boundaries folder. Select the file, then click Add. You may need to close the box after adding the layer.\n\nWe now need to create our Borough population spatial layer. To do so, we need to repeat exactly the same process as last week in terms of joining our table data to our spatial layer. You should now be able to do this, so we will not provide you with detailed instructions. Remember, you need to:\n\nLoad the respective Borough dataset as a Vector Layer found in your raw/boundaries/ data folder: Boroughs_London.gpkg.\nLoad the respective population dataset that you just created as a Delimited Text File Layer. Remember the settings, including no geometry!\nJoin the two datasets together using the Join tool in the Borough dataset Properties box. Remember which fields to use, which to add, and to remove the prefix.\nExport your joined dataset into a new dataset within your data folder as: Boroughs_London_Pop2021.gpkg.\nMake sure this dataset is loaded into your Layers / added to the map.\nRemove the original Borough and population data layers.\n\n\n\n\n\n\n\nBecause the population file that we downloaded does not contain Borough codes, we need to use the Borough names to join the two files together. Whilst it works here and we can easily manually check whether the join was succesful because there are only 33 records, codes are preferred as there is much less room for error and incomplete joins. This means it is often worth it to spend a bit more time and find these codes over relying on names.\n\n\n\nWe will now load and map our crime data. We will load this data using the Delimited Text File Layer option you would have used just now to load the Borough population, but this time we will be adding point coordinates to map our crime data as points.\n\nClick on Layer -&gt; Add Layer -&gt; Add Delimited Text File Layer.\n\nClick on the three dots button next to File Name and navigate to your crime-theft-2021-london.csv in your raw/crime folder.\nClick on the .csv file of this dataset and click Open.\nYour file format should be set to csv. In Record and Fields Options tick Decimal separator is comma, First record has field names, Detect field types and Discard empty fields.\nUnder Geometry Definition, select Point coordinates and set the X field to Longitude and the Y field to Latitude. The Geometry CRS should be: EPSG:4326 - WGS84. Click Add.\n\n\n\n\n\n\n\n\nWhen you click Add, you should have gotten a pop-up from QGIS asking about transformations. Transformations are algorithms that convert data from one CRS to another. QGIS knows that the Project CRS is British National GRid but the Layer you are trying to add has a WGS84 CRS. QGIS is asking you what transformation it should use to project the Layer in the Project CRS. This is one of the key strengths of QGIS: it can project data “on the fly”. What this means is that QGIS will automatically convert all Layers to the Project CRS once it knows which transformation you would like to use so that they will all be rendered in the correct position with respect to each other. More details on this can be found in QGIS’ user manual section on working with projections.\n\n\n\n\nClick OK to accept QGIS’ suggested on-the-fly projection. You should now see your crime dataset displayed on the map canvas.\n\n\n\n\n\n\nFigure 1: Borough map with crime data. [Enlarge image]\n\n\n\n\n\nWe can test the ‘temporary’ nature of the projection by looking at the CRS of the crime-theft-2021-london layer. Right-click on the layer then select Properties -&gt; Information and then look at the associated CRS. You should see that the CRS of the layer is still WGS84.\n\nWe want to make sure our analysis is as accurate and efficient as possible, so it is best to reproject our data into the same CRS as our administrative datasets, i.e. British National Grid. This also means we will have the dataset to use in other projects, just in case.\n\nBack in the main QGIS window, click on Vector -&gt; Data Management Tools -&gt; Reproject Layer. Fill in the parameters as follows:\n\nInput Layer: crime-theft-2021-london\nTarget CRS: Project CRS: EPSG: 27700\nReprojected: Click on the three buttons and Save to GeoPackage to create a new data file.\nSave it in your raw/crime folder as crime-theft-2021-london-prj.gpkg, using theft2021 as Layer Name.\nClick Run. You should now see the new data layer added to your project. You can now close the Reproject Layer tool.\n\nYou can now also remove the original crime-theft-2021-london dataset, only keeping the reprojected version.\n\n\n\n\nThe next step of our analysis is incredibly simple, as QGIS has an in-built tool for us to use. We will use the Count Points in Polygons in the Analysis toolset for Vector data to count how many crimes have occurred in our LSOAs and our Boroughs. We will then have our count statistic which we will need to normalise by our population data to create a crime rate statistic.\n\nClick on Vector -&gt; Analysis Tools -&gt; Count Points in Polygons.\nWithin the toolbox, select the parameters as follows:\n\nPolygons: Boroughs_London_Pop2021\nPoints: theft2021 (Note how both our data layers state the same CRS!)\nNo weight field or class field\nCount field names: theft2021\nClick on the three dot button and Save to GeoPackage: output -&gt; Borough2021_crime.gpkg, with borough-theft2021 as Layer Name.\n\nClick Run and Close the box. You should now see an Output layer added to your Layers box. Rename the layer to borough-theft2021.\nRight-click on the borough-theft2021 layer and open the Attribute Table. You should now see a theft2021 column next to your pop2021 column. You can look through the column to see the different levels of crime in the each Borough. You can also sort the column, from small to big, big to small, like you would do in a spreadsheet software.\n\nWhilst it is great that we have got our theft2021, what we actually need is a crime rate to account for the different population sizes across the Boroughs. To get our crime rate statistic, we are going to do our first bit of table manipulation in QGIS.\n\nWith the Attribute Table of your borough-theft2021 layer still open, click on the pencil icon at the top left corner. This pencil switches on the Editing mode.\n\n\n\n\n\n\n\nThe Editing mode allows you to edit both the Attribute Table values and the geometry of your data. When it comes to the Attribute Table, it means you can directly edit existing values in the table or create and add new fields to the table. Whilst you can actually do the latter outside of the Editing mode, this Editing mode means you can reverse any edits you make and they are not permanent just in case you make a mistake. Using the Editing mode is the safest approach to editing your table, however, it might not always be the approach you use when generating new fields.\n\n\n\n\nWhilst in the Editing mode, click on New Field button (hotkeys: ctrl + w or cmd + w and fill in the Field Parameters as follows:\n\nName: crime-rate\nComment: leave blank\nType: Decimal number\n\nClick OK. You should now see a new field added to our Attribute Table.\n\nThe empty field has NULL populated for each row, so we need to find a way to give our Boroughs some crime rate data. To do this, we will calculate a simple Crime Rate using the Field Calculator tool provided by QGIS within the Attribute Table. We will create a crime rate that details the number of crimes per 10,000 people in the Borough.\n\nWhilst still in the Editing mode, click on the Abacus button (ctrl + i or cmd + i), which is known as the Field Calculator.\nIn the Field Calculator window:\n\nCheck the Update existing field box.\nUse the drop-down to select the crime-rate field.\nIn the Expression editor, add the following expression: ( “theft2021” / “pop2021” ) * 10000\nOnce done, click OK.\n\nClick on the Save button to save these edits. Click again on the Pencil button to exit Editing mode.\n\n\n\n\n\n\n\nThe crime-rate is stored as a decimal as this is required for the calculation to succeed, but ultimately you cannot have half a crime. You can transform the decimal number to an integer by forcing the crime-rate column to a new field using the Field Calculator using Editing mode again. Instead of ticking the Update existing field box you would now keep the Create a new field box ticked. Name the new field crime-rate-int, make sure the Output field type is set to Whole number (integer), and use the following expression to create a new field with an integer value: to_int(“crime-rate”). Save your changes by clicking on the Save button.\n\n\n\n\nWe now have our Borough crime rate dataset ready for mapping. We just now need to repeat this process to have our LSOA dataset. So, add the LSOA2021_London.gpkg file to your project and repeat the above process to create a crime-rate and crime-rate-int column within the LSOA dataset as well. After reordering some of the layers, your screen should look something like this:\n\n\n\n\n\n\nFigure 2: QGIS view containing crime data layers for both the London Boroughs and LSOAs. [Enlarge image]\n\n\n\n\n\n\n\nNow you have both datasets ready, it is time to style the maps. Remember to use the Properties box to symbolise your mapss. Think through using an appropriate colour scheme, perhaps have a look at the online colorbrewer 2.0 for inspiration if you do not want to use the default settings. Once you are happy with their symbolisation, we can turn them into proper publishable maps using QGIS’s Print Layout.\n\n\n\n\n\nFigure 3: An example of how your maps could have been symbolised. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nIf you have used ArcMap before, Print Layout is similar to switch the view of your map canvas to a print layout within the main window but in QGIS’s case, it loads up a new window.\n\n\n\nFrom the main QGIS window, click on Project -&gt; New Print Layout. In the small box that first appears, call your new print layout: crime-map-borough-lsoa. A new window should open up that shows a blank canvas. On the left-hand side of the window, you will find buttons to add print layout items: the current QGIS map canvas, text labels, images, legends, scale bars, basic shapes, arrows, attribute tables and HTML frames. In this toolbar you also find buttons to navigate, zoom in on an area and pan the view on the layout a well as buttons to select any layout item and to move the contents of the map item.\nOn the right-hand side of the window, you will find two set of panels. The upper one holds the panels Items and Undo History and the lower holds the panels Layout, Item properties and Atlas generation. Today, we are most interested in the bottom panel as Layout will control the overall look of our map, whilst Item properties will allow us to customise the elements, such as title or legend, that we may add to our map.\nIn the bottom part of the window, you can find a status bar with mouse position, current page number, a combo box to set the zoom level and the number of selected items if applicable. In the upper part of the window, you can find menus and other toolbars. All print layout tools are available in menus and as icons in a toolbar.\n\n\n\n\n\n\nWorking with maps in the Print Layout is simple but it can be a little fiddly and, to make more complicated maps, requires you to understand how to use certain aspects of Print Layout, such as locking items. If you get stuck, have a look at the training manual or the detailed documentation.\n\n\n\nTo start with creating a map, you use the Add Map tool to draw a box in which a snapshot of the current active map you have displayed in your QGIS main window will be loaded.\n\nClick on the Add Map tool and draw a box in the first half of our map to load our current map. Note, you can move your map around and resize the box simply by clicking on it as you would in Word etc.\n\n\n\n\n\n\nFigure 4: Current active map in the Print Layout. [Enlarge image]\n\n\n\n\n\nWith your map selected, head to the Items Properties panel and look for the Scale parameter.\n\nHere we can manually edit the scale of our map to find the right zoom level.\nHave a go at entering different values and see what level you think suits the size of your map.\nKeep a note of the scale, as we will need this for the second map we will add to our map layout - our LSOA map.\nNext, in the same panel, if you would like, you can add a frame to your map - this will draw a box (of your selected formatting) around the current map.\nIn the same panel, note down the size of your map - we want to make sure the next map we add is of the same size.\nNote, if you need to move the position of the map within the box, look for the Move Item Content tool on the left-hand side toolbar.\nOnce you are done, finally click on the Lock Layers and Lock Style for layers.\n\n\nBy locking the Layers (and their symbology) in our map, it means we can change our data/map in our main QGIS window without changing the map in the Print Layout - as we will see in a minute when adding our Borough crime rate map. If we do not lock our layers, our map would automatically update to whatever is next displayed in the main QGIS window.\n\nClick on the Add Legend tool and again, draw a box on your map in which your legend will appear.\n\nAs you will see, your Legend auto-generates an entry for every layer in our Layers box in the main QGIS application:\nIn Item Properties, uncheck auto-update - this stops QGIS automatically populating your legend and enables you to customise your legend.\nFirst, let us rename our layer in the legend to: Borough Crime Rate (per 10,000 people).\nNext, we want to remove all other Layers, using the - (minus) button\nWe can also customise the Legend further, including type, size and alignment of font. Go ahead and style your legend as you would prefer.\nMove the Legend to an appropriate part of the layout near your Borough crime rate map - resize if necessary.\n\n\n\n\n\n\n\nFigure 5: The automatically generated legend for your map. [Enlarge image]\n\n\n\n\nNow we are finished with the Borough map, we want to make sure we do not change any aspect of its layout. To do so, we need to lock both the map layer and legend in the Items panel. This prevents us accidentally moving items in our layout. Note, this is different to locking your layers in the Items Properties as we did earlier.\n\nIn the Items panel, click the Lock check box for both our map layer and legend.\nIn the main QGIS window, uncheck your borough-theft2021 layer and make sure your lsoa-theft2021 layer is now visible.\nReturn to the Print Layout window annd repeat the process above of adding a map to the window. This time you should see your LSOA map loaded in the box (and you should see no changes to your Borough map).\n\nPlace your LSOA map next to your LSOA map - use the snap grids to help.\nSet your LSOA map to the same zoom level as your Borough map.\nMake sure your LSOA map is the same size as your Borough map.\nAdd a frame if you want.\nLock your layer and its symbology in the Items Properties once ready and the lock your layer in the Items panel.\n\n\nWe now just need to add a second legend for our Borough map.\n\n\n\n\n\n\nIf we had standardised our values across our two maps, then we would only need to use one legend. However, in this case, as there are large differences in the value ranges, we need to have two legends.\n\n\n\n\nRepeat the process as above to add a Legend for our LSOA map.\n\nRemember to re-title the legend to make it more legible/informative.\nMatch the same formatting for a clean look.\n\nOnce complete, lock these two items in the Items panel as well.\nNow we have our two maps ready, we can add our main map elements. Using the tools on the left-hand tool bar:\n\nAdd a scale bar: use the Item Properties to adjust the Style, number of segments, font, etc.\nAdd a north arrow: draw a box to generate the arrow and then use the Item Properties to adjust..\nAdd a title at the top of the page, and subtitles above the individual maps.\nFinally add a box detailing our data sources, you can copy and paste the following: Contains National Statistics data © Crown copyright and database right [2021] (Open Government Licence). Contains Ordnance Survey data © Crown copyright and database right [2021]. Crime data obtained from data.police.uk (Open Government Licence).\n\n\nOnce you have added these properties in, you should have something that looks a little like this:\n\n\n\n\n\nFigure 6: Crime rates in London Boroughs and LSOAs. [Enlarge image]\n\n\n\n\nThe only thing outstanding is to export our map to a file. Go to Layout -&gt; Export as Image and then save it as London-2021-crime-rate.png."
  },
  {
    "objectID": "03-cartography.html#assignment-w03",
    "href": "03-cartography.html#assignment-w03",
    "title": "1 Cartography and Visualisation",
    "section": "",
    "text": "Looking at the maps you have created, how does your perception of crime (and its distribution) in London vary at different scales?\nAt the moment, we have looked at the crime rate as an amount, therefore we use a sequential colour scheme that shows, predominantly, where the crime rate is the highest. As an alternative, we could use a diverging colour scheme that could show us where the crime rate is lower and/or higher than a critical mid-point, such as the average crime rate across the Boroughs and LSOAs. Create a map of crime in London, at both the Borough and LSOA levels that shows for each of these administrative geographies the percentage difference from the overall mean crime rate.\n\n\n\n\n\n\n\n\nYou will need to start by calculating the average crime rate for both datasets and subsequently calculate the difference from these values for each geography.\nAll calculations can be done using the field calculator in QGIS, but you might have to think through writing the right expression."
  },
  {
    "objectID": "03-cartography.html#byl-w03",
    "href": "03-cartography.html#byl-w03",
    "title": "1 Cartography and Visualisation",
    "section": "",
    "text": "That is us all done. Remember to save your project."
  },
  {
    "objectID": "05-spatial.html",
    "href": "05-spatial.html",
    "title": "1 Programming for Spatial Analysis",
    "section": "",
    "text": "This week we are going to look at how to use R and RStudio as a piece of GIS software. Like last week, we will be completing an analysis on our London theft crime dataset. However, rather than looking at overall theft in London by month, we will add a spatial component to our analysis.\n\n\nThe slides for this week’s lecture can be downloaded here: [Link]\n\n\n\n\n\n\nLongley, P. et al. 2015. Geographic Information Science & systems, Chapter 13: Spatial Analysis, pp. 290-318. [Link]\nLovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 2: Geographic Data in R. [Link]\nLovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 3: Attribute data operations. [Link]\nLovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 8: Making maps with R. [Link]\n\n\n\n\n\nPoorthuis, A. and Zook, M. 2020. Being smarter about space: Drawing lessons from spatial science. Annals of the American Association of Geographers 110(2): 349-359. [Link]\nDe Smith, M, Goodchild, M. and Longley, P. 2018. Geospatial analsyis. A Comprehensive guide to principles techniques and software tools. Chapter 9: Big Data and geospatial analysis. [Link]\nRadil, S. 2016. Spatial analysis of crime. Chapter 24: The Handbook of Measurement Issues in Criminology and Criminal Justice, pp. 536-554. [Link]\n\n\n\n\n\nTo analyse crime over space, we will go through several steps of data preparation and data linkage to ultimately aggregate our data to the Middle layer Super Output Area (MSOA) level. After this, we will map the crime rate for 2021 using the tmap library.\n\n\n\n\n\n\nOAs, LSOAs and MSOAs make up the different levels of the census statistical geographies. Middle layer Super Output Areas (MSOAs) are made up of groups of LSOAs, usually four or five. They comprise between 2,000 and 6,000 households and have a usually resident population between 5,000 and 15,000 persons. For details see the explanation on the webapge of the Office for National Statistics\n\n\n\n\n\nOpen a new script within your GEOG0030 project and save this script as wk5-crime-spatial-processing.r. At the top of your script, add the following metadata:\n\n\n\nR code\n\n# Analysing theft in London by MSOA\n# Date: January 2024\n# Author: Justin \n\n\nNow let us add all of the libraries we will be using today to the top of our script:\n\n\n\nR code\n\n# load libraries\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(tmap)\n\n\n\n\nYou have already been introduced to the tidyverse library last week, but now we are adding sf to read and load our spatial data as well as tmap to visualise our spatial data. We are going to first load the crime-theft-2021-london.csv we saved last week.\n\n\n\nR code\n\n# read in our csv file\nall_theft_df &lt;- read_csv(\"data/raw/crime/crime-theft-2021-london.csv\")\n\n\nRows: 38229 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): crime_id, month, reported_by, falls_within, location, lsoa_code, ls...\ndbl (2): longitude, latitude\nlgl (1): context\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nBecause some of the crimes do not have a location associated with them, first thing we need to do is filtering these out:\n\n\n\nR code\n\n# filter out crimes that have no location information\nall_theft_df &lt;- filter(all_theft_df, location != \"No Location\")\n\n\nWe can double-check what our csv looks like by either viewing our data or simply calling the head() function on our dataframe:\n\n\n\nR code\n\n# inspect\nhead(all_theft_df)\n\n\n# A tibble: 6 × 12\n  crime_id month repor…¹ falls…² longi…³ latit…⁴ locat…⁵ lsoa_…⁶ lsoa_…⁷ crime…⁸\n  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  \n1 0bac0d3… 2021… City o… City o… -0.0971    51.5 On or … E01000… City o… Theft …\n2 fbd4d10… 2021… City o… City o… -0.104     51.5 On or … E01032… City o… Theft …\n3 07dde5a… 2021… City o… City o… -0.0828    51.5 On or … E01032… City o… Theft …\n4 3be6f81… 2021… City o… City o… -0.0946    51.5 On or … E01032… City o… Theft …\n5 93b8b20… 2021… City o… City o… -0.0796    51.5 On or … E01032… City o… Theft …\n6 608e048… 2021… City o… City o… -0.101     51.5 On or … E01032… City o… Theft …\n# … with 2 more variables: last_outcome_category &lt;chr&gt;, context &lt;lgl&gt;, and\n#   abbreviated variable names ¹​reported_by, ²​falls_within, ³​longitude,\n#   ⁴​latitude, ⁵​location, ⁶​lsoa_code, ⁷​lsoa_name, ⁸​crime_type\n\n\nYou should see these rows display in your console. Great, the dataset looks as we remember. Next, we need a dataset containing the MSOAs for London. Normally, you would navigate to the Open Geography Portal, download a copy of all MSOA polygons, filter out the MSOAs that you need, and add in the 2021 population data. To save us some time today, however, you can download a pre-filtered MSOA file below. Unzip the file and copy the GeoPackage to your data/raw/boundaries folder.\n\n\n\nFile\nType\nLink\n\n\n\n\nMSOAs London 2021\nGeoPackage\nDownload\n\n\n\nNow let’s load the MSOA2021_London.gpkg. We will store this as a variable called msoa_population and use the sf library to load the data:\n\n\n\nR code\n\n# read in our MSOA GeoPackage\nmsoa_population &lt;- st_read(\"data/raw/boundaries/MSOA2021_London.gpkg\")\n\n\nReading layer `MSOA2021_London' from data source \n  `/Users/justinvandijk/Library/CloudStorage/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/raw/boundaries/MSOA2021_London.gpkg' \n  using driver `GPKG'\nSimple feature collection with 1002 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 503574.2 ymin: 155850.8 xmax: 561956.7 ymax: 200933.6\nProjected CRS: OSGB36 / British National Grid\n\n\nYou should also see the msoa_population variable appear in your environment window.\n\n\n\nAs this is the first time we have loaded spatial data into R, let’s go for a little exploration of how we can interact with our spatial dataframe. The first thing we want to do when we load spatial data is, of course, map it to confirm if everything is in order. To do this, we can use a really simple command from R’s base library: plot(). As we do not necessarily want to plot this data everytime we run this script in the future, we can type this command into the console:\n\n\n\nR code\n\n# plot our MSOA data\nplot(msoa_population)\n\n\n\n\n\nYou should see your msoa_population plot appear in your Plots window. As you will see, your MSOA dataset is plotted ‘thematically’ by each of the fields within the dataset, including the pop2021 field.\n\n\n\n\n\n\nThis plot() function is not to be used to make maps but can be used as a quick way of viewing your spatial data.\n\n\n\nWe can find out more information about our msoa_population data. Let’s next check out our class of our data. Again, in the console type:\n\n\n\nR code\n\n# inspect\nclass(msoa_population)\n\n\n[1] \"sf\"         \"data.frame\"\n\n\nWe should see our data is an sf dataframe, which is great because it means we can utilise our tidyverse libraries with our msoa_population. We can also use the attributes() function we looked at last week to find out a little more about the spatial part of our dataframe:\n\n\n\nR code\n\n# inspect\nattributes(msoa_population)\n\n\n$names\n[1] \"msoa21cd\" \"msoa21nm\" \"name\"     \"pop2021\"  \"geom\"    \n\n$row.names\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n [ reached getOption(\"max.print\") -- omitted 902 entries ]\n\n$class\n[1] \"sf\"         \"data.frame\"\n\n$sf_column\n[1] \"geom\"\n\n$agr\nmsoa21cd msoa21nm     name  pop2021 \n    &lt;NA&gt;     &lt;NA&gt;     &lt;NA&gt;     &lt;NA&gt; \nLevels: constant aggregate identity\n\n\nWe can see how many rows we have, the names of our rows and a few more pieces of information about our msoa_population data, for example, we can see that the specific $sf_column i.e. our spatial information) in our dataset is called geom.\nWe can investigate this column a little more by selecting this column within our console to return. In the console type:\n\n\n\nR code\n\n# inspect geometry column\nmsoa_population$geom\n\n\nGeometry set for 1002 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 503574.2 ymin: 155850.8 xmax: 561956.7 ymax: 200933.6\nProjected CRS: OSGB36 / British National Grid\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((534858 165834.9, 534889.1 16550...\n\n\nMULTIPOLYGON (((544600.9 182911.6, 544750.3 182...\n\n\nMULTIPOLYGON (((531567.9 176323.4, 531511.3 176...\n\n\nMULTIPOLYGON (((523236 179252.4, 523253.4 17914...\n\n\nMULTIPOLYGON (((532509.5 184173.5, 532568.3 184...\n\n\nYou should see new information about our geom column display in your console. From this selection we can find out the dataset’s:\n\ngeometry type\ndimension\nbbox (bounding box)\nCRS (coordinate reference system)\ndefinition of the first five geometries of the dataset\n\nThis is really useful as one of the first things we want to know about our spatial data is what coordinate system it is projected with. Just like our lsoa_population dataset, the msoa_population data was created and exported within the British National Grid, therefore seeing this confirmed by the information stored in the geom entry tells us that R has read in our dataset correctly.\nWe can also find out this information, but a bit more detailed, using the st_crs() function from the sf library.\n\n\n\nR code\n\n# inspect CRS\nst_crs(msoa_population)\n\n\nCoordinate Reference System:\n  User input: OSGB36 / British National Grid \n  wkt:\nPROJCRS[\"OSGB36 / British National Grid\",\n    BASEGEOGCRS[\"OSGB36\",\n        DATUM[\"Ordnance Survey of Great Britain 1936\",\n            ELLIPSOID[\"Airy 1830\",6377563.396,299.3249646,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4277]],\n    CONVERSION[\"British National Grid\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",49,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-2,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996012717,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",400000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",-100000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"United Kingdom (UK) - offshore to boundary of UKCS within 49°45'N to 61°N and 9°W to 2°E; onshore Great Britain (England, Wales and Scotland). Isle of Man onshore.\"],\n        BBOX[49.75,-9,61.01,2.01]],\n    ID[\"EPSG\",27700]]\n\n\nYou notice that we actually get a lot more information about our CRS beyond simply the code using this function. This function is really important to us as users of spatial data as it allows us to retrieve and set the CRS of our spatial data when the projection is not specified in the data but we do know what projection system should be used.\nThe final thing we might want to do before we get started with our data analysis is to simply look at the data table part of our dataset, i.e. what we called the Attribute Table in QGIS, but here it is simply the table part of our dataframe. To do so, you can either use the View() function in the console or click on the msoa_population variable within our environment.\n\n\n\nNow we have our data loaded, our next step is to process our data to create what we need as our final output for analysis: a spatial dataframe that contains a theft crime rate for each MSOA. We only two types of spatial or spatially-relevant data in our all_theft_df that can help us with this:\n\nThe approximate WGS84 latitude and longitude.\nThe Lower Super Output Area (LSOA) in which the crime it occurred.\n\nFrom Week 3’s practical, we know we can map our points using the coordinates and then provide a count by using a point-in-polygon operation, but because the crime data already have an LSOA code we will be using an Attribute Join today to show you the use of lookup tables.\n\n\n\n\n\n\nIn situations like this when you actually have the point location data, the best solution is probably to conduct a point-in-polygon analysis yourself rather than relying on a lookup table. However, because we do not always have access to point location data and you are likely to encounter situations where you need a lookup table, there won’t be any point-in-polygon action today.\n\n\n\n\n\nTo get the number of crimes that occurred in each 2021 MSOA linked to our population data, we need to link them together. However, we have two issues. First, our data is available at the LSOA level. Second, and to complicate things further, the all_theft_df dataset is based on 2011 LSOA geographies. This means that we need to take two steps:\n\nUpdate our 2011 LSOA codes to their 2021 counterparts.\nAggregate the resulting 2021 LSOA counts to their parent MSOA.\n\nFrom a GIScience perspective, there are many ways to do this but the most straightforward is to use look-up tables. Look-up tables are an extremely common tool in database management and programming, providing a very simple approach to storing additional information about a feature (such as a row within a dataframe) in a separate table that can quite literally be ‘looked up’ when needed for a specific application.\n\n\n\n\n\n\nThe data.police.uk website suggests that only from June 2023, the 2021 LSOA codes are used by default.\n\n\n\nTo be able to do this, we first need to find a look-up table that contains a list of 2011 LSOAs and their corresponding 2021 LSOAs. Lucky for us the Office for National Statistics provides this for us on their Open Geography Portal. They have a table that contains exactly what we’re looking for: LSOA (2011) to LSOA (2021) to Local Authority District (2022) Lookup for England and Wales (Version 2). As the description on the website tells us:\n\n“This is an exact fit lookup file between Lower layer Super Output Areas as at December 2011 and Lower layer Super Output Areas as at December 2021 and Local Authority Districts as at December 2022 in England and Wales. This product has been provided with a ‘change indicator’ field, that define the lookup between 2011 and 2021 LSOA. This field indicates which super output areas have changed between 2011 and 2021.”\n\nDownload the ONS lookup table. Subsequently, unzip and move this file to your data -&gt; raw -&gt; boundaries folder.\n\n\n\nFile\nType\nLink\n\n\n\n\nONS LSOA 2011 - LSOA 2021 lookup\ncsv\nDownload\n\n\n\nLoad the dataset using the read_csv() function.\n\n\n\nR code\n\n# read the lookup table\nlsoa_lookup &lt;- read_csv(\"data/raw/boundaries/lsoa11_lsoa21.csv\")\n\n\nRows: 35796 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): LSOA11CD, LSOA11NM, LSOA21CD, LSOA21NM, CHGIND, LAD22CD, LAD22NM, L...\ndbl (1): ObjectId\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNow we have our lookup table, we can assign a relevant 2021 LSOA code to each of the 2011 LSOA codes in our all_theft_df dataframe. To do so, we are going to use one of the join() functions from the dplyr library.\n\n\n\n\n\n\nWe have already learnt how to complete Attribute Joins in QGIS via the Joins tab in the Properties window so it should come of no surprise that we can do exactly the same process within R. To conduct a join between two dataframes (spatial or non-spatial, it does not matter), we use the same principles of selecting a unique but matching field within our dataframes to join them together.\nWithin R, you have two options to complete a dataframe join:\n\nThe first is to use the base R library and its merge() function:\n\nBy default the dataframes are merged on the columns with names they both have, but you can also provide the columns to match separate by using the parameters: by.x and by.y.\nYour code would look something like: merge(x, y, by.x = \"xColName\", by.y = \"yColName\"), with x and y each representing a dataframe.\nThe rows in the two dataframes that match on the specified columns are extracted, and joined together.\nIf there is more than one match, all possible matches contribute one row each, but you can also tell merge whether you want all rows, including ones without a match, or just rows that match, with the arguments all.x and all.\n\nThe second option is to use the dplyr library:\n\ndplyr uses SQL database syntax for its join functions.\nThere are four types of joins possible with the dplyr library.\n\ninner_join(): includes all rows that exist both within x and y.\nleft_join(): includes all rows in x.\nright_join(): includes all rows in y.\nfull_join(): includes all rows in x and y.\n\nFiguring out which one you need will be on a case by case basis.\nAgain, if the join columns have the same name, all you need is left_join(x, y).\nIf they do not have the same name, you need a by argument, such as left_join(x, y, by = c(\"xName\" = \"yName\")). Left of the equals is the column for the first dataframe, right of the equals is the name of the column for the second dataframe.\n\n\n\n\n\nAs we have seen from the list of fields above, we know that we have at least two fields that should match across the datasets: our LSOA codes and LSOA names. We of course need to identify the precise fields that contain these values in each of our dataframes, i.e. LSOA11CD and LSOA11NM in our lsoa_lookup dataframe and lsoa_code and lsoa_name in our all_theft_df dataframe, but once we know what fields we can use, we can go ahead and join our two dataframes together. Well often.\n\n\n\n\n\n\nIf you have a one-to-one lookup table, e.g. one LSOA11 geography corresponds to exactly one LSOA21 entry, this process is very easy. However, between the 2011 and 2021 Census different changes have happened: some LSOA11 have been split into multiple LSOA21 polygons and in other cases LSOA11 have been merged together into a single LSOA21 polygon. This means we need to do some extra work to make sure we not accidentally adjust the number of crimes that are captured in the data.\n\n\n\nUnfortunately, the LSOA lookup does not link 2011 LSOAs to 2021 LSOAs on a one-to-one basis. In fact, different types of relationships exists that are flagged in the CHGIND column:\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nU\nNo Change from 2011 to 2021. This means that direct comparisons can be made between these 2011 and 2021 LSOA.\n\n\nS\nSplit. This means that the 2011 LSOA has been split into two or more 2021 LSOA. There will be one record for each of the 2021 LSOA that the 2011 LSOA has been split into. This means direct comparisons can be made between estimates for the single 2011 LSOA and the estimates from the aggregated 2021 LSOA.\n\n\nM\nMerged. 2011 LSOA have been merged with another one or more 2011 LSOA to form a single 2021 LSOA. This means direct comparisons can be made between the aggregated 2011 LSOAs’ estimates and the single 2021 LSOA’s estimates.\n\n\nX\nThe relationship between 2011 and 2021 LSOA is irregular and fragmented. This has occurred where 2011 LSOA have been redesigned because of local authority district boundary changes, or to improve their social homogeneity. These can’t be easily mapped to equivalent 2021 LSOA like the regular splits (S) and merges (M), and therefore like for like comparisons of estimates for 2011 LSOA and 2021 LSOA are not possible.\n\n\n\nAlthough there are different ways of going about this, we will:\n\nDivide the total crimes for 2011 LSOAs that have been split equally across 2021 LSOAs.\nCombine total crimes for LSOAs that have been merged.\nIgnore the suggested 2021 LSOAs for LSOAs for which there has been an irregular or fragmented relationship.\n\n\n\n\nR code\n\n# for unchanged LSOAs keep weightings of individual crimes the same\nlsoa_lookup_same &lt;- lsoa_lookup |&gt;\n    filter(CHGIND == \"U\") |&gt;\n    group_by(LSOA11CD) |&gt;\n    mutate(n = n())\n\n# for merged LSOAs: keep weightings of individual crimes the same\nlsoa_lookup_merge &lt;- lsoa_lookup |&gt;\n    filter(CHGIND == \"M\") |&gt;\n    group_by(LSOA11CD) |&gt;\n    mutate(n = n())\n\n# for split LSOAs: weigh individual crimes proportionally to the number of 2021\n# LSOAs\nlsoa_lookup_split &lt;- lsoa_lookup |&gt;\n    filter(CHGIND == \"S\") |&gt;\n    group_by(LSOA11CD) |&gt;\n    mutate(n = 1/n())\n\n# re-combine the lookup with updated weightings\nlsoa_lookup &lt;- rbind(lsoa_lookup_same, lsoa_lookup_merge, lsoa_lookup_split)\n\n# inspect\nlsoa_lookup\n\n\n# A tibble: 35,786 × 10\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n   &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          1     1\n 2 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          2     1\n 3 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          3     1\n 4 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          4     1\n 5 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          5     1\n 6 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          6     1\n 7 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          7     1\n 8 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          8     1\n 9 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          9     1\n10 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         10     1\n# … with 35,776 more rows, and abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD,\n#   ³​LSOA21NM, ⁴​LAD22NMW, ⁵​ObjectId\n\n\n\n\n\n\n\n\nThe code above uses something called a pipe function: |&gt;. A pipe is used to push the outcome of one function/process into another automatically. It might sound a little confusing at first, but once you start using it, it really can make your code quicker and easier to read and write. Most importantly: it stops us from having to create lots of additional variables to store outputs along the way. There is nothing wrong with not using the pipe and, in fact, sometimes it is better not to use it as we are not able to check the results of function that are called ‘in the middle’ of the piped workflow.\n\n\n\nNow we have adjusted our weightings we can perform our first join. We need to decide which dataset is going to be our target dataset (i.e. the dataset we attach new data too). It makes sense to use the all_theft_df because we need to keep all records in this dataset, but we do not necessarily need all records in the lsoa_lookup dataset for LSOAs for which no crime has been recorded.\n\n\n\nR code\n\n# join to crime data\nall_theft_df_join &lt;- all_theft_df |&gt;\n    left_join(lsoa_lookup, by = c(lsoa_code = \"LSOA11CD\")) |&gt;\n    filter(!is.na(LSOA21CD))\n\n\n\n\n\n\n\n\nBesides joining our LSOA lookup table to our data, we also filter out all crime records that still not have not been assigned a 2021 LSOA code.\n\n\n\nYou should be able to determine that all_theft_df_join contains 20 variables: 12 from all_theft_df, plus 8 from lsoa_lookup. This seems to be fine and the join was succesful. However, if we were to count the number of rows in our original all_theft_df dataframe and compare it to our all_theft_df_join dataframe, we would notice something strange: our number of crimes have increased somehow.\n\n\n\nR code\n\n# number of crimes original dataset\nnrow(all_theft_df)\n\n\n[1] 37015\n\n# number of crimes joint dataset\nnrow(all_theft_df_join)\n\n[1] 46666\n\n\nThe change in number of crimes is caused by our one-to-many relationships: one 2011 LSOA can relate to multiple 2021 LSOAs and therewith this one row of data gets duplicated. Fortunately, we saw this coming and we already adjusted the weightings:\n\n\n\nR code\n\n# number of crimes original dataset\nnrow(all_theft_df)\n\n\n[1] 37015\n\n# number of actual crimes joint dataset\nsum(all_theft_df_join$n)\n\n[1] 37010\n\n\n\nWhereas the number of crimes is very similar, there is still a difference of 5 crimes. This difference is caused by our last filter(), where 2011 LSOAs that have not been assigned a 2021 LSOA code are filtered out. In these cases there is actually a recording error and no valid 2011 LSOA code is used. We therefore choose to ignore these 5 data points.\n\nWe are getting there, we just need to aggregate our LSOAs to their parent MSOA. Download the ONS lookup table. Subsequently, unzip and move this file to your data -&gt; raw -&gt; boundaries folder.\n\n\n\nFile\nType\nLink\n\n\n\n\nONS LSOA 2021 - MSOA 2021 lookup\ncsv\nDownload\n\n\n\n\n\n\nR code\n\n# read the lookup table\nmsoa_lookup &lt;- read_csv(\"data/raw/boundaries/lsoa21_msoa21.csv\")\n\n\nRows: 35675 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): lsoa21cd, msoa21cd\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe can now simply attach the msoa_lookup table to our all_theft_df:\n\n\n\nR code\n\n# join to crime data\nall_theft_df_join &lt;- all_theft_df_join |&gt;\n    left_join(msoa_lookup, by = c(LSOA21CD = \"lsoa21cd\"))\n\n\nNow we have our joined dataset, we can finally move forward with aggregating our data to the MSOA level. Before we do this, it would be good if we could clean up our dataframe to only the relevant data that we need moving forward. To be able to ‘clean’ our dataframe, we have two choices in terms of the code we might want to run. First, we could look to drop certain columns from our dataframe. Alternatively, we could create a subset of the columns we want to keep from our dataframe and store this as a new variable or simply overwrite the currently stored variable. To do either of these types of data transformation, we need to know more about how we can interact with a dataframe in terms of indexing, selecting and slicing.\n\n\n\n\nEverything we will be doing today as we progress with our dataframe cleaning and processing relies on us understanding how to interact with and transform our dataframe. This interaction itself relies on knowing about how indexing works in R as well as how to select and slice your dataframe to extract the relevant cells, rows or columns and then manipulate them. Whilst there are traditional programming approaches to this using the base R library, dplyr is making this type of data wrangling much easier. The following video provides an excellent explanation from both a base R perspective as well as using the dplyr library.\n\n\nThe most basic approach to selecting and slicing within programming relies on the principle of using indexes within our data structures. Indexes actually apply to any type of data structure, from single atomic vectors to complicated dataframes as we use here. Indexing is the numbering associated with each element of a data structure. For example, if we create a simple vector that stores several strings:\n\n\n\nR code\n\n# store a simple vector of strings\nsimple_vector &lt;- c(\"Aa\", \"Bb\", \"Cc\", \"Dd\", \"Ee\", \"Ff\", \"Gg\")\n\n\nR will assign each element (i.e. string) within this simple vector with a number: Aa = 1, Bb = 2, Cc = 3 and so on. Now we can go ahead and select each element by using the base selection syntax which is using square brackets after your element’s variable name, as so:\n\n\n\nR code\n\n# select the first element of our variable\nsimple_vector[1]\n\n\n[1] \"Aa\"\n\n\nWhich should return the first element, our first string containing Aa. You could change the number in the square brackets to any number up to 7 and you would return each specific element in our vector. However, say you do not want the first element of our vector but the second to fifth elements. To achieve this, we conduct what is known in programming as a slicing operation, where, using the [] syntax, we add a colon : to tell R where to start and where to end in creating a selection, known as a slice:\n\n\n\nR code\n\n# select the second to fifth element of our vector\nsimple_vector[2:5]\n\n\n[1] \"Bb\" \"Cc\" \"Dd\" \"Ee\"\n\n\nYou should now see our 2nd to 5th elements returned. Now what is super cool about selection and slicing is that we can add in a simple - (minus) sign to essentially reverse our selection. So for example, we want to return everything but the 3rd element:\n\n\n\nR code\n\n# select everything but the third element of our vector\nsimple_vector[-3]\n\n\n[1] \"Aa\" \"Bb\" \"Dd\" \"Ee\" \"Ff\" \"Gg\"\n\n\nAnd with a slice, we can use the minus to slice out parts of our vector, for example, remove the 2nd to the 5th elements (note the use of a minus sign for both):\n\n\n\nR code\n\n# select outside the second to the fifth element of our vector\nsimple_vector[-2:-5]\n\n\n[1] \"Aa\" \"Ff\" \"Gg\"\n\n\n\n\n\n\n\n\nThis use of square brackets for selection syntax is common across many programming languages, including Python, but there are often some differences you will need to be aware of if you pursue other languages. For example:\n\nPython always starts its index from 0! Whereas we can see here with R, our index starts at 1.\nR is unable to index the characters within strings. This is something you can do in Python, but in R, we will need to use a function such as substring().\n\n\n\n\nWe can also apply these selection techniques to dataframes, but we will have a little more functionality as our dataframes are made from both rows and columns. This means when it comes to selections, we can utilise an amended selection syntax that follows a specific format to select individual rows, columns, slices of each, or just a single cell: [rows, columns]\nThere are many ways we can use this syntax, which we will show below using our lsoa_lookup dataframe. To select a single column from your dataframe, you can use one of two approaches. First we can follow the syntax above carefully and simply set our column parameter in our syntax above to the number 2:\n\n\n\nR code\n\n# select the second column from the dataframe\nlsoa_lookup[, 2]\n\n\n# A tibble: 35,786 × 1\n   LSOA11NM                 \n   &lt;chr&gt;                    \n 1 City of London 001A      \n 2 City of London 001B      \n 3 City of London 001C      \n 4 City of London 001E      \n 5 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C\n10 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nYou should see your second column display in your console. Second, we can actually select our column by only typing in the number (no need for the comma). By default, when there is only one argument present in the selection brackets, R will select the column from the dataframe, not the row:\n\n\n\nR code\n\n# select the second column from the dataframe\nlsoa_lookup[2]\n\n\n# A tibble: 35,786 × 1\n   LSOA11NM                 \n   &lt;chr&gt;                    \n 1 City of London 001A      \n 2 City of London 001B      \n 3 City of London 001C      \n 4 City of London 001E      \n 5 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C\n10 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nTo select a specific row, we need to add in a comma after our number:\n\n\n\nR code\n\n# select the second row from the dataframe\nlsoa_lookup[2, ]\n\n\n# A tibble: 1 × 10\n# Groups:   LSOA11CD [1]\n  LSOA11CD  LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n  &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 E01000002 City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          2     1\n# … with abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD, ³​LSOA21NM, ⁴​LAD22NMW,\n#   ⁵​ObjectId\n\n\nYou should see your second row appear. Now, to select a specific cell in our dataframe, we simply provide both arguments in our selection parameters:\n\n\n\nR code\n\n# select the second column, row from the dataframe\nlsoa_lookup[2, 2]\n\n\n# A tibble: 1 × 1\n  LSOA11NM           \n  &lt;chr&gt;              \n1 City of London 001B\n\n\nWhat is also helpful in R is that we can select our columns by their field names by passing these field names to our selection brackets as a string. For a single column:\n\n\n\nR code\n\n# select the second column from the dataframe\nlsoa_lookup[\"LSOA11NM\"]\n\n\n# A tibble: 35,786 × 1\n   LSOA11NM                 \n   &lt;chr&gt;                    \n 1 City of London 001A      \n 2 City of London 001B      \n 3 City of London 001C      \n 4 City of London 001E      \n 5 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C\n10 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nOr for more than one columns, we can supply a combined vector:\n\n\n\nR code\n\n# select the first, second column from the dataframe\nlsoa_lookup[c(\"LSOA11CD\", \"LSOA11NM\")]\n\n\n# A tibble: 35,786 × 2\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD  LSOA11NM                 \n   &lt;chr&gt;     &lt;chr&gt;                    \n 1 E01000001 City of London 001A      \n 2 E01000002 City of London 001B      \n 3 E01000003 City of London 001C      \n 4 E01000005 City of London 001E      \n 5 E01000006 Barking and Dagenham 016A\n 6 E01000007 Barking and Dagenham 015A\n 7 E01000008 Barking and Dagenham 015B\n 8 E01000009 Barking and Dagenham 016B\n 9 E01000011 Barking and Dagenham 016C\n10 E01000012 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nTo retrieve the second to the fourth column in our dataframe, we can use:\n\n\n\nR code\n\n# select the second to the fourth column from our dataframe\nlsoa_lookup[, 2:4]\n\n\n# A tibble: 35,786 × 3\n   LSOA11NM                  LSOA21CD  LSOA21NM                 \n   &lt;chr&gt;                     &lt;chr&gt;     &lt;chr&gt;                    \n 1 City of London 001A       E01000001 City of London 001A      \n 2 City of London 001B       E01000002 City of London 001B      \n 3 City of London 001C       E01000003 City of London 001C      \n 4 City of London 001E       E01000005 City of London 001E      \n 5 Barking and Dagenham 016A E01000006 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A E01000007 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B E01000008 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B E01000009 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C E01000011 Barking and Dagenham 016C\n10 Barking and Dagenham 015D E01000012 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n# select the second to the fourth column from our dataframe\nlsoa_lookup[2:4]\n\n# A tibble: 35,786 × 3\n   LSOA11NM                  LSOA21CD  LSOA21NM                 \n   &lt;chr&gt;                     &lt;chr&gt;     &lt;chr&gt;                    \n 1 City of London 001A       E01000001 City of London 001A      \n 2 City of London 001B       E01000002 City of London 001B      \n 3 City of London 001C       E01000003 City of London 001C      \n 4 City of London 001E       E01000005 City of London 001E      \n 5 Barking and Dagenham 016A E01000006 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A E01000007 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B E01000008 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B E01000009 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C E01000011 Barking and Dagenham 016C\n10 Barking and Dagenham 015D E01000012 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nWe can also provide a combined list of the columns we want to extract:\n\n\n\nR code\n\n# select the second to the seventh columns from our dataframe\nlsoa_lookup[c(2, 3, 4, 7)]\n\n\n# A tibble: 35,786 × 4\n   LSOA11NM                  LSOA21CD  LSOA21NM                  LAD22NM        \n   &lt;chr&gt;                     &lt;chr&gt;     &lt;chr&gt;                     &lt;chr&gt;          \n 1 City of London 001A       E01000001 City of London 001A       City of London \n 2 City of London 001B       E01000002 City of London 001B       City of London \n 3 City of London 001C       E01000003 City of London 001C       City of London \n 4 City of London 001E       E01000005 City of London 001E       City of London \n 5 Barking and Dagenham 016A E01000006 Barking and Dagenham 016A Barking and Da…\n 6 Barking and Dagenham 015A E01000007 Barking and Dagenham 015A Barking and Da…\n 7 Barking and Dagenham 015B E01000008 Barking and Dagenham 015B Barking and Da…\n 8 Barking and Dagenham 016B E01000009 Barking and Dagenham 016B Barking and Da…\n 9 Barking and Dagenham 016C E01000011 Barking and Dagenham 016C Barking and Da…\n10 Barking and Dagenham 015D E01000012 Barking and Dagenham 015D Barking and Da…\n# … with 35,776 more rows\n\n\nWe can apply this slicing approach to our rows:\n\n\n\nR code\n\n# select the second to the fourth row from our dataframe\nlsoa_lookup[2:4, ]\n\n\n# A tibble: 3 × 10\n# Groups:   LSOA11CD [3]\n  LSOA11CD  LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n  &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 E01000002 City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          2     1\n2 E01000003 City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          3     1\n3 E01000005 City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          4     1\n# … with abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD, ³​LSOA21NM, ⁴​LAD22NMW,\n#   ⁵​ObjectId\n\n\nAs well as a negative selection:\n\n\n\nR code\n\n# select outside the second to the fourth row from our dataframe\nlsoa_lookup[-2:-4, ]\n\n\n# A tibble: 35,783 × 10\n# Groups:   LSOA11CD [34,744]\n   LSOA11CD LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n   &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          1     1\n 2 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          5     1\n 3 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          6     1\n 4 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          7     1\n 5 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          8     1\n 6 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          9     1\n 7 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         10     1\n 8 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         11     1\n 9 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         12     1\n10 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         13     1\n# … with 35,773 more rows, and abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD,\n#   ³​LSOA21NM, ⁴​LAD22NMW, ⁵​ObjectId\n\n\n\n\n\nInstead of using the square brackets [] syntax, we can also use dplyr functions that we can use to select or slice our dataframes accordingly:\n\nFor columns, we use the select() function that enables us to select one or more columns using their column names.\nFor rows, we use the slice() function that enables us to select one or more rows using their position (i.e. similar to the process above).\n\nFor both functions, we can also use the negative - approach we saw in the base R approach to ‘reverse a selection’.\n\n\n\nR code\n\n# select column two\ndplyr::select(lsoa_lookup, 2)\n\n\nAdding missing grouping variables: `LSOA11CD`\n\n\n# A tibble: 35,786 × 2\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD  LSOA11NM                 \n   &lt;chr&gt;     &lt;chr&gt;                    \n 1 E01000001 City of London 001A      \n 2 E01000002 City of London 001B      \n 3 E01000003 City of London 001C      \n 4 E01000005 City of London 001E      \n 5 E01000006 Barking and Dagenham 016A\n 6 E01000007 Barking and Dagenham 015A\n 7 E01000008 Barking and Dagenham 015B\n 8 E01000009 Barking and Dagenham 016B\n 9 E01000011 Barking and Dagenham 016C\n10 E01000012 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n# select everything outside column two\ndplyr::select(lsoa_lookup, -2)\n\n# A tibble: 35,786 × 9\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD  LSOA21CD  LSOA21NM     CHGIND LAD22CD LAD22NM LAD22…¹ Objec…²     n\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 E01000001 E01000001 City of Lon… U      E09000… City o… &lt;NA&gt;          1     1\n 2 E01000002 E01000002 City of Lon… U      E09000… City o… &lt;NA&gt;          2     1\n 3 E01000003 E01000003 City of Lon… U      E09000… City o… &lt;NA&gt;          3     1\n 4 E01000005 E01000005 City of Lon… U      E09000… City o… &lt;NA&gt;          4     1\n 5 E01000006 E01000006 Barking and… U      E09000… Barkin… &lt;NA&gt;          5     1\n 6 E01000007 E01000007 Barking and… U      E09000… Barkin… &lt;NA&gt;          6     1\n 7 E01000008 E01000008 Barking and… U      E09000… Barkin… &lt;NA&gt;          7     1\n 8 E01000009 E01000009 Barking and… U      E09000… Barkin… &lt;NA&gt;          8     1\n 9 E01000011 E01000011 Barking and… U      E09000… Barkin… &lt;NA&gt;          9     1\n10 E01000012 E01000012 Barking and… U      E09000… Barkin… &lt;NA&gt;         10     1\n# … with 35,776 more rows, and abbreviated variable names ¹​LAD22NMW, ²​ObjectId\n\n# select the LSOA11CD column\ndplyr::select(lsoa_lookup, LSOA11CD)\n\n# A tibble: 35,786 × 1\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD \n   &lt;chr&gt;    \n 1 E01000001\n 2 E01000002\n 3 E01000003\n 4 E01000005\n 5 E01000006\n 6 E01000007\n 7 E01000008\n 8 E01000009\n 9 E01000011\n10 E01000012\n# … with 35,776 more rows\n\n# select everything outside the LSOA11CD\ndplyr::select(lsoa_lookup, -LSOA11CD)\n\nAdding missing grouping variables: `LSOA11CD`\n\n\n# A tibble: 35,786 × 10\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n   &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          1     1\n 2 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          2     1\n 3 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          3     1\n 4 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          4     1\n 5 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          5     1\n 6 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          6     1\n 7 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          7     1\n 8 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          8     1\n 9 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          9     1\n10 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         10     1\n# … with 35,776 more rows, and abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD,\n#   ³​LSOA21NM, ⁴​LAD22NMW, ⁵​ObjectId\n\n\nIn addition to these index-based functions, within dplyr, we also have filter() that enables us to easily filter rows within our dataframe based on specific conditions. In addition, dplyr provides lots of functions that we can use directly with these selections to apply certain data wrangling processes to only specific parts of our dataframe, such as mutate() or count().\n\n\n\n\n\n\nWe will be using quite a few of these functions in the remaining data wrangling section below - plus throughout our module, so it is highly recommend to download the dplyr cheat sheet to keep track of what functions we are using and why!\n\n\n\nAs we have seen above, whilst there are two approaches to selection using either base R library or the dplyr library, we will continue to focus on using functions directly from the dplyr library to ensure efficiently and compatibility within our code. Within dplyr, as you also saw, whether we want to keep or drop columns, we always use the same function: select().\nTo use this function, we provide our function with a single or list of the columns we want to keep or if we want to drop them, we use the same approach, but add a - before our selection. Let’s see how we can extract just the relevant columns we will need for our future analysis. Note that we will overwrite our all_theft_df_join variable.\nIn your script, add the following code to extract only the relevant columns we need for our future analysis:\n\n\n\nR code\n\n# reduce our dataframe using the select function\nall_theft_df_join &lt;- dplyr::select(all_theft_df_join, crime_id, LSOA21CD, msoa21cd,\n    n)\n\n\nYou should now see that your all_theft_df_join dataframe should only contain four variables. You can go and view this dataframe or call the head() function on the data in the console if youlike to check out this new formatting.\n\n\n\n\nTo aggregate our crime by MSOA, we need to use a combination of dplyr functions. First, we need to group our crime by each 2021 MSOA and then create a new variable that contains the sum of thefts occurring in each MSOA. To do so, we will use the group_by() function and the mutate() function. This is the same group_by() function we already used to adjust the LSOA weightings. The group_by() function creates a ‘grouped’ copy of the table (in memory), then any dplyr function used on this grouped table will manipulate each group separately (i.e. our weighted crime counts) and then combine the results to a single output:\n\n\n\nR code\n\nall_theft_df_join &lt;- all_theft_df_join |&gt;\n    group_by(msoa21cd) |&gt;\n    mutate(msoa_theft = sum(n)) |&gt;\n    ungroup()\n\n\nInspect the dataframe using the View() function. You will notice that many values in the msoa_theft column are the same: this makes sense becuase they relate to the same MSOA. This also means that we probably should just keep only keep distinct values:\n\n\n\nR code\n\nall_theft_df_msoa &lt;- all_theft_df_join |&gt;\n    distinct(msoa21cd, msoa_theft)\n\n\nWrite out the completed theft table to a new csv file for future reference:\n\n\n\nR code\n\n# save as csv\nwrite_csv(all_theft_df_msoa, \"data/data/MSOA2021_theft.csv\")\n\n\n\n\n\nWe are now getting to the final stages of our data processing, we just need to join our completed theft table, all_theft_df_msoa to our msoa_population spatial dataframe and then compute a theft crime rate. This will then allow us to map our crime rates by MSOA, exactly what we set to achieve within this practical.\n\n\n\nR code\n\n# join theft to the MSOA popoulation dataset\ntheft_msoa_sdf &lt;- msoa_population |&gt;\n    left_join(all_theft_df_msoa, by = c(msoa21cd = \"msoa21cd\"))\n\n\nTo double-check our join, we want to do one extra step of quality checks and check that each of our MSOAs has at least one occurrence of crime over the twelve month period. We do this by computing a new column that totals the number of thefts. By identifying any MSOAs that have zero entries (NA), we can double-check with our original all_theft_df_msoa to see if this is the correct data for that MSOA or if there has been an error in our join. What we will need to do is adjust the values present within these MSOAs prior to our visualisation analysis: these should not have NA as their value but rather 0.\n\n\n\nR code\n\n# replace all NAs in our dataframe with 0\ntheft_msoa_sdf[is.na(theft_msoa_sdf)] = 0\n\n\nThe final step we need to take before we can map our theft data is, of course, compute a crime rate. We have our pop2021 column within our theft_msoa_sdf dataframe - we just need to figure out the code that allows us to apply our calculation that we’ve used in our previous practicals (i.e. using the Attribute/Field Calculator in QGIS: value/pop2019 * 10000) to each of our datasets.\n\n\n\nR code\n\n# calculate crime rate\ntheft_msoa_sdf &lt;- theft_msoa_sdf |&gt;\n    mutate(crime_rate = (msoa_theft/as.numeric(pop2021)) * 10000)\n\n\nHave a look at your new theft_msoa_sdf spatial dataframe. Does it look as you would expect? Now we have our final dataframe, we can go ahead and make our maps.\n\n\n\nFor making our maps, we will be using one of two main visualisation libraries that can be used for spatial data: tmap. tmap is a library written around thematic map visualisation. The package offers a flexible, layer-based, and easy to use approach to create thematic maps, such as choropleths and bubble maps. What is really great about tmap is that it comes with one quick plotting method for a map called: qtm().\nWe can use this function to plot the theft crime rate really quickly. Within your script, use the qtm function to create a map of theft crime rate in London in 2021.\n\n\n\n\n\n\nBefore continuing do confirm whether your theft_msoa_sdf is indeed still of class sf. In some instances it is possible that this changed when manipulating the attributes. You can simply check this by running class(theft_msoa_sdf). If your dataframe is not of class sf, you can force it into one by running theft_msoa_sdf &lt;- st_as_sf(theft_msoa_sdf)).\n\n\n\n\n\n\nR code\n\n# quick thematic map\nqtm(theft_msoa_sdf, fill = \"crime_rate\")\n\n\n\n\n\nFigure 1: Quick thematic map.\n\n\n\n\nIn this case, the fill() argument is how we tell tmap to create a choropleth map based on the values in the column we provide it with. If we simply set it to NULL, we would only draw the borders of our polygons. Within our qtm function, we can pass quite a few different parameters that would enable us to change specific aesthetics of our map - if you go ahead and look up the documentation for the function, you will see a list of these parameters. We can, for example, set the lines of our MSOA polygons to white by adding the borders parameter:\n\n\n\nR code\n\n# quick thematic map\nqtm(theft_msoa_sdf, fill = \"crime_rate\", borders = \"white\")\n\n\n\n\n\nFigure 2: Quick thematic map with white borders.\n\n\n\n\nThe map does not really look great. We can continue to add and change parameters in our qtm() function to create a map we are satisfied with. However, the issue with the qtm() function is that it is quite limited in its functionality and mostly used to quickly inspect your data. Instead, when we want to develop more complex maps using the tmap library, we want to use their main plotting method which uses a function called tm_shape(), which we build on using the layered grammar of graphics approach.\n\n\n\n\n\n\nWhen it comes to setting colours within a map or any graphic, we can either pass through a colour as a word, a HEX code or a pre-defined palette. You can find out more here, which is a great quick reference to just some of the possible colours and palettes you will be able to use in R.\n\n\n\nThe main approach to creating maps in tmap is to use the grammar of graphics to build up a map based on what is called the tm_shape() function. Essentially this function, when populated with a spatial dataframe, takes the spatial information of our data (including the projection and geometry of our data) and creates a spatial “object”. This object contains some information about our original spatial dataframe that we can override (such as the projection) within this function’s parameters, but ultimately, by using this function, you are instructing R that this is the object from which to “draw my shape”.\nTo actually draw the shape, we next need to add a layer to specify the type of shape we want R to draw from this information - in our case, our polygon data. We need to add a function therefore that tells R to “draw my spatial object as X” and within this “layer”, you can also specific additional information to tell R how to draw your layer. You can then add in additional layers, including other spatial objects (and their related shapes) that you want drawn on your map, plus a specify your layout options through a layout layer.\nLet’s see how we can build up our first map in tmap.\n\n\n\nR code\n\n# shape, polygons\ntm_shape(theft_msoa_sdf) + tm_polygons()\n\n\n\n\n\nFigure 3: Building up a map layer by layer.\n\n\n\n\nAs you should now see, we have now mapped the spatial polygons of our theft_msoa_sdf spatial dataframe. However, this is not the map we want: we want to have our polygons represented by a choropleth map where the colours reflect the theft crime rate, rather than the default grey polygons we see before us. To do so, we use the col= parameter that is within our tm_polygons() shape.\n\n\n\n\n\n\nThe col parameter within tm_polygons() is used to fill our polygons with a specific fill type, of either:\n\na single color value (e.g. red)\nthe name of a data variable that is contained in the spatial data file Either the data variable contains color values, or values (numeric or categorical) that will be depicted by a specific color palette.\n\n\n\n\nLet’s go ahead and pass our crime_rate column within the col() parameter and see what we get:\n\n\n\nR code\n\n# shape, polygons\ntm_shape(theft_msoa_sdf) +\n  # specify column\n  tm_polygons(col = \"crime_rate\")\n\n\n\n\n\nFigure 4: Building up a map layer by layer.\n\n\n\n\nWe are slowly getting there. But there are two things we can notice straight away that do not look right about our data. The first is that our classification breaks do not really reflect the variation in our dataset. This is because tmap has defaulted to its default break type: pretty breaks, whereas, as we know, using an approach such as natural breaks, aka jenks, may reveal better variation in our data.\nUsing the documentation for tm_polygons(), it looks like the following parameters are relevant to help us create the right classification for our map:\n\nn: state the number of classification breaks you want.\nstyle: state the style of breaks you want, e.g. fixed, sd, equal, quantile.\nbreaks: state the numeric breaks you want to use when using the fixed style approach.\n\nLet’s say we want to change our choropleth map to have five classes, determined via the quantile method. We simply need to add the n and style parameters into our tm_polygons() layer:\n\n\n\nR code\n\n# shape, polygons\ntm_shape(theft_msoa_sdf) +\n  # specify column, classes\n  tm_polygons(col = \"crime_rate\", n = 5, style = \"quantile\")\n\n\n\n\n\nFigure 5: Building up a map layer by layer.\n\n\n\n\nWe now have a choropleth that reflects better the distribution of our data, but we can make them a little prettier by rounding the values. To do so, we can change the style of the map to fixed and then supply a new argument for breaks that contains the rounded classification breaks:\n\n\n\nR code\n\n# shape, polygons\ntm_shape(theft_msoa_sdf) +\n  # specify column, classes, breaks\n  tm_polygons(col = \"crime_rate\", n = 5, style = \"fixed\", breaks = c(0, 5, 10, 15, 50, 5000))\n\n\n\n\n\nFigure 6: Building up a map layer by layer.\n\n\n\n\nThat looks a little better from the classification side of things.\n\n\n\nTo style our map takes a further understanding and familiarity with our tmap library, but it is only something you will only really learn by having to make your own maps. As a result, we will not go into explaining exactly every aspect of map styling but instead provide you with some example code that you can use as well as experiment with to try to see how you can adjust aspects of the map to your preferences.\nFundamentally, the key functions to be aware of:\n\ntm_layout(): contains parameters to style titles, fonts, the legend;\ntm_compass(): contains parameters to create and style a North arrow or compass;\ntm_scale_bar(): contains parameters to create and style a scale bar.\n\nTo be able to start styling our map, we need to interrogate each of these functions and their parameters to trial and error options to ultimately create a map we are happy with:\n\n\n\nR code\n\n# shape, polygon\ntm_shape(theft_msoa_sdf) +\n  # specify column, classes, breaks, borders, legend title\n  tm_polygons(\n    col = \"crime_rate\", n = 5, style = \"fixed\",\n    breaks = c(0, 5, 10, 15, 50, 5000),\n    palette = \"Blues\",\n    title = \"Rate per 10,000 people\"\n  ) +\n  # add title\n  tm_layout(\n    main.title = \"Theft - 2021\",\n    main.title.fontface = 2,\n    fontfamily = \"Helvetica\",\n    legend.outside = TRUE,\n    legend.position = c(\"left\", \"top\"),\n    legend.title.size = 1,\n    legend.title.fontface = 2\n  ) +\n  # add North arrow\n  tm_compass(\n    type = \"arrow\",\n    position = c(\"right\", \"bottom\")\n  ) +\n  # add scale bar\n  tm_scale_bar(\n    breaks = c(0, 5, 10, 15, 20),\n    position = c(\"left\", \"bottom\")\n  )\n\n\n\n\n\nFigure 7: Building up a map layer by layer.\n\n\n\n\n\n\n\nOnce we are finished making our map, we can go ahead and export it to our maps folder. To do so, we need to save our map-making code to as a variable and then use the tmap_save() function to save the output of this code to a picture within our maps folder.\n\n\n\nR code\n\n# shape, polygons, specify column, specify classes, specify breaks, map elements\nmsoa_map &lt;-\n  # shape, polygon\n  tm_shape(theft_msoa_sdf) +\n  # specify column, classes, breaks, borders, legend title\n  tm_polygons(\n    col = \"crime_rate\", n = 5, style = \"fixed\",\n    breaks = c(0, 5, 10, 15, 50, 5000),\n    palette = \"Blues\",\n    title = \"Rate per 10,000 people\"\n  ) +\n  # add title\n  tm_layout(\n    main.title = \"Theft - 2021\",\n    main.title.fontface = 2,\n    fontfamily = \"Helvetica\",\n    legend.outside = TRUE,\n    legend.position = c(\"left\", \"top\"),\n    legend.title.size = 1,\n    legend.title.fontface = 2\n  ) +\n  # add North arrow\n  tm_compass(\n    type = \"arrow\",\n    position = c(\"right\", \"bottom\")\n  ) +\n  # add scale bar\n  tm_scale_bar(\n    breaks = c(0, 5, 10, 15, 20),\n    position = c(\"left\", \"bottom\")\n  )\n\n# save as image\ntmap_save(msoa_map, filename = \"data/maps/msoa_theft_map.png\")\n\n\nMap saved to /Users/justinvandijk/Library/CloudStorage/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/maps/msoa_theft_map.png\n\n\nResolution: 2389.765 by 1845.37 pixels\n\n\nSize: 7.965882 by 6.151233 inches (300 dpi)\n\n\n\n\n\n\nNow we have prepared our dataset, we can play with the different settings.\n\nExperiment by changing the colours of the map, changing the legend title name, changing the type of North arrow, etc.\nWe have used a quantile method to classify our data. Do you think that is appropriate? Any other ways you could think of on representing these MSOA crime rates better?\n\n\n\n\n\n\nGit is a version control system, originally developed to help groups of developers work collaboratively on big software projects. One way to think about it is in terms of ‘Track Changes’ used for documents, only this time it is applied to code - and much more powerful. A great resource to help you get started with Git is Happy Git and GitHub for the useR. Highly recommended.\n\n\n\n\nAnd that is how you use R as a GIS in its most basic form. More RGIS in the coming weeks, but this concludes the tutorial for this week."
  },
  {
    "objectID": "05-spatial.html#slides-w05",
    "href": "05-spatial.html#slides-w05",
    "title": "1 Programming for Spatial Analysis",
    "section": "",
    "text": "The slides for this week’s lecture can be downloaded here: [Link]"
  },
  {
    "objectID": "05-spatial.html#reading-w05",
    "href": "05-spatial.html#reading-w05",
    "title": "1 Programming for Spatial Analysis",
    "section": "",
    "text": "Longley, P. et al. 2015. Geographic Information Science & systems, Chapter 13: Spatial Analysis, pp. 290-318. [Link]\nLovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 2: Geographic Data in R. [Link]\nLovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 3: Attribute data operations. [Link]\nLovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 8: Making maps with R. [Link]\n\n\n\n\n\nPoorthuis, A. and Zook, M. 2020. Being smarter about space: Drawing lessons from spatial science. Annals of the American Association of Geographers 110(2): 349-359. [Link]\nDe Smith, M, Goodchild, M. and Longley, P. 2018. Geospatial analsyis. A Comprehensive guide to principles techniques and software tools. Chapter 9: Big Data and geospatial analysis. [Link]\nRadil, S. 2016. Spatial analysis of crime. Chapter 24: The Handbook of Measurement Issues in Criminology and Criminal Justice, pp. 536-554. [Link]"
  },
  {
    "objectID": "05-spatial.html#crime-in-london-iii",
    "href": "05-spatial.html#crime-in-london-iii",
    "title": "1 Programming for Spatial Analysis",
    "section": "",
    "text": "To analyse crime over space, we will go through several steps of data preparation and data linkage to ultimately aggregate our data to the Middle layer Super Output Area (MSOA) level. After this, we will map the crime rate for 2021 using the tmap library.\n\n\n\n\n\n\nOAs, LSOAs and MSOAs make up the different levels of the census statistical geographies. Middle layer Super Output Areas (MSOAs) are made up of groups of LSOAs, usually four or five. They comprise between 2,000 and 6,000 households and have a usually resident population between 5,000 and 15,000 persons. For details see the explanation on the webapge of the Office for National Statistics\n\n\n\n\n\nOpen a new script within your GEOG0030 project and save this script as wk5-crime-spatial-processing.r. At the top of your script, add the following metadata:\n\n\n\nR code\n\n# Analysing theft in London by MSOA\n# Date: January 2024\n# Author: Justin \n\n\nNow let us add all of the libraries we will be using today to the top of our script:\n\n\n\nR code\n\n# load libraries\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(tmap)\n\n\n\n\nYou have already been introduced to the tidyverse library last week, but now we are adding sf to read and load our spatial data as well as tmap to visualise our spatial data. We are going to first load the crime-theft-2021-london.csv we saved last week.\n\n\n\nR code\n\n# read in our csv file\nall_theft_df &lt;- read_csv(\"data/raw/crime/crime-theft-2021-london.csv\")\n\n\nRows: 38229 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): crime_id, month, reported_by, falls_within, location, lsoa_code, ls...\ndbl (2): longitude, latitude\nlgl (1): context\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nBecause some of the crimes do not have a location associated with them, first thing we need to do is filtering these out:\n\n\n\nR code\n\n# filter out crimes that have no location information\nall_theft_df &lt;- filter(all_theft_df, location != \"No Location\")\n\n\nWe can double-check what our csv looks like by either viewing our data or simply calling the head() function on our dataframe:\n\n\n\nR code\n\n# inspect\nhead(all_theft_df)\n\n\n# A tibble: 6 × 12\n  crime_id month repor…¹ falls…² longi…³ latit…⁴ locat…⁵ lsoa_…⁶ lsoa_…⁷ crime…⁸\n  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  \n1 0bac0d3… 2021… City o… City o… -0.0971    51.5 On or … E01000… City o… Theft …\n2 fbd4d10… 2021… City o… City o… -0.104     51.5 On or … E01032… City o… Theft …\n3 07dde5a… 2021… City o… City o… -0.0828    51.5 On or … E01032… City o… Theft …\n4 3be6f81… 2021… City o… City o… -0.0946    51.5 On or … E01032… City o… Theft …\n5 93b8b20… 2021… City o… City o… -0.0796    51.5 On or … E01032… City o… Theft …\n6 608e048… 2021… City o… City o… -0.101     51.5 On or … E01032… City o… Theft …\n# … with 2 more variables: last_outcome_category &lt;chr&gt;, context &lt;lgl&gt;, and\n#   abbreviated variable names ¹​reported_by, ²​falls_within, ³​longitude,\n#   ⁴​latitude, ⁵​location, ⁶​lsoa_code, ⁷​lsoa_name, ⁸​crime_type\n\n\nYou should see these rows display in your console. Great, the dataset looks as we remember. Next, we need a dataset containing the MSOAs for London. Normally, you would navigate to the Open Geography Portal, download a copy of all MSOA polygons, filter out the MSOAs that you need, and add in the 2021 population data. To save us some time today, however, you can download a pre-filtered MSOA file below. Unzip the file and copy the GeoPackage to your data/raw/boundaries folder.\n\n\n\nFile\nType\nLink\n\n\n\n\nMSOAs London 2021\nGeoPackage\nDownload\n\n\n\nNow let’s load the MSOA2021_London.gpkg. We will store this as a variable called msoa_population and use the sf library to load the data:\n\n\n\nR code\n\n# read in our MSOA GeoPackage\nmsoa_population &lt;- st_read(\"data/raw/boundaries/MSOA2021_London.gpkg\")\n\n\nReading layer `MSOA2021_London' from data source \n  `/Users/justinvandijk/Library/CloudStorage/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/raw/boundaries/MSOA2021_London.gpkg' \n  using driver `GPKG'\nSimple feature collection with 1002 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 503574.2 ymin: 155850.8 xmax: 561956.7 ymax: 200933.6\nProjected CRS: OSGB36 / British National Grid\n\n\nYou should also see the msoa_population variable appear in your environment window.\n\n\n\nAs this is the first time we have loaded spatial data into R, let’s go for a little exploration of how we can interact with our spatial dataframe. The first thing we want to do when we load spatial data is, of course, map it to confirm if everything is in order. To do this, we can use a really simple command from R’s base library: plot(). As we do not necessarily want to plot this data everytime we run this script in the future, we can type this command into the console:\n\n\n\nR code\n\n# plot our MSOA data\nplot(msoa_population)\n\n\n\n\n\nYou should see your msoa_population plot appear in your Plots window. As you will see, your MSOA dataset is plotted ‘thematically’ by each of the fields within the dataset, including the pop2021 field.\n\n\n\n\n\n\nThis plot() function is not to be used to make maps but can be used as a quick way of viewing your spatial data.\n\n\n\nWe can find out more information about our msoa_population data. Let’s next check out our class of our data. Again, in the console type:\n\n\n\nR code\n\n# inspect\nclass(msoa_population)\n\n\n[1] \"sf\"         \"data.frame\"\n\n\nWe should see our data is an sf dataframe, which is great because it means we can utilise our tidyverse libraries with our msoa_population. We can also use the attributes() function we looked at last week to find out a little more about the spatial part of our dataframe:\n\n\n\nR code\n\n# inspect\nattributes(msoa_population)\n\n\n$names\n[1] \"msoa21cd\" \"msoa21nm\" \"name\"     \"pop2021\"  \"geom\"    \n\n$row.names\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n [ reached getOption(\"max.print\") -- omitted 902 entries ]\n\n$class\n[1] \"sf\"         \"data.frame\"\n\n$sf_column\n[1] \"geom\"\n\n$agr\nmsoa21cd msoa21nm     name  pop2021 \n    &lt;NA&gt;     &lt;NA&gt;     &lt;NA&gt;     &lt;NA&gt; \nLevels: constant aggregate identity\n\n\nWe can see how many rows we have, the names of our rows and a few more pieces of information about our msoa_population data, for example, we can see that the specific $sf_column i.e. our spatial information) in our dataset is called geom.\nWe can investigate this column a little more by selecting this column within our console to return. In the console type:\n\n\n\nR code\n\n# inspect geometry column\nmsoa_population$geom\n\n\nGeometry set for 1002 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 503574.2 ymin: 155850.8 xmax: 561956.7 ymax: 200933.6\nProjected CRS: OSGB36 / British National Grid\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((534858 165834.9, 534889.1 16550...\n\n\nMULTIPOLYGON (((544600.9 182911.6, 544750.3 182...\n\n\nMULTIPOLYGON (((531567.9 176323.4, 531511.3 176...\n\n\nMULTIPOLYGON (((523236 179252.4, 523253.4 17914...\n\n\nMULTIPOLYGON (((532509.5 184173.5, 532568.3 184...\n\n\nYou should see new information about our geom column display in your console. From this selection we can find out the dataset’s:\n\ngeometry type\ndimension\nbbox (bounding box)\nCRS (coordinate reference system)\ndefinition of the first five geometries of the dataset\n\nThis is really useful as one of the first things we want to know about our spatial data is what coordinate system it is projected with. Just like our lsoa_population dataset, the msoa_population data was created and exported within the British National Grid, therefore seeing this confirmed by the information stored in the geom entry tells us that R has read in our dataset correctly.\nWe can also find out this information, but a bit more detailed, using the st_crs() function from the sf library.\n\n\n\nR code\n\n# inspect CRS\nst_crs(msoa_population)\n\n\nCoordinate Reference System:\n  User input: OSGB36 / British National Grid \n  wkt:\nPROJCRS[\"OSGB36 / British National Grid\",\n    BASEGEOGCRS[\"OSGB36\",\n        DATUM[\"Ordnance Survey of Great Britain 1936\",\n            ELLIPSOID[\"Airy 1830\",6377563.396,299.3249646,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4277]],\n    CONVERSION[\"British National Grid\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",49,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-2,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996012717,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",400000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",-100000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"United Kingdom (UK) - offshore to boundary of UKCS within 49°45'N to 61°N and 9°W to 2°E; onshore Great Britain (England, Wales and Scotland). Isle of Man onshore.\"],\n        BBOX[49.75,-9,61.01,2.01]],\n    ID[\"EPSG\",27700]]\n\n\nYou notice that we actually get a lot more information about our CRS beyond simply the code using this function. This function is really important to us as users of spatial data as it allows us to retrieve and set the CRS of our spatial data when the projection is not specified in the data but we do know what projection system should be used.\nThe final thing we might want to do before we get started with our data analysis is to simply look at the data table part of our dataset, i.e. what we called the Attribute Table in QGIS, but here it is simply the table part of our dataframe. To do so, you can either use the View() function in the console or click on the msoa_population variable within our environment.\n\n\n\nNow we have our data loaded, our next step is to process our data to create what we need as our final output for analysis: a spatial dataframe that contains a theft crime rate for each MSOA. We only two types of spatial or spatially-relevant data in our all_theft_df that can help us with this:\n\nThe approximate WGS84 latitude and longitude.\nThe Lower Super Output Area (LSOA) in which the crime it occurred.\n\nFrom Week 3’s practical, we know we can map our points using the coordinates and then provide a count by using a point-in-polygon operation, but because the crime data already have an LSOA code we will be using an Attribute Join today to show you the use of lookup tables.\n\n\n\n\n\n\nIn situations like this when you actually have the point location data, the best solution is probably to conduct a point-in-polygon analysis yourself rather than relying on a lookup table. However, because we do not always have access to point location data and you are likely to encounter situations where you need a lookup table, there won’t be any point-in-polygon action today.\n\n\n\n\n\nTo get the number of crimes that occurred in each 2021 MSOA linked to our population data, we need to link them together. However, we have two issues. First, our data is available at the LSOA level. Second, and to complicate things further, the all_theft_df dataset is based on 2011 LSOA geographies. This means that we need to take two steps:\n\nUpdate our 2011 LSOA codes to their 2021 counterparts.\nAggregate the resulting 2021 LSOA counts to their parent MSOA.\n\nFrom a GIScience perspective, there are many ways to do this but the most straightforward is to use look-up tables. Look-up tables are an extremely common tool in database management and programming, providing a very simple approach to storing additional information about a feature (such as a row within a dataframe) in a separate table that can quite literally be ‘looked up’ when needed for a specific application.\n\n\n\n\n\n\nThe data.police.uk website suggests that only from June 2023, the 2021 LSOA codes are used by default.\n\n\n\nTo be able to do this, we first need to find a look-up table that contains a list of 2011 LSOAs and their corresponding 2021 LSOAs. Lucky for us the Office for National Statistics provides this for us on their Open Geography Portal. They have a table that contains exactly what we’re looking for: LSOA (2011) to LSOA (2021) to Local Authority District (2022) Lookup for England and Wales (Version 2). As the description on the website tells us:\n\n“This is an exact fit lookup file between Lower layer Super Output Areas as at December 2011 and Lower layer Super Output Areas as at December 2021 and Local Authority Districts as at December 2022 in England and Wales. This product has been provided with a ‘change indicator’ field, that define the lookup between 2011 and 2021 LSOA. This field indicates which super output areas have changed between 2011 and 2021.”\n\nDownload the ONS lookup table. Subsequently, unzip and move this file to your data -&gt; raw -&gt; boundaries folder.\n\n\n\nFile\nType\nLink\n\n\n\n\nONS LSOA 2011 - LSOA 2021 lookup\ncsv\nDownload\n\n\n\nLoad the dataset using the read_csv() function.\n\n\n\nR code\n\n# read the lookup table\nlsoa_lookup &lt;- read_csv(\"data/raw/boundaries/lsoa11_lsoa21.csv\")\n\n\nRows: 35796 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): LSOA11CD, LSOA11NM, LSOA21CD, LSOA21NM, CHGIND, LAD22CD, LAD22NM, L...\ndbl (1): ObjectId\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNow we have our lookup table, we can assign a relevant 2021 LSOA code to each of the 2011 LSOA codes in our all_theft_df dataframe. To do so, we are going to use one of the join() functions from the dplyr library.\n\n\n\n\n\n\nWe have already learnt how to complete Attribute Joins in QGIS via the Joins tab in the Properties window so it should come of no surprise that we can do exactly the same process within R. To conduct a join between two dataframes (spatial or non-spatial, it does not matter), we use the same principles of selecting a unique but matching field within our dataframes to join them together.\nWithin R, you have two options to complete a dataframe join:\n\nThe first is to use the base R library and its merge() function:\n\nBy default the dataframes are merged on the columns with names they both have, but you can also provide the columns to match separate by using the parameters: by.x and by.y.\nYour code would look something like: merge(x, y, by.x = \"xColName\", by.y = \"yColName\"), with x and y each representing a dataframe.\nThe rows in the two dataframes that match on the specified columns are extracted, and joined together.\nIf there is more than one match, all possible matches contribute one row each, but you can also tell merge whether you want all rows, including ones without a match, or just rows that match, with the arguments all.x and all.\n\nThe second option is to use the dplyr library:\n\ndplyr uses SQL database syntax for its join functions.\nThere are four types of joins possible with the dplyr library.\n\ninner_join(): includes all rows that exist both within x and y.\nleft_join(): includes all rows in x.\nright_join(): includes all rows in y.\nfull_join(): includes all rows in x and y.\n\nFiguring out which one you need will be on a case by case basis.\nAgain, if the join columns have the same name, all you need is left_join(x, y).\nIf they do not have the same name, you need a by argument, such as left_join(x, y, by = c(\"xName\" = \"yName\")). Left of the equals is the column for the first dataframe, right of the equals is the name of the column for the second dataframe.\n\n\n\n\n\nAs we have seen from the list of fields above, we know that we have at least two fields that should match across the datasets: our LSOA codes and LSOA names. We of course need to identify the precise fields that contain these values in each of our dataframes, i.e. LSOA11CD and LSOA11NM in our lsoa_lookup dataframe and lsoa_code and lsoa_name in our all_theft_df dataframe, but once we know what fields we can use, we can go ahead and join our two dataframes together. Well often.\n\n\n\n\n\n\nIf you have a one-to-one lookup table, e.g. one LSOA11 geography corresponds to exactly one LSOA21 entry, this process is very easy. However, between the 2011 and 2021 Census different changes have happened: some LSOA11 have been split into multiple LSOA21 polygons and in other cases LSOA11 have been merged together into a single LSOA21 polygon. This means we need to do some extra work to make sure we not accidentally adjust the number of crimes that are captured in the data.\n\n\n\nUnfortunately, the LSOA lookup does not link 2011 LSOAs to 2021 LSOAs on a one-to-one basis. In fact, different types of relationships exists that are flagged in the CHGIND column:\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nU\nNo Change from 2011 to 2021. This means that direct comparisons can be made between these 2011 and 2021 LSOA.\n\n\nS\nSplit. This means that the 2011 LSOA has been split into two or more 2021 LSOA. There will be one record for each of the 2021 LSOA that the 2011 LSOA has been split into. This means direct comparisons can be made between estimates for the single 2011 LSOA and the estimates from the aggregated 2021 LSOA.\n\n\nM\nMerged. 2011 LSOA have been merged with another one or more 2011 LSOA to form a single 2021 LSOA. This means direct comparisons can be made between the aggregated 2011 LSOAs’ estimates and the single 2021 LSOA’s estimates.\n\n\nX\nThe relationship between 2011 and 2021 LSOA is irregular and fragmented. This has occurred where 2011 LSOA have been redesigned because of local authority district boundary changes, or to improve their social homogeneity. These can’t be easily mapped to equivalent 2021 LSOA like the regular splits (S) and merges (M), and therefore like for like comparisons of estimates for 2011 LSOA and 2021 LSOA are not possible.\n\n\n\nAlthough there are different ways of going about this, we will:\n\nDivide the total crimes for 2011 LSOAs that have been split equally across 2021 LSOAs.\nCombine total crimes for LSOAs that have been merged.\nIgnore the suggested 2021 LSOAs for LSOAs for which there has been an irregular or fragmented relationship.\n\n\n\n\nR code\n\n# for unchanged LSOAs keep weightings of individual crimes the same\nlsoa_lookup_same &lt;- lsoa_lookup |&gt;\n    filter(CHGIND == \"U\") |&gt;\n    group_by(LSOA11CD) |&gt;\n    mutate(n = n())\n\n# for merged LSOAs: keep weightings of individual crimes the same\nlsoa_lookup_merge &lt;- lsoa_lookup |&gt;\n    filter(CHGIND == \"M\") |&gt;\n    group_by(LSOA11CD) |&gt;\n    mutate(n = n())\n\n# for split LSOAs: weigh individual crimes proportionally to the number of 2021\n# LSOAs\nlsoa_lookup_split &lt;- lsoa_lookup |&gt;\n    filter(CHGIND == \"S\") |&gt;\n    group_by(LSOA11CD) |&gt;\n    mutate(n = 1/n())\n\n# re-combine the lookup with updated weightings\nlsoa_lookup &lt;- rbind(lsoa_lookup_same, lsoa_lookup_merge, lsoa_lookup_split)\n\n# inspect\nlsoa_lookup\n\n\n# A tibble: 35,786 × 10\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n   &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          1     1\n 2 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          2     1\n 3 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          3     1\n 4 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          4     1\n 5 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          5     1\n 6 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          6     1\n 7 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          7     1\n 8 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          8     1\n 9 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          9     1\n10 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         10     1\n# … with 35,776 more rows, and abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD,\n#   ³​LSOA21NM, ⁴​LAD22NMW, ⁵​ObjectId\n\n\n\n\n\n\n\n\nThe code above uses something called a pipe function: |&gt;. A pipe is used to push the outcome of one function/process into another automatically. It might sound a little confusing at first, but once you start using it, it really can make your code quicker and easier to read and write. Most importantly: it stops us from having to create lots of additional variables to store outputs along the way. There is nothing wrong with not using the pipe and, in fact, sometimes it is better not to use it as we are not able to check the results of function that are called ‘in the middle’ of the piped workflow.\n\n\n\nNow we have adjusted our weightings we can perform our first join. We need to decide which dataset is going to be our target dataset (i.e. the dataset we attach new data too). It makes sense to use the all_theft_df because we need to keep all records in this dataset, but we do not necessarily need all records in the lsoa_lookup dataset for LSOAs for which no crime has been recorded.\n\n\n\nR code\n\n# join to crime data\nall_theft_df_join &lt;- all_theft_df |&gt;\n    left_join(lsoa_lookup, by = c(lsoa_code = \"LSOA11CD\")) |&gt;\n    filter(!is.na(LSOA21CD))\n\n\n\n\n\n\n\n\nBesides joining our LSOA lookup table to our data, we also filter out all crime records that still not have not been assigned a 2021 LSOA code.\n\n\n\nYou should be able to determine that all_theft_df_join contains 20 variables: 12 from all_theft_df, plus 8 from lsoa_lookup. This seems to be fine and the join was succesful. However, if we were to count the number of rows in our original all_theft_df dataframe and compare it to our all_theft_df_join dataframe, we would notice something strange: our number of crimes have increased somehow.\n\n\n\nR code\n\n# number of crimes original dataset\nnrow(all_theft_df)\n\n\n[1] 37015\n\n# number of crimes joint dataset\nnrow(all_theft_df_join)\n\n[1] 46666\n\n\nThe change in number of crimes is caused by our one-to-many relationships: one 2011 LSOA can relate to multiple 2021 LSOAs and therewith this one row of data gets duplicated. Fortunately, we saw this coming and we already adjusted the weightings:\n\n\n\nR code\n\n# number of crimes original dataset\nnrow(all_theft_df)\n\n\n[1] 37015\n\n# number of actual crimes joint dataset\nsum(all_theft_df_join$n)\n\n[1] 37010\n\n\n\nWhereas the number of crimes is very similar, there is still a difference of 5 crimes. This difference is caused by our last filter(), where 2011 LSOAs that have not been assigned a 2021 LSOA code are filtered out. In these cases there is actually a recording error and no valid 2011 LSOA code is used. We therefore choose to ignore these 5 data points.\n\nWe are getting there, we just need to aggregate our LSOAs to their parent MSOA. Download the ONS lookup table. Subsequently, unzip and move this file to your data -&gt; raw -&gt; boundaries folder.\n\n\n\nFile\nType\nLink\n\n\n\n\nONS LSOA 2021 - MSOA 2021 lookup\ncsv\nDownload\n\n\n\n\n\n\nR code\n\n# read the lookup table\nmsoa_lookup &lt;- read_csv(\"data/raw/boundaries/lsoa21_msoa21.csv\")\n\n\nRows: 35675 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): lsoa21cd, msoa21cd\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe can now simply attach the msoa_lookup table to our all_theft_df:\n\n\n\nR code\n\n# join to crime data\nall_theft_df_join &lt;- all_theft_df_join |&gt;\n    left_join(msoa_lookup, by = c(LSOA21CD = \"lsoa21cd\"))\n\n\nNow we have our joined dataset, we can finally move forward with aggregating our data to the MSOA level. Before we do this, it would be good if we could clean up our dataframe to only the relevant data that we need moving forward. To be able to ‘clean’ our dataframe, we have two choices in terms of the code we might want to run. First, we could look to drop certain columns from our dataframe. Alternatively, we could create a subset of the columns we want to keep from our dataframe and store this as a new variable or simply overwrite the currently stored variable. To do either of these types of data transformation, we need to know more about how we can interact with a dataframe in terms of indexing, selecting and slicing.\n\n\n\n\nEverything we will be doing today as we progress with our dataframe cleaning and processing relies on us understanding how to interact with and transform our dataframe. This interaction itself relies on knowing about how indexing works in R as well as how to select and slice your dataframe to extract the relevant cells, rows or columns and then manipulate them. Whilst there are traditional programming approaches to this using the base R library, dplyr is making this type of data wrangling much easier. The following video provides an excellent explanation from both a base R perspective as well as using the dplyr library.\n\n\nThe most basic approach to selecting and slicing within programming relies on the principle of using indexes within our data structures. Indexes actually apply to any type of data structure, from single atomic vectors to complicated dataframes as we use here. Indexing is the numbering associated with each element of a data structure. For example, if we create a simple vector that stores several strings:\n\n\n\nR code\n\n# store a simple vector of strings\nsimple_vector &lt;- c(\"Aa\", \"Bb\", \"Cc\", \"Dd\", \"Ee\", \"Ff\", \"Gg\")\n\n\nR will assign each element (i.e. string) within this simple vector with a number: Aa = 1, Bb = 2, Cc = 3 and so on. Now we can go ahead and select each element by using the base selection syntax which is using square brackets after your element’s variable name, as so:\n\n\n\nR code\n\n# select the first element of our variable\nsimple_vector[1]\n\n\n[1] \"Aa\"\n\n\nWhich should return the first element, our first string containing Aa. You could change the number in the square brackets to any number up to 7 and you would return each specific element in our vector. However, say you do not want the first element of our vector but the second to fifth elements. To achieve this, we conduct what is known in programming as a slicing operation, where, using the [] syntax, we add a colon : to tell R where to start and where to end in creating a selection, known as a slice:\n\n\n\nR code\n\n# select the second to fifth element of our vector\nsimple_vector[2:5]\n\n\n[1] \"Bb\" \"Cc\" \"Dd\" \"Ee\"\n\n\nYou should now see our 2nd to 5th elements returned. Now what is super cool about selection and slicing is that we can add in a simple - (minus) sign to essentially reverse our selection. So for example, we want to return everything but the 3rd element:\n\n\n\nR code\n\n# select everything but the third element of our vector\nsimple_vector[-3]\n\n\n[1] \"Aa\" \"Bb\" \"Dd\" \"Ee\" \"Ff\" \"Gg\"\n\n\nAnd with a slice, we can use the minus to slice out parts of our vector, for example, remove the 2nd to the 5th elements (note the use of a minus sign for both):\n\n\n\nR code\n\n# select outside the second to the fifth element of our vector\nsimple_vector[-2:-5]\n\n\n[1] \"Aa\" \"Ff\" \"Gg\"\n\n\n\n\n\n\n\n\nThis use of square brackets for selection syntax is common across many programming languages, including Python, but there are often some differences you will need to be aware of if you pursue other languages. For example:\n\nPython always starts its index from 0! Whereas we can see here with R, our index starts at 1.\nR is unable to index the characters within strings. This is something you can do in Python, but in R, we will need to use a function such as substring().\n\n\n\n\nWe can also apply these selection techniques to dataframes, but we will have a little more functionality as our dataframes are made from both rows and columns. This means when it comes to selections, we can utilise an amended selection syntax that follows a specific format to select individual rows, columns, slices of each, or just a single cell: [rows, columns]\nThere are many ways we can use this syntax, which we will show below using our lsoa_lookup dataframe. To select a single column from your dataframe, you can use one of two approaches. First we can follow the syntax above carefully and simply set our column parameter in our syntax above to the number 2:\n\n\n\nR code\n\n# select the second column from the dataframe\nlsoa_lookup[, 2]\n\n\n# A tibble: 35,786 × 1\n   LSOA11NM                 \n   &lt;chr&gt;                    \n 1 City of London 001A      \n 2 City of London 001B      \n 3 City of London 001C      \n 4 City of London 001E      \n 5 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C\n10 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nYou should see your second column display in your console. Second, we can actually select our column by only typing in the number (no need for the comma). By default, when there is only one argument present in the selection brackets, R will select the column from the dataframe, not the row:\n\n\n\nR code\n\n# select the second column from the dataframe\nlsoa_lookup[2]\n\n\n# A tibble: 35,786 × 1\n   LSOA11NM                 \n   &lt;chr&gt;                    \n 1 City of London 001A      \n 2 City of London 001B      \n 3 City of London 001C      \n 4 City of London 001E      \n 5 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C\n10 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nTo select a specific row, we need to add in a comma after our number:\n\n\n\nR code\n\n# select the second row from the dataframe\nlsoa_lookup[2, ]\n\n\n# A tibble: 1 × 10\n# Groups:   LSOA11CD [1]\n  LSOA11CD  LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n  &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 E01000002 City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          2     1\n# … with abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD, ³​LSOA21NM, ⁴​LAD22NMW,\n#   ⁵​ObjectId\n\n\nYou should see your second row appear. Now, to select a specific cell in our dataframe, we simply provide both arguments in our selection parameters:\n\n\n\nR code\n\n# select the second column, row from the dataframe\nlsoa_lookup[2, 2]\n\n\n# A tibble: 1 × 1\n  LSOA11NM           \n  &lt;chr&gt;              \n1 City of London 001B\n\n\nWhat is also helpful in R is that we can select our columns by their field names by passing these field names to our selection brackets as a string. For a single column:\n\n\n\nR code\n\n# select the second column from the dataframe\nlsoa_lookup[\"LSOA11NM\"]\n\n\n# A tibble: 35,786 × 1\n   LSOA11NM                 \n   &lt;chr&gt;                    \n 1 City of London 001A      \n 2 City of London 001B      \n 3 City of London 001C      \n 4 City of London 001E      \n 5 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C\n10 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nOr for more than one columns, we can supply a combined vector:\n\n\n\nR code\n\n# select the first, second column from the dataframe\nlsoa_lookup[c(\"LSOA11CD\", \"LSOA11NM\")]\n\n\n# A tibble: 35,786 × 2\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD  LSOA11NM                 \n   &lt;chr&gt;     &lt;chr&gt;                    \n 1 E01000001 City of London 001A      \n 2 E01000002 City of London 001B      \n 3 E01000003 City of London 001C      \n 4 E01000005 City of London 001E      \n 5 E01000006 Barking and Dagenham 016A\n 6 E01000007 Barking and Dagenham 015A\n 7 E01000008 Barking and Dagenham 015B\n 8 E01000009 Barking and Dagenham 016B\n 9 E01000011 Barking and Dagenham 016C\n10 E01000012 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nTo retrieve the second to the fourth column in our dataframe, we can use:\n\n\n\nR code\n\n# select the second to the fourth column from our dataframe\nlsoa_lookup[, 2:4]\n\n\n# A tibble: 35,786 × 3\n   LSOA11NM                  LSOA21CD  LSOA21NM                 \n   &lt;chr&gt;                     &lt;chr&gt;     &lt;chr&gt;                    \n 1 City of London 001A       E01000001 City of London 001A      \n 2 City of London 001B       E01000002 City of London 001B      \n 3 City of London 001C       E01000003 City of London 001C      \n 4 City of London 001E       E01000005 City of London 001E      \n 5 Barking and Dagenham 016A E01000006 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A E01000007 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B E01000008 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B E01000009 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C E01000011 Barking and Dagenham 016C\n10 Barking and Dagenham 015D E01000012 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n# select the second to the fourth column from our dataframe\nlsoa_lookup[2:4]\n\n# A tibble: 35,786 × 3\n   LSOA11NM                  LSOA21CD  LSOA21NM                 \n   &lt;chr&gt;                     &lt;chr&gt;     &lt;chr&gt;                    \n 1 City of London 001A       E01000001 City of London 001A      \n 2 City of London 001B       E01000002 City of London 001B      \n 3 City of London 001C       E01000003 City of London 001C      \n 4 City of London 001E       E01000005 City of London 001E      \n 5 Barking and Dagenham 016A E01000006 Barking and Dagenham 016A\n 6 Barking and Dagenham 015A E01000007 Barking and Dagenham 015A\n 7 Barking and Dagenham 015B E01000008 Barking and Dagenham 015B\n 8 Barking and Dagenham 016B E01000009 Barking and Dagenham 016B\n 9 Barking and Dagenham 016C E01000011 Barking and Dagenham 016C\n10 Barking and Dagenham 015D E01000012 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n\nWe can also provide a combined list of the columns we want to extract:\n\n\n\nR code\n\n# select the second to the seventh columns from our dataframe\nlsoa_lookup[c(2, 3, 4, 7)]\n\n\n# A tibble: 35,786 × 4\n   LSOA11NM                  LSOA21CD  LSOA21NM                  LAD22NM        \n   &lt;chr&gt;                     &lt;chr&gt;     &lt;chr&gt;                     &lt;chr&gt;          \n 1 City of London 001A       E01000001 City of London 001A       City of London \n 2 City of London 001B       E01000002 City of London 001B       City of London \n 3 City of London 001C       E01000003 City of London 001C       City of London \n 4 City of London 001E       E01000005 City of London 001E       City of London \n 5 Barking and Dagenham 016A E01000006 Barking and Dagenham 016A Barking and Da…\n 6 Barking and Dagenham 015A E01000007 Barking and Dagenham 015A Barking and Da…\n 7 Barking and Dagenham 015B E01000008 Barking and Dagenham 015B Barking and Da…\n 8 Barking and Dagenham 016B E01000009 Barking and Dagenham 016B Barking and Da…\n 9 Barking and Dagenham 016C E01000011 Barking and Dagenham 016C Barking and Da…\n10 Barking and Dagenham 015D E01000012 Barking and Dagenham 015D Barking and Da…\n# … with 35,776 more rows\n\n\nWe can apply this slicing approach to our rows:\n\n\n\nR code\n\n# select the second to the fourth row from our dataframe\nlsoa_lookup[2:4, ]\n\n\n# A tibble: 3 × 10\n# Groups:   LSOA11CD [3]\n  LSOA11CD  LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n  &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 E01000002 City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          2     1\n2 E01000003 City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          3     1\n3 E01000005 City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          4     1\n# … with abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD, ³​LSOA21NM, ⁴​LAD22NMW,\n#   ⁵​ObjectId\n\n\nAs well as a negative selection:\n\n\n\nR code\n\n# select outside the second to the fourth row from our dataframe\nlsoa_lookup[-2:-4, ]\n\n\n# A tibble: 35,783 × 10\n# Groups:   LSOA11CD [34,744]\n   LSOA11CD LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n   &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          1     1\n 2 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          5     1\n 3 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          6     1\n 4 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          7     1\n 5 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          8     1\n 6 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          9     1\n 7 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         10     1\n 8 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         11     1\n 9 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         12     1\n10 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         13     1\n# … with 35,773 more rows, and abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD,\n#   ³​LSOA21NM, ⁴​LAD22NMW, ⁵​ObjectId\n\n\n\n\n\nInstead of using the square brackets [] syntax, we can also use dplyr functions that we can use to select or slice our dataframes accordingly:\n\nFor columns, we use the select() function that enables us to select one or more columns using their column names.\nFor rows, we use the slice() function that enables us to select one or more rows using their position (i.e. similar to the process above).\n\nFor both functions, we can also use the negative - approach we saw in the base R approach to ‘reverse a selection’.\n\n\n\nR code\n\n# select column two\ndplyr::select(lsoa_lookup, 2)\n\n\nAdding missing grouping variables: `LSOA11CD`\n\n\n# A tibble: 35,786 × 2\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD  LSOA11NM                 \n   &lt;chr&gt;     &lt;chr&gt;                    \n 1 E01000001 City of London 001A      \n 2 E01000002 City of London 001B      \n 3 E01000003 City of London 001C      \n 4 E01000005 City of London 001E      \n 5 E01000006 Barking and Dagenham 016A\n 6 E01000007 Barking and Dagenham 015A\n 7 E01000008 Barking and Dagenham 015B\n 8 E01000009 Barking and Dagenham 016B\n 9 E01000011 Barking and Dagenham 016C\n10 E01000012 Barking and Dagenham 015D\n# … with 35,776 more rows\n\n# select everything outside column two\ndplyr::select(lsoa_lookup, -2)\n\n# A tibble: 35,786 × 9\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD  LSOA21CD  LSOA21NM     CHGIND LAD22CD LAD22NM LAD22…¹ Objec…²     n\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 E01000001 E01000001 City of Lon… U      E09000… City o… &lt;NA&gt;          1     1\n 2 E01000002 E01000002 City of Lon… U      E09000… City o… &lt;NA&gt;          2     1\n 3 E01000003 E01000003 City of Lon… U      E09000… City o… &lt;NA&gt;          3     1\n 4 E01000005 E01000005 City of Lon… U      E09000… City o… &lt;NA&gt;          4     1\n 5 E01000006 E01000006 Barking and… U      E09000… Barkin… &lt;NA&gt;          5     1\n 6 E01000007 E01000007 Barking and… U      E09000… Barkin… &lt;NA&gt;          6     1\n 7 E01000008 E01000008 Barking and… U      E09000… Barkin… &lt;NA&gt;          7     1\n 8 E01000009 E01000009 Barking and… U      E09000… Barkin… &lt;NA&gt;          8     1\n 9 E01000011 E01000011 Barking and… U      E09000… Barkin… &lt;NA&gt;          9     1\n10 E01000012 E01000012 Barking and… U      E09000… Barkin… &lt;NA&gt;         10     1\n# … with 35,776 more rows, and abbreviated variable names ¹​LAD22NMW, ²​ObjectId\n\n# select the LSOA11CD column\ndplyr::select(lsoa_lookup, LSOA11CD)\n\n# A tibble: 35,786 × 1\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD \n   &lt;chr&gt;    \n 1 E01000001\n 2 E01000002\n 3 E01000003\n 4 E01000005\n 5 E01000006\n 6 E01000007\n 7 E01000008\n 8 E01000009\n 9 E01000011\n10 E01000012\n# … with 35,776 more rows\n\n# select everything outside the LSOA11CD\ndplyr::select(lsoa_lookup, -LSOA11CD)\n\nAdding missing grouping variables: `LSOA11CD`\n\n\n# A tibble: 35,786 × 10\n# Groups:   LSOA11CD [34,747]\n   LSOA11CD LSOA1…¹ LSOA2…² LSOA2…³ CHGIND LAD22CD LAD22NM LAD22…⁴ Objec…⁵     n\n   &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          1     1\n 2 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          2     1\n 3 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          3     1\n 4 E010000… City o… E01000… City o… U      E09000… City o… &lt;NA&gt;          4     1\n 5 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          5     1\n 6 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          6     1\n 7 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          7     1\n 8 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          8     1\n 9 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;          9     1\n10 E010000… Barkin… E01000… Barkin… U      E09000… Barkin… &lt;NA&gt;         10     1\n# … with 35,776 more rows, and abbreviated variable names ¹​LSOA11NM, ²​LSOA21CD,\n#   ³​LSOA21NM, ⁴​LAD22NMW, ⁵​ObjectId\n\n\nIn addition to these index-based functions, within dplyr, we also have filter() that enables us to easily filter rows within our dataframe based on specific conditions. In addition, dplyr provides lots of functions that we can use directly with these selections to apply certain data wrangling processes to only specific parts of our dataframe, such as mutate() or count().\n\n\n\n\n\n\nWe will be using quite a few of these functions in the remaining data wrangling section below - plus throughout our module, so it is highly recommend to download the dplyr cheat sheet to keep track of what functions we are using and why!\n\n\n\nAs we have seen above, whilst there are two approaches to selection using either base R library or the dplyr library, we will continue to focus on using functions directly from the dplyr library to ensure efficiently and compatibility within our code. Within dplyr, as you also saw, whether we want to keep or drop columns, we always use the same function: select().\nTo use this function, we provide our function with a single or list of the columns we want to keep or if we want to drop them, we use the same approach, but add a - before our selection. Let’s see how we can extract just the relevant columns we will need for our future analysis. Note that we will overwrite our all_theft_df_join variable.\nIn your script, add the following code to extract only the relevant columns we need for our future analysis:\n\n\n\nR code\n\n# reduce our dataframe using the select function\nall_theft_df_join &lt;- dplyr::select(all_theft_df_join, crime_id, LSOA21CD, msoa21cd,\n    n)\n\n\nYou should now see that your all_theft_df_join dataframe should only contain four variables. You can go and view this dataframe or call the head() function on the data in the console if youlike to check out this new formatting.\n\n\n\n\nTo aggregate our crime by MSOA, we need to use a combination of dplyr functions. First, we need to group our crime by each 2021 MSOA and then create a new variable that contains the sum of thefts occurring in each MSOA. To do so, we will use the group_by() function and the mutate() function. This is the same group_by() function we already used to adjust the LSOA weightings. The group_by() function creates a ‘grouped’ copy of the table (in memory), then any dplyr function used on this grouped table will manipulate each group separately (i.e. our weighted crime counts) and then combine the results to a single output:\n\n\n\nR code\n\nall_theft_df_join &lt;- all_theft_df_join |&gt;\n    group_by(msoa21cd) |&gt;\n    mutate(msoa_theft = sum(n)) |&gt;\n    ungroup()\n\n\nInspect the dataframe using the View() function. You will notice that many values in the msoa_theft column are the same: this makes sense becuase they relate to the same MSOA. This also means that we probably should just keep only keep distinct values:\n\n\n\nR code\n\nall_theft_df_msoa &lt;- all_theft_df_join |&gt;\n    distinct(msoa21cd, msoa_theft)\n\n\nWrite out the completed theft table to a new csv file for future reference:\n\n\n\nR code\n\n# save as csv\nwrite_csv(all_theft_df_msoa, \"data/data/MSOA2021_theft.csv\")\n\n\n\n\n\nWe are now getting to the final stages of our data processing, we just need to join our completed theft table, all_theft_df_msoa to our msoa_population spatial dataframe and then compute a theft crime rate. This will then allow us to map our crime rates by MSOA, exactly what we set to achieve within this practical.\n\n\n\nR code\n\n# join theft to the MSOA popoulation dataset\ntheft_msoa_sdf &lt;- msoa_population |&gt;\n    left_join(all_theft_df_msoa, by = c(msoa21cd = \"msoa21cd\"))\n\n\nTo double-check our join, we want to do one extra step of quality checks and check that each of our MSOAs has at least one occurrence of crime over the twelve month period. We do this by computing a new column that totals the number of thefts. By identifying any MSOAs that have zero entries (NA), we can double-check with our original all_theft_df_msoa to see if this is the correct data for that MSOA or if there has been an error in our join. What we will need to do is adjust the values present within these MSOAs prior to our visualisation analysis: these should not have NA as their value but rather 0.\n\n\n\nR code\n\n# replace all NAs in our dataframe with 0\ntheft_msoa_sdf[is.na(theft_msoa_sdf)] = 0\n\n\nThe final step we need to take before we can map our theft data is, of course, compute a crime rate. We have our pop2021 column within our theft_msoa_sdf dataframe - we just need to figure out the code that allows us to apply our calculation that we’ve used in our previous practicals (i.e. using the Attribute/Field Calculator in QGIS: value/pop2019 * 10000) to each of our datasets.\n\n\n\nR code\n\n# calculate crime rate\ntheft_msoa_sdf &lt;- theft_msoa_sdf |&gt;\n    mutate(crime_rate = (msoa_theft/as.numeric(pop2021)) * 10000)\n\n\nHave a look at your new theft_msoa_sdf spatial dataframe. Does it look as you would expect? Now we have our final dataframe, we can go ahead and make our maps.\n\n\n\nFor making our maps, we will be using one of two main visualisation libraries that can be used for spatial data: tmap. tmap is a library written around thematic map visualisation. The package offers a flexible, layer-based, and easy to use approach to create thematic maps, such as choropleths and bubble maps. What is really great about tmap is that it comes with one quick plotting method for a map called: qtm().\nWe can use this function to plot the theft crime rate really quickly. Within your script, use the qtm function to create a map of theft crime rate in London in 2021.\n\n\n\n\n\n\nBefore continuing do confirm whether your theft_msoa_sdf is indeed still of class sf. In some instances it is possible that this changed when manipulating the attributes. You can simply check this by running class(theft_msoa_sdf). If your dataframe is not of class sf, you can force it into one by running theft_msoa_sdf &lt;- st_as_sf(theft_msoa_sdf)).\n\n\n\n\n\n\nR code\n\n# quick thematic map\nqtm(theft_msoa_sdf, fill = \"crime_rate\")\n\n\n\n\n\nFigure 1: Quick thematic map.\n\n\n\n\nIn this case, the fill() argument is how we tell tmap to create a choropleth map based on the values in the column we provide it with. If we simply set it to NULL, we would only draw the borders of our polygons. Within our qtm function, we can pass quite a few different parameters that would enable us to change specific aesthetics of our map - if you go ahead and look up the documentation for the function, you will see a list of these parameters. We can, for example, set the lines of our MSOA polygons to white by adding the borders parameter:\n\n\n\nR code\n\n# quick thematic map\nqtm(theft_msoa_sdf, fill = \"crime_rate\", borders = \"white\")\n\n\n\n\n\nFigure 2: Quick thematic map with white borders.\n\n\n\n\nThe map does not really look great. We can continue to add and change parameters in our qtm() function to create a map we are satisfied with. However, the issue with the qtm() function is that it is quite limited in its functionality and mostly used to quickly inspect your data. Instead, when we want to develop more complex maps using the tmap library, we want to use their main plotting method which uses a function called tm_shape(), which we build on using the layered grammar of graphics approach.\n\n\n\n\n\n\nWhen it comes to setting colours within a map or any graphic, we can either pass through a colour as a word, a HEX code or a pre-defined palette. You can find out more here, which is a great quick reference to just some of the possible colours and palettes you will be able to use in R.\n\n\n\nThe main approach to creating maps in tmap is to use the grammar of graphics to build up a map based on what is called the tm_shape() function. Essentially this function, when populated with a spatial dataframe, takes the spatial information of our data (including the projection and geometry of our data) and creates a spatial “object”. This object contains some information about our original spatial dataframe that we can override (such as the projection) within this function’s parameters, but ultimately, by using this function, you are instructing R that this is the object from which to “draw my shape”.\nTo actually draw the shape, we next need to add a layer to specify the type of shape we want R to draw from this information - in our case, our polygon data. We need to add a function therefore that tells R to “draw my spatial object as X” and within this “layer”, you can also specific additional information to tell R how to draw your layer. You can then add in additional layers, including other spatial objects (and their related shapes) that you want drawn on your map, plus a specify your layout options through a layout layer.\nLet’s see how we can build up our first map in tmap.\n\n\n\nR code\n\n# shape, polygons\ntm_shape(theft_msoa_sdf) + tm_polygons()\n\n\n\n\n\nFigure 3: Building up a map layer by layer.\n\n\n\n\nAs you should now see, we have now mapped the spatial polygons of our theft_msoa_sdf spatial dataframe. However, this is not the map we want: we want to have our polygons represented by a choropleth map where the colours reflect the theft crime rate, rather than the default grey polygons we see before us. To do so, we use the col= parameter that is within our tm_polygons() shape.\n\n\n\n\n\n\nThe col parameter within tm_polygons() is used to fill our polygons with a specific fill type, of either:\n\na single color value (e.g. red)\nthe name of a data variable that is contained in the spatial data file Either the data variable contains color values, or values (numeric or categorical) that will be depicted by a specific color palette.\n\n\n\n\nLet’s go ahead and pass our crime_rate column within the col() parameter and see what we get:\n\n\n\nR code\n\n# shape, polygons\ntm_shape(theft_msoa_sdf) +\n  # specify column\n  tm_polygons(col = \"crime_rate\")\n\n\n\n\n\nFigure 4: Building up a map layer by layer.\n\n\n\n\nWe are slowly getting there. But there are two things we can notice straight away that do not look right about our data. The first is that our classification breaks do not really reflect the variation in our dataset. This is because tmap has defaulted to its default break type: pretty breaks, whereas, as we know, using an approach such as natural breaks, aka jenks, may reveal better variation in our data.\nUsing the documentation for tm_polygons(), it looks like the following parameters are relevant to help us create the right classification for our map:\n\nn: state the number of classification breaks you want.\nstyle: state the style of breaks you want, e.g. fixed, sd, equal, quantile.\nbreaks: state the numeric breaks you want to use when using the fixed style approach.\n\nLet’s say we want to change our choropleth map to have five classes, determined via the quantile method. We simply need to add the n and style parameters into our tm_polygons() layer:\n\n\n\nR code\n\n# shape, polygons\ntm_shape(theft_msoa_sdf) +\n  # specify column, classes\n  tm_polygons(col = \"crime_rate\", n = 5, style = \"quantile\")\n\n\n\n\n\nFigure 5: Building up a map layer by layer.\n\n\n\n\nWe now have a choropleth that reflects better the distribution of our data, but we can make them a little prettier by rounding the values. To do so, we can change the style of the map to fixed and then supply a new argument for breaks that contains the rounded classification breaks:\n\n\n\nR code\n\n# shape, polygons\ntm_shape(theft_msoa_sdf) +\n  # specify column, classes, breaks\n  tm_polygons(col = \"crime_rate\", n = 5, style = \"fixed\", breaks = c(0, 5, 10, 15, 50, 5000))\n\n\n\n\n\nFigure 6: Building up a map layer by layer.\n\n\n\n\nThat looks a little better from the classification side of things.\n\n\n\nTo style our map takes a further understanding and familiarity with our tmap library, but it is only something you will only really learn by having to make your own maps. As a result, we will not go into explaining exactly every aspect of map styling but instead provide you with some example code that you can use as well as experiment with to try to see how you can adjust aspects of the map to your preferences.\nFundamentally, the key functions to be aware of:\n\ntm_layout(): contains parameters to style titles, fonts, the legend;\ntm_compass(): contains parameters to create and style a North arrow or compass;\ntm_scale_bar(): contains parameters to create and style a scale bar.\n\nTo be able to start styling our map, we need to interrogate each of these functions and their parameters to trial and error options to ultimately create a map we are happy with:\n\n\n\nR code\n\n# shape, polygon\ntm_shape(theft_msoa_sdf) +\n  # specify column, classes, breaks, borders, legend title\n  tm_polygons(\n    col = \"crime_rate\", n = 5, style = \"fixed\",\n    breaks = c(0, 5, 10, 15, 50, 5000),\n    palette = \"Blues\",\n    title = \"Rate per 10,000 people\"\n  ) +\n  # add title\n  tm_layout(\n    main.title = \"Theft - 2021\",\n    main.title.fontface = 2,\n    fontfamily = \"Helvetica\",\n    legend.outside = TRUE,\n    legend.position = c(\"left\", \"top\"),\n    legend.title.size = 1,\n    legend.title.fontface = 2\n  ) +\n  # add North arrow\n  tm_compass(\n    type = \"arrow\",\n    position = c(\"right\", \"bottom\")\n  ) +\n  # add scale bar\n  tm_scale_bar(\n    breaks = c(0, 5, 10, 15, 20),\n    position = c(\"left\", \"bottom\")\n  )\n\n\n\n\n\nFigure 7: Building up a map layer by layer.\n\n\n\n\n\n\n\nOnce we are finished making our map, we can go ahead and export it to our maps folder. To do so, we need to save our map-making code to as a variable and then use the tmap_save() function to save the output of this code to a picture within our maps folder.\n\n\n\nR code\n\n# shape, polygons, specify column, specify classes, specify breaks, map elements\nmsoa_map &lt;-\n  # shape, polygon\n  tm_shape(theft_msoa_sdf) +\n  # specify column, classes, breaks, borders, legend title\n  tm_polygons(\n    col = \"crime_rate\", n = 5, style = \"fixed\",\n    breaks = c(0, 5, 10, 15, 50, 5000),\n    palette = \"Blues\",\n    title = \"Rate per 10,000 people\"\n  ) +\n  # add title\n  tm_layout(\n    main.title = \"Theft - 2021\",\n    main.title.fontface = 2,\n    fontfamily = \"Helvetica\",\n    legend.outside = TRUE,\n    legend.position = c(\"left\", \"top\"),\n    legend.title.size = 1,\n    legend.title.fontface = 2\n  ) +\n  # add North arrow\n  tm_compass(\n    type = \"arrow\",\n    position = c(\"right\", \"bottom\")\n  ) +\n  # add scale bar\n  tm_scale_bar(\n    breaks = c(0, 5, 10, 15, 20),\n    position = c(\"left\", \"bottom\")\n  )\n\n# save as image\ntmap_save(msoa_map, filename = \"data/maps/msoa_theft_map.png\")\n\n\nMap saved to /Users/justinvandijk/Library/CloudStorage/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/maps/msoa_theft_map.png\n\n\nResolution: 2389.765 by 1845.37 pixels\n\n\nSize: 7.965882 by 6.151233 inches (300 dpi)"
  },
  {
    "objectID": "05-spatial.html#assignment-w05",
    "href": "05-spatial.html#assignment-w05",
    "title": "1 Programming for Spatial Analysis",
    "section": "",
    "text": "Now we have prepared our dataset, we can play with the different settings.\n\nExperiment by changing the colours of the map, changing the legend title name, changing the type of North arrow, etc.\nWe have used a quantile method to classify our data. Do you think that is appropriate? Any other ways you could think of on representing these MSOA crime rates better?"
  },
  {
    "objectID": "05-spatial.html#wm-w05",
    "href": "05-spatial.html#wm-w05",
    "title": "1 Programming for Spatial Analysis",
    "section": "",
    "text": "Git is a version control system, originally developed to help groups of developers work collaboratively on big software projects. One way to think about it is in terms of ‘Track Changes’ used for documents, only this time it is applied to code - and much more powerful. A great resource to help you get started with Git is Happy Git and GitHub for the useR. Highly recommended."
  },
  {
    "objectID": "05-spatial.html#byl-w05",
    "href": "05-spatial.html#byl-w05",
    "title": "1 Programming for Spatial Analysis",
    "section": "",
    "text": "And that is how you use R as a GIS in its most basic form. More RGIS in the coming weeks, but this concludes the tutorial for this week."
  },
  {
    "objectID": "04-statistics.html",
    "href": "04-statistics.html",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "This week’s content introduces you to the foundational concepts associated with Programming for Data Analysis. We will cover some general principles of programming as well how we can use R and RStudio effectively for data analysis by continuing to look at crime in London.\n\n\nThe slides for this week’s lecture can be downloaded here: [Link]\n\n\n\n\n\n\nHadley, W. 2017. R for Data Science. Chapter 3: Workflow: basics. [Link]\nHadley, W. 2017. R for Data Science. Chapter 4: Data transformation. [Link]\nHadley, W. 2017. R for Data Science. Chapter 7: Workflow: scripts and projects. [Link]\nLovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 1: Introduction. [Link]\n\n\n\n\n\nArribas-Bel, D. et al. 2021. Open data products - A framework for creating valuable analysis ready data. Journal of Geographical Systems 23: 497-514. [Link]\n\n\n\n\n\nProgramming is our most fundamental way of interacting with a computer, it was how computers were first built and operated and for a long time, the Command Line Interface (CLI) was our primary way of using computers before our Graphical User Interface (GUI) Operating Systems (OS) and software became mainstream. Nowadays, the majority of us use our computers through clicking instead of typing. However, programming and computer code underpin every single application that we use on our computers.\nProgramming is used for endless purposes and applications, ranging from software engineering and application development, to creating websites and managing databases at substantial scales. To help with this diversity of applications, multiple types of programming languages have developed. Wikipedia, for example, has a list of hundreds of different languages, although there is some overlap between many of these, some are used for incredibly niche activities, and some are not used any more at all.\n\n\n\nWe will be using R and RStudio in this module as the main tool to complete specific tasks we need to do for our data analysis. There are a lot of alternative tools out there that you can use to achieve the same outcomes (as you have seen with QGIS, and no doubt had experience of using some statistics/spreadsheet software) but we choose to use this tool because it provides us with many advantages over these other tools.\nWhat is important to understand is that R and RStudio are two different things:\n\nR is our programming language, which we need to understand in terms of general principles, syntax and structure.\nRStudio is our Integrated Development Environment (IDE), which we need to understand in terms of functionality and workflow. An IDE is simply a complicated way of saying “a place where I write and build scripts and execute my code”.\n\nAs you may know already, R is a free and open-source programming language, that originally was created to focus on statistical analysis. In conjunction with the development of R as a language, the same community created the RStudio IDE to execute this statistical programming. Together, R and RStudio have grown into an incredibly success partnership of analytical programming language and analysis software. As a result, it has a huge and active contributor community which constantly adds functionality to the language and software, making it an incredibly useful tool for many purposes and applications beyond statistical analysis.\nUnlike traditional statistical analysis programmes you may have used such as Microsoft Excel or even ArcGIS Online, within the RStudio IDE, the user has to type commands to get it to execute tasks such as loading in a dataset or performing a calculation. We primarily do this by building up a script, that provides a record of what you have done, whilst also enabling the straightforward repetition of tasks.\nWe can also use the R Console to execute simple instructions that do not need repeating such as installing libraries or quickly viewing data. In addition, R, its various graphic-oriented “packages” and RStudio are capable of making graphs, charts and maps through just a few lines of code which can then be easily modified and tweaked by making slight changes to the script if mistakes are spotted. Unfortunately, command-line computing can also be off-putting at first. It is easy to make mistakes that are not always obvious to detect and thus debug. Nevertheless, there are good reasons to stick with R and RStudio. These include:\n\nIt is broadly intuitive with a strong focus on publishable-quality graphics.\nIt is ‘intelligent’ and offers in-built good practice; it tends to stick to statistical conventions and present data in sensible ways.\nIt is free, cross-platform, customisable and extendable with a whole swathe of packages/libraries (‘add ons’) including those for discrete choice, multilevel and longitudinal regression, mapping, spatial statistics, spatial regression, and geostatistics.\nIt is well respected and used at the world’s largest technology companies (including Google, Microsoft and Facebook, and at hundreds of other companies).\nIt offers a transferable skill that shows to potential employers experience both of statistics and of computing.\n\nThe intention of the practical elements of this week is to provide a thorough introduction to RStudio to get you started:\n\nThe basic programming principles behind R.\nLoading in data from csv files, filtering and subsetting it into smaller chunks and joining them together.\nCalculating a number of statistics for data exploration and checking.\nCreating basic and more complex plots in order to visualise the distributions values within a dataset.\n\nWhat you should remember is that R has a steep learning curve, but the benefits of using it are well worth the effort. The best way to really learn R is to take the basic code provided in tutorials and experiment with changing parameters such as the colour of points in a graph to really get ‘under the hood’ of the software.\n\n\nYou should all have access to some form of R on your personal computer, or through Desktop@UCL Anywhere or the RStudio Server. If not, please refer to the Geocomputation: An Introduction section. Go ahead and open RStudio and we will first take a quick tour of the various components of the RStudio environment interface and how and when to use them. When you first open RStudio, it should look a little something like this:\n\n\n\n\n\nFigure 1: RStudio on RStudio Server. [Enlarge image]\n\n\n\n\nThe main windows (panel/pane) to keep focused on for now are:\n\nConsole: where we write “one-off” code, such as installing libraries/packages, as well as running quick views or plots of our data.\nFiles: where our files are stored on our computer system, also helpful for general file management.\nEnvironment: where our variables are recorded; we can find out a lot about our variables by looking at the environment window, including data structure, data type(s) and the fields and ‘attributes’ of our variables.\nPlots: where the outputs of our graphs, charts and maps are shown\nHelp: where you can search for help, e.g. by typing in a function to find out its parameters.\n\nYou may also have your Script Window open, which is where we build up and write code, to a) keep a record of our work, b) enable us to repeat and re-run code again, often with different parameters. We will not use this window until we get to the final practical instructions.\nWe will see how we use these windows as we progress through this tutorial and understand in more detail what we mean by words such as ‘attributes’ (do not get confused here with the Attribute Table for QGIS) and data structures.\n\n\n\n\nWe will first start off with using RStudio’s console to test out some of R’s in-built functionality by creating a few variables as well as a dummy dataset that we will be able to analyse.\n\n\n\n\n\n\nYou might need to click on the console window to get it to expand; you can then drag it to take up a larger space in your RStudio window.\n\n\n\nIn your console, let us go ahead and conduct some quick maths. At their most basic, all programming languages can be used like calculators.\n\n\n\n\n\n\nIn your RStudio console, you should see a prompt sign &gt; on the left hand side. This is where we can directly interact with R. Anything that appears as red in the command line means it is an error (or a warning) so you will likely need to correct your code. If you just see a &gt; it means you can type in your next line, whilst a + means that you have not finished the previous line of code. As will become clear, + signs often appear if you do not close brackets or you did not properly finish your command in a way that R expected.\n\n\n\n\n\nType in 10 * 12 into the console.\n\n\n\nR code\n\n# conduct some maths\n10 * 12\n\n\n[1] 120\n\n\nOnce you press return, you should see the answer of 120 returned below.\n\n\n\nRather than use ‘raw’ or ‘standalone’ numbers and values, we primarily want to use variables that store these values (or groups of them) under a memorable name for easy reference later. In R terminology this is called creating an object and this object becomes stored as a variable. The &lt;- symbol is used to assign the value to the variable name you have given. Let us create two variables for experimenting with.\nType in ten &lt;- 10 into the console and execute.\n\n\n\nR code\n\n# store a variable\nten &lt;- 10\n\n\nYou have just created your first variable. You will see nothing is returned in the console, but if you check your environment window it has now appeared as a new variable that contains the associated value.\nType in twelve &lt;- 12 into the console and execute.\n\n\n\nR code\n\n# store a variable\ntwelve &lt;- 12\n\n\nOnce again, you will see nothing returned to the console but do check your environment window for your variable. We have now stored two numbers into our environment and given them variable names for easy reference. R stores these objects as variables in your computer’s memory so they can be processed quickly. Without saving your environment (we will come onto this below), these variables would be lost if you close R. Now we have our variables, we can go ahead and execute the same simple multiplication:\nType in ten * twelve into the console and execute.\n\n\n\nR code\n\n# using variables\nten * twelve\n\n\n[1] 120\n\n\nYou should see the output in the console of 120. Whilst this maths may look trivial, it is, in fact, extremely powerful as it shows how these variables can be treated in the same way as the values they contain.\nNext, type in ten * twelve * 8 into the console and execute.\n\n\n\nR code\n\n# using variables and values\nten * twelve * 8\n\n\n[1] 960\n\n\nYou should get an answer of 960. As you can see, we can mix variables with raw values without any problems. We can also store the output of variable calculations as a new variable.\nType output &lt;- ten * twelve * 8 into the console and execute.\n\n\n\nR code\n\n# store output\noutput &lt;- ten * twelve * 8\n\n\nBecause we are storing the output of our maths to a new variable, the answer is not returned to the screen.\n\n\n\nWe can ask our computer to return this output by simply typing it into the console. You should see we get the same value as the earlier equation.\n\n\n\nR code\n\n# return value\noutput\n\n\n[1] 960\n\n\n\n\n\nWe can also store variables of different data types, not just numbers but text as well.\nType in str_variable &lt;- \"This is our 1st string variable\" into the console and execute.\n\n\n\nR code\n\n# store a variable\nstr_variable &lt;- \"This is our 1st string variable\"\n\n\nWe have just stored our sentence made from a combination of characters, including letters and numbers. A variable that stores “words” (that may be sentences, or codes, or file names), is known as a string. A string is always denoted by the use of quotation marks (\"\" or ''). Type in str_variable into the console and execute.\n\n\n\nR code\n\n# return variable\nstr_variable\n\n\n[1] \"This is our 1st string variable\"\n\n\nYou should see our entire sentence returned,enclosed in quotation marks (\"\"). Again, by simply entering our variable into the console, we have asked R to return our variable to us.\n\n\n\nWe can also call a function on our variable. This use of call is a very specific programming term and generally what you use to say ‘use’ a function. What it simply means is that we will use a specific function to do something to our variable. For example, we can also ask R to print our variable, which will give us the same output as accessing it directly via the console.\nType in print(str_variable) into the console and execute.\n\n\n\nR code\n\n# printing a variable\nprint(str_variable)\n\n\n[1] \"This is our 1st string variable\"\n\n\nWe have just used our first function: print(). This function actively finds the variable and then returns this to our screen.\nYou can type ?print into the console to find out more about the print() function.\n\n\n\nR code\n\n# open documentation of the print function\n?print\n\n\nThis can be used with any function to get access to their documentation which is essential to know how to use the function correctly and understand its output.\n\n\n\n\n\n\nIn many cases, a function will take more than one argument or parameter, so it is important to know what you need to provide the function with in order for it to work. For now, we are using functions that only need one required argument although most functions will also have several optional or default parameters.\n\n\n\n\n\n\nWhen a function provides an output, such as this, it is known as returning. Not all functions will return an output to your screen, so often we require a print() statement or another type of returning function to check whether the function was successful or not. More on this later.\n\n\n\nWithin the base R language, there are various functions that have been written to help us examine and find out information about our variables. For example, we can use the typeof() function to check what data type our variable is.\nType in typeof(str_variable) into the console and execute.\n\n\n\nR code\n\n# call the typeof() function\ntypeof(str_variable)\n\n\n[1] \"character\"\n\n\nYou should see the answer: character. As evident, our str_variable is a character data type. We can try testing this out on one of our earlier variables too.\nType in typeof(ten) into the console and execute.\n\n\n\nR code\n\n# call the typeof() function\ntypeof(ten)\n\n\n[1] \"double\"\n\n\nYou should see the answer: double. As evident, our ten is a double data type. For high-level objects that involve (more complicated) data structures, such as when we load a csv into R as a dataframe, we are also able to check what class our object is. Type in class(str_variable) into the console and execute.\n\n\n\nR code\n\n# call the class() function\nclass(str_variable)\n\n\n[1] \"character\"\n\n\nIn this case, you will get the same answer because in R both its class and type are the same: a character. In other programming languages, you might have had string returned instead, but this effectively means the same thing.\nType in class(ten) into the console and execute.\n\n\n\nR code\n\n# call the class() function\nclass(ten)\n\n\n[1] \"numeric\"\n\n\nIn this case, you will get a different answer because the class of this variable is numeric. This is because the class of numeric objects can contain either doubles (decimals) or integers (whole numbers). We can test this by asking whether our ten variable is an integer or not.\nType in is.integer(ten) into the console and execute.\n\n\n\nR code\n\nis.integer(ten)\n\n\n[1] FALSE\n\n\nYou should see we get the answer FALSE: as we know from our earlier typeof() function our variable ten is stored as a double and therefore cannot be an integer.\n\n\n\n\n\n\nWhilst knowing how to distinguish between different data types might not seem important now, the difference of a double versus an integer can quite easily lead to unexpected errors.\n\n\n\nWe can also ask how long our variable is. in this case, we will find out how many different sets of characters (strings) are stored in our variable, str_variable.\nType in length(str_variable) into the console and execute.\n\n\n\nR code\n\n# call the length() function\nlength(str_variable)\n\n\n[1] 1\n\n\nYou should get the answer 1 because we only have one set of characters. We can also ask how long each set of characters is within our variable, i.e. ask how long the string contained by our variable is. Type in nchar(str_variable) into the console and execute.\n\n\n\nR code\n\n# call the nchar() function\nnchar(str_variable)\n\n\n[1] 31\n\n\nYou should get an answer of 31.\n\n\n\nLet us go ahead and test these two ‘length’ functions a little further by creating a new variable to store two string sets within our object, i.e. our variable will hold two elements.\nType in two_str_variable &lt;- c(\"This is our second variable\", \"It has two parts to it\") into the console and execute.\n\n\n\nR code\n\n# store a new variable\ntwo_str_variable &lt;- c(\"This is our second string variable\", \"It has two parts to it\")\n\n\nIn this piece of code, we have created a new variable using the c() function in R, that stands for combine values into a vector or list. We have provided that function with two sets of strings, using a comma to separate our two strings - all contained within the function’s brackets (()). You should now see a new variable in your environment window which tells us it is a) chr: characters, b) contains two items, and c) lists those items. Let us now try both our length() and nchar() on our new variable and see what the results are.\n\n\n\nR code\n\n# call the length() function\nlength(two_str_variable)\n\n\n[1] 2\n\n# call the nchar() function\nnchar(two_str_variable)\n\n[1] 34 22\n\n\nYou should notice that the length() function now returned a 2 and the nchar() function returned two values of 34 and 22.\nThere is one final function that we often want to use with our variables when we are first exploring them, which is attributes(). Because our current variables are very simple, they do not have any attributes but it is a really useful function, which we will come across later on.\n\n\n\nR code\n\n# call the attributes() function\nattributes(two_str_variable)\n\n\nNULL\n\n\n\n\n\n\n\n\nIn addition to make notes about the functions you are coming across in the workshop, you should notice that with each line of code in the examples, an additional comment is used to explain what the code does. Comments are denoted using the hash symbol #. This comments out that particular line so that R ignores it when the code is run. These comments will help you in future when you return to scripts a week or so after writing the code as well as help others understand what is going on when sharing your code. It is good practice to get into writing comments as you code and not leave it to do retrospectively. Whilst we are using the console, using comments is not necessary but as we start to build up a script later on, you will find them essential to help understand your workflow in the future.\n\n\n\n\n\n\n\nThe objects we created and played with above are very simple but the real power of R comes when we can begin to execute functions on more complex objects. R accepts four main types of data structures: vectors, matrices, dataframes, and lists. These data structures are essential because they allow us to apply common statistical functions. We are going to explore these data structures with some of dummy data on the total number of pages and publication dates of the various editions of Geographic Information Systems and Science (GISS) book by Longley et al. and use these for a brief analysis:\n\n\n\nBook Edition\nYear of Publication\nTotal Number of Pages\n\n\n\n\n1st\n2001\n454\n\n\n2nd\n2005\n517\n\n\n3rd\n2011\n560\n\n\n4th\n2015\n477\n\n\n\n\n\nFirst, let us clear up our workspace and remove our current variables. Type rm(ten, twelve, output, str_variable, two_str_variable) into the console and execute.\n\n\n\nR code\n\n# clear our workspace\nrm(ten, twelve, output, str_variable, two_str_variable)\n\n\nYou should now see we no longer have any variables in our window. We just used the rm() function to remove these variables from our environment and free up some RAM. Keeping a clear workspace is another recommendation of good practice moving forward. Of course, we do not want to get rid of any variables we might need to use later but removing any variables we no longer need (such as test variables) will help you understand and manage your code and your working environment.\n\n\n\nThe first complex data object we will create is a vector. A vector is the most common and basic data structure in R. Vectors are a collection of elements that are mostly of either character, logical integer or numeric data types. Technically, vectors can be one of two types:\n\nAtomic vectors (all elements are of the same data type)\nLists (elements can be of different data types)\n\nAlthough in practice the term ‘vector’ most commonly refers to the atomic types and not to lists. Let us create our first official ’complex; vector, detailing the different total page numbers for GISS.\nType gisspage_no &lt;- c(454, 517, 560, 477) into the console and execute.\n\n\n\nR code\n\n# store the page numbers as a variable\ngiss_page_no &lt;- c(454, 517, 560, 477)\n\n\nType print(giss_page_no) into the console and execute to check the results.\n\n\n\nR code\n\n# print our giss_page_no variable\nprint(giss_page_no)\n\n\n[1] 454 517 560 477\n\n\nWe can see we have our total number of pages collected together in a single vector. We could if we want, execute some statistical functions on our vector object.\n\n\n\nR code\n\n# calculate the arithmetic mean on our variable\nmean(giss_page_no)\n\n\n[1] 502\n\n# calculate the median on our variable\nmedian(giss_page_no)\n\n[1] 497\n\n# calculate the range numbers of our variable\nrange(giss_page_no)\n\n[1] 454 560\n\n\nWe have now completed our first set of descriptive statistics in R. Let us see how we can build on our vector object by adding in a second vector object that details the relevant years of our book. Note that the total number of pages are entered in a specific order to correspond to these publishing dates (i.e. chronological) and therefore we will need to enter the publication year in the same order.\nType giss_year &lt;- c(2001, 2005, 2011, 2015) into the console and execute.\n\n\n\nR code\n\n# store the publication years as a variable\ngiss_year &lt;- c(2001, 2005, 2011, 2015)\n\n\nType print(giss_year) into the console and execute.\n\n\n\nR code\n\nprint(giss_year)\n\n\n[1] 2001 2005 2011 2015\n\n\nOf course, on their own, the two vectors do not mean much but we can use the same c() function that we used earlier to combine the two together to create a matrix.\n\n\n\nIn R, a matrix is simply an extension of the numeric or character vectors. They are not a separate type of object per se but simply a vector that has two dimensions. That is they contain both rows and columns. As with atomic vectors, the elements of a matrix must be of the same data type. As both our page numbers and our years are numeric, we can add them together to create a matrix using the matrix() function.\nType giss_year_nos &lt;- matrix(c(giss_year, giss_page_no), ncol=2) into the console and execute.\n\n\n\nR code\n\n# create a new matrix from our two vectors with two columns\ngiss_year_nos &lt;- matrix(c(giss_year, giss_page_no), ncol = 2)\n\n\nType print(giss_year_nos) into the console and execute to check the result.\n\n\n\nR code\n\n# inspect\nprint(giss_year_nos)\n\n\n     [,1] [,2]\n[1,] 2001  454\n[2,] 2005  517\n[3,] 2011  560\n[4,] 2015  477\n\n\nThe thing about matrices is that, for us, they do not have a huge amount of use. If we were to look at this matrix in isolation from what we know it represents, we would not really know what to do with it. As a result, we tend to primarily use dataframes in R as they offer the opportunity to add field names to our columns to help with their interpretation.\n\n\n\n\n\n\nThe function we just used above, matrix(), was the first function that we used that took more than one argument. In this case, the arguments the matrix needed to run were:\n\nWhat data or dataset should be stored in the matrix.\nHow many columns (ncol=) do we need to store our data in.\n\nFor any function, there will be mandatory arguments (i.e. it will not run without these) or optional arguments (i.e. it will run without these, as the default to this argument has been set usually to FALSE, 0 or NULL). These are normally documented in the documentation, including details on the format the function expects these arguments to be in.\nUnderstanding how to find out what object and data type a variable is essential therefore to knowing whether it can be used within a function or whether we will need to transform our variable into a different data structure to be used for that specific function.\n\n\n\n\n\n\nA dataframe is an extremely important data type in R. It is pretty much the de-facto data structure for most tabular data and the data structure we use for statistics. It also is the underlying structure to the table data (what we would call the attribute table in Q-GIS) that we associate with spatial data, more on this next week.\nA dataframe is a special type of list where every element of the list will have the same length (i.e. dataframe is a ‘rectangular’ list), Essentially, a dataframe is constructed from columns (which represent a list) and rows (which represents a corresponding element on each list). Each column will have the same amount of entries - even if, for that row, for example, the entry is simply NULL.\ndataframes can have additional attributes such as rownames(), which can be useful for annotating data, like subject_id or sample_id or UID. In statistics, they are often not used but in spatial analysis, these IDs can be essential to join data together. Some additional information on dataframes:\n\nThey are usually created by read.csv() and read.table(), i.e. when importing the data into R.\nYou can also create a new dataframe with data.frame() function, e.g. a matrix can be converted to a dataframe.\nYou can find out the number of rows and columns with nrow() and ncol(), respectively.\nRownames are often automatically generated and look likeX1, X2, … , Xn. Consistency in numbering of rownames may not be honoured when rows are reshuffled or subset.\n\nType giss_df &lt;- data.frame(giss_year_nos) into the console and execute.\n\n\n\nR code\n\n# create a new dataframe from our matrix\ngiss_df &lt;- data.frame(giss_year_nos)\n\n\nWe now have a dataframe, we can use the View() function in R. Still in your console, type: View(giss_df)\n\n\n\nR code\n\n# view our dataframe\nView(giss_df)\n\n\nYou should now see a table pop-up as a new tab on your script window. It is now starting to look like the table we are trying to create, but we need to do something about the fieldnames. X1 and X2 are not very informative.\n\n\n\nWe can rename our dataframe column field names by using the names() function. Before we do this, have a read of what the names() function does. Still in your console, type: ?names\n\n\n\nR code\n\n# open documentation of the names function\n?names\n\n\nAs you can see, the function will get or set the names of an object, with renaming occurring by using the following syntax: names(x) &lt;- value\nThe value itself needs to be a character vector of up to the same length as x, or NULL. We have two columns in our dataframe, so we need to parse our names() function with a character vector with two elements. In the console, we shall enter two lines of code, one after another. First our character vector with our new names, new_names &lt;- c(\"year\", \"page_nos\"), and then the names() function containing this vector for renaming, names(giss_df) &lt;- new_names:\n\n\n\nR code\n\n# create a vector with our new column names\nnew_names &lt;- c(\"year\", \"page_nos\")\n\n# rename our columns with our next names\nnames(giss_df) &lt;- new_names\n\n\nYou can go and check your dataframe again and see the new names using either View() function or by clicking on the tab at the top.\n\n\n\nWe are still missing one final column from our dataframe: our edition of the textbook column. As this is a character data type, we would not have been able to add this directly to our matrix. This is because dataframes can take different data types, unlike matrices - so let us go ahead and add the edition as a new column.\nTo do so, we follow a similar process of creating a vector with our editions listed in chronological order, but then add this to our dataframe by storing this vector as a new column in our dataframe. We use the $ sign with our code that gives us “access” to the dataframe’s column - we then specify the column edition, which whilst it does not exist at the moment, will be created from our code that assigns our edition variable to this column.\nType and execute edition &lt;- c(\"1st\", \"2nd\", \"3rd\", \"4th\"). Then store this vector as a new column in our dataframe under the column name edition by typing and executing giss_df$edition &lt;- edition:\n\n\n\nR code\n\n# create a vector witheditions\nedition &lt;- c(\"1st\", \"2nd\", \"3rd\", \"4th\")\n\n# add this vector as a new column to our dataframe\ngiss_df$edition &lt;- edition\n\n\nAgain, you can go and check your dataframe and see the new column using either View() function or by clicking on the tab at the top or by typing giss_df in your console window.\n\n\n\nR code\n\n# inspect\ngiss_df\n\n\n  year page_nos edition\n1 2001      454     1st\n2 2005      517     2nd\n3 2011      560     3rd\n4 2015      477     4th\n\n\nNow we have our dataframe, let us find out a little about it. We can first return the dimensions (the size) of our dataframe by using the dim() function. In your console, type dim(giss_df) and execute.\n\n\n\nR code\n\n# check our dataframe dimensions\ndim(giss_df)\n\n\n[1] 4 3\n\n\nWe can see we have four rows and three columns. We can also finally use our attributes() function to get the attributes of our dataframe. In your console, type attributes(giss_df) and execute:\n\n\n\nR code\n\n# check our dataframe attributes\nattributes(giss_df)\n\n\n$names\n[1] \"year\"     \"page_nos\" \"edition\" \n\n$row.names\n[1] 1 2 3 4\n\n$class\n[1] \"data.frame\"\n\n\n\n\n\n\n\n\n\nR is case-sensitive so you need to make sure that you capitalise everything correctly if required.\nThe spaces between the words do not matter but the positions of the commas and brackets do. Remember, if you find the prompt, &gt;, is replaced with a + it is because the command is incomplete. If necessary, hit the escape (esc) key and try again.\nIt is important to come up with good names for your objects. In the case of the majority of our variables, we used an underscore (_) to separate the words. It is good practice to keep the object names as short as possible but they still need to be easy to read and clear what they are referring to. Be aware: you cannot start an object name with a number!\nIf you press the up arrow in the console you will be able to edit the previous lines of code you have inputted.\n\n\n\n\n\n\n\n\nDuring Week 1’s computer tutorial, we already installed several R libraries. One of these libraries was called the tidyverse. The tidyverse is a collection of packages that are specifically designed for data wrangling, management, cleaning, analysis and visualisation within RStudio. Whilst in many cases different packages work all slightly differently, all packages of the tidyverse share the underlying design philosophy, grammar, and data structures.\nThe tidyverse itself is treated and loaded as a single package, but this means if you load the tidyverse package within your script (through library(tidyverse)), you will directly have access to all the functions that are part of each of the packages that are within the overall tidyverse. This means you do not have to load each package separately. For more information have a look at www.tidyverse.org.\nThere are some specific functions in the tidyverse suite of packages that will help us cleaning and preparing our datasets now and in the future, which is one of the main reasons for using this library. Some of the most important and useful functions, from the tidyr and dplyr packages, are:\n\n\n\n\n\n\n\n\nPackage\nFunction\nUse to\n\n\n\n\ndplyr\nselect()\nselect columns\n\n\ndplyr\nfilter()\nselect rows\n\n\ndplyr\nmutate()\ntransform or recode variables\n\n\ndplyr\nsummarise()\nsummarise data\n\n\ndplyr\ngroup_by()\ngroup data into subgroups for further processing\n\n\ntidyr\npivot_longer()\nconvert data from wide format to long format\n\n\ntidyr\npivot_wider()\nconvert long format dataset to wide format\n\n\n\nThese functions all complete very fundamental tasks that we need to manipulate and wrangle our data.\n\n\n\n\n\n\nThe code you just ran asked R to load all functions of the tidyverse. However: these functions are only available for the duration of your R sessions. When you restart your R session, you will have to load these functions again if you want to use them. Another thing to be aware of when it comes to using functions in these additional libraries, is that sometimes these functions share a name with a function form one of the base R packages. For instance, there exists a select() function within in the stats package that conducts linear filtering on a time series. However, after we load the tidyverse package and we would type select() this function will select columns from a dataframe. We therefore sometimes need to specify which library we want to use this function from, and this can be done with a simple command (library::function) in our code: stats::select to filter that time series and dplyr::select to select columns in a dataframe.\n\n\n\n\n\nIn the previous section, R may have seemed fairly labour-intensive. We had to enter all our data manually and each line of code had to be written into the command line. Fortunately this is not routinely the case. In RStudio, we can use scripts to build up our code that we can run repeatedly and save for future use. Before we start a new script, we first want to set up ourselves ready for the rest of our practicals by creating a new project.\nTo put it succinctly, projects in RStudio keep all the files associated with a project together: input data, R scripts, analytical results, figures, etc. This means we can easily keep track of all data, input and output, whilst still creating standalone scripts for each bit of processing analysis we do. It also makes dealing with directories and paths a whole lot easier; particularly if you have followed the folder structure that was advised at the start of the module.\nClick on File -&gt; New Project -&gt; Existing Directory and browse to your GEOG0030 folder. Click on Create Project. You should now see your main window switch to this new project and if you check your Files window, you should now see a new R Project called GEOG0030.\n\n\n\n\n\n\nPlease ensure that folder names and file names do not contain spaces or special characters such as * . \" / \\ [ ] : ; | = , &lt; ? &gt; & $ # ! ' { } ( ). Different operating systems and programming languages deal differently with spaces and special characters and as such including these in your folder names and file names can cause many problems and unexpected errors. As an alternative to using white space you can use an underscore _ or hyphen - if you like.\n\n\n\n\n\n\nFor the majority of our analysis work, we will type our code within a script and not the console. Let us create our first script. Click on File -&gt; New File -&gt; R Script. This should give you a blank document that looks a bit like the command line. The difference is that anything you type here can be saved as a script and re-run at a later date.\n\n\n\n\n\nFigure 2: Creating a new script in RStudio. [Enlarge image]\n\n\n\n\nSave your script as: wk4-csv-processing.r. Through our name, we know now that our script was created in Week 4 of Geocomputation and the code it will contain is something to do with csv processing. This will help us a lot in the future when we come to find code that we need for other projects.\nThe first bit of code you will want to add to any script is to add a title. This title should give any reader a quick understanding of what your code achieves. When writing a script it is important to keep notes about what each step is doing. To do this, the hash (#) symbol is put before any code. This comments out that particular line so that R ignores it when the script is run.\nLet us go ahead and give our script a title and include some metadata:\n\n\n\nR code\n\n# Analysing theft in London by month\n# Date: January 2024\n# Author: Justin \n\n\nNow we have our title, the second bit of code we want to include in our script is to load our libraries (i.e. the installed packages we want to use in our script):\n\n\n\nR code\n\n# load libraries\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nBy loading simply the tidyverse we gain access to several useful functions. However, when developing a script you will realise that you may need to load more libraries as you go along. When you do this, always add your library to the top of your script. If you ever share your script, it helps the person you are sharing with to recognise quickly if they need to install any additional packages prior to running the code It also means your libraries do not get lost in the multiple lines of code you are writing.\n\n\n\nThere are two main ways to run a script in RStudio: all at once or by line/chunk. It can be advantageous to pursue with the second option as you first start out to build your script as it allows you to test your code interactively.\n\n\n\nBy clicking: select the line or chunk of code you want to run, then click on Code and choose Run selected lines.\nBy key commands: select the line or chunk of code you want to run and then hold Ctl or Cmd and press Return.\n\n\n\n\n\nBy clicking: select Run on the top-right of the scripting window and choose Run All.\nBy key commands: hold Option plus Ctl or Cmd and R.\n\n\n\n\nIf you are running a script that seems to be stuck (for whatever reason) or you notice some of your code is wrong, you will need to interrupt R. To do so, click on Session -&gt; Interrupt R. If this does not work, you may end up needing to terminate R but this will loose any unsaved progress.\n\n\n\n\nWhere last week we provided you with a crime dataset, this week you will download and prepare the dataset yourselves.\n\nStart by navigating to data.police.uk. And click on Downloads.\nUnder the data range select January 2021 to December 2021.\nUnder the Custom download tab select Metropolitan Police Service and City of London Police. Leave all other settings and click on Generate file.\n\n\n\n\n\n\nFigure 3: Downloading London’s crime data. [Enlarge image]\n\n\n\n\n\nIt may take a few minutes for the download to be generated, so be patient. Once the Download now button appears, you can download the 2021 crime dataset.\nOnce downloaded, unzip the file. You will notice that the zip file contains 12 individual folders, one for each month in 2021. Each folder contains two files: one containing the data for the Metropolitan Police Service and one for the City of London Police.\nCreate a new folder named all-crime in your data/raw/crime directory and copy all 12 folders containing our data to this new folder.\n\n\n\n\n\n\nFigure 4: Your data folder should now look something like this.. [Enlarge image]\n\n\n\n\n\n\nWe are now ready to get started with using the crime data csv's currently sat in our all-crime folder. To do so, we need to first figure out how to import the csv and understand the data structure it will be in after importing. To read in a csv into R requires the use of a very simple function from the tidyverse library: read_csv().\nWe can look at the help documentation to understand what we need to provide the function (or rather the optional arguments), but as we just want to load single csv, we will go ahead and just use the function with a simple parameter.\n\n\n\nR code\n\n# read in a single csv from our crime data\ncrime_csv &lt;- read_csv(\"data/raw/crime/all-crime/2021-01/2021-01-metropolitan-street.csv\")\n\n\nRows: 84848 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Crime ID, Month, Reported by, Falls within, Location, LSOA code, LS...\ndbl (2): Longitude, Latitude\nlgl (1): Context\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nIf using a Windows machine, you will need to substitute your forward-slashes (/) with two backslashes (\\\\) whenever you are dealing with file paths.\n\n\n\nWe can explore the csv we have just loaded as our new crime_csv variable and understand the class, attributes and dimensions of our variable.\n\n\n\nR code\n\n# inspect class\nclass(crime_csv)\n\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n# inspect dimensions\ndim(crime_csv)\n\n[1] 84848    12\n\n\nWe have found out our variable is a dataframe, containing 84,848 rows and 12 columns. We however do not want just the single csv and instead what to combine all our csv's in our all-crime folder into a single dataframe. How do we do this?\nThis will be the most complicated section of code you will come across today, and we will use some functions that you have not seen before. Copy the following code below into your script, then execute.\n\n\n\nR code\n\n# create a list of all csv files in the crime folder\nall_crime_df &lt;- list.files(path = \"data/raw/crime/all-crime/\", full.names = TRUE, recursive = TRUE) |&gt;\n  # apply the read_csv() function on each of these files\n  lapply(read_csv) |&gt;\n  # combine ('bind') them all together into one\n  bind_rows()\n\n\nThis might take a little time to process (or might not), as we have a lot of data to get through. You should see a new dataframe appear in your global environment called all_crime_df, for which we now have 1,079,267 observations!\n\n\n\n\n\n\nIt is a little difficult to explain the code above without going into too much detail and at this stage you are not expected to fully understand what is happening here, but essentially what the code does is:\n\nList all the files found in the data path: data/raw/crime/all-crime/\nRead each of these as a csv by “applying” the read_csv() function to all files.\nBinding all rows of all individual dataframes together in a single dataframe.\n\nThese three different actions are combined by using something called a pipe (|&gt;), which we will explain in a bit more detail next week.\n\n\n\n\n\n\nWe can now have a look at our large dataframe in more detail.\n\n\n\nR code\n\n# full inspection of the dataframe\nncol(all_crime_df)\n\n\n[1] 12\n\nnrow(all_crime_df)\n\n[1] 1079267\n\nhead(all_crime_df)\n\n# A tibble: 6 × 12\n  Crime …¹ Month Repor…² Falls…³ Longi…⁴ Latit…⁵ Locat…⁶ LSOA …⁷ LSOA …⁸ Crime…⁹\n  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  \n1 &lt;NA&gt;     2021… City o… City o… -0.0976    51.5 On or … E01000… City o… Anti-s…\n2 &lt;NA&gt;     2021… City o… City o… -0.0986    51.5 On or … E01000… City o… Anti-s…\n3 455f0a5… 2021… City o… City o… -0.0973    51.5 On or … E01000… City o… Other …\n4 19f0605… 2021… City o… City o… -0.0986    51.5 On or … E01000… City o… Other …\n5 c1554ce… 2021… City o… City o… -0.0976    51.5 On or … E01000… City o… Shopli…\n6 fe0819e… 2021… City o… City o… -0.0976    51.5 On or … E01000… City o… Shopli…\n# … with 2 more variables: `Last outcome category` &lt;chr&gt;, Context &lt;lgl&gt;, and\n#   abbreviated variable names ¹​`Crime ID`, ²​`Reported by`, ³​`Falls within`,\n#   ⁴​Longitude, ⁵​Latitude, ⁶​Location, ⁷​`LSOA code`, ⁸​`LSOA name`, ⁹​`Crime type`\n\n\nYou should now see with have the same number of columns as our previous single csv, but with many more rows. You can also see that the head() function provides us with the first five rows of our dataframe. You can conversely use tail() to provide the last five rows.\nFor now in our analysis, we only want to extract the theft crime in our dataframe, so we need to filter our data based on the Crime type column. However, as we can see, we have a space in our field name for Crime type and, in fact, many of the other fields. As we want to avoid having spaces in our field names when coding, we need to rename our fields. Rename the field names, just as we did with our GIS table earlier:\n\n\n\nR code\n\n# create a new vector containing updated no space / no capital field names\nno_space_names &lt;- c(\"crime_id\", \"month\", \"reported_by\", \"falls_within\", \"longitude\",\n    \"latitude\", \"location\", \"lsoa_code\", \"lsoa_name\", \"crime_type\", \"last_outcome_category\",\n    \"context\")\n\n# rename our df field names using these new names\nnames(all_crime_df) &lt;- no_space_names\n\n\nWe now have our dataframe ready for filtering. To do so, we will use the filter() function from the dplyr package:\n\n\n\nR code\n\n# filter all_crime_df to contain only theft\nall_theft_df &lt;- dplyr::filter(all_crime_df, crime_type == \"Theft from the person\")\n\n\n\n\n\n\n\n\nIf two functions from different packages have the same name, R default to use the function from the package that got loaded last. To avoid confusion, however, it can be a good idea at times to specify the library from which a function should be taken. In this case, we can make it clear that we want to use filter() from the dplyr package instead of the default stats library.\n\n\n\nYou should now see the new variable appear in your environment with 38,229 observations. Now save the dataframe as a csv file.\n\n\n\nR code\n\n# save all_crime_df as csv\nwrite_csv(all_theft_df, \"data/raw/crime/crime-theft-2021-london.csv\")\n\n\n\n\n\n\n\n\nRemember that if using a Windows machine, you might need to substitute your forward-slashes (/) with two backslashes (\\\\) whenever you are dealing with file paths!\n\n\n\nWe now want to do some further housekeeping and create on final dataframe that will allow us to analyse crime in London by month. To do so, we want to count how many thefts occur each month in London. Fortunately, dplyr has another function that will do this for us, known simply as count().\nWhen you go ahead and search the documentation to understand the count() function, you will see that there is only one function called count() at the moment, i.e. the one in the dplyr library, so we do not need to use the additional syntax we used above. Let us go ahead and count the number of thefts in London by month:\n\n\n\nR code\n\n# count in the all_theft_df the number of crimes by month\nmonth_theft_df &lt;- count(all_theft_df, month)\n\n\nWe have stored the output of our count() function to a new dataframe: month_theft_df. Go ahead and look at the dataframe to see the output: it is a very simple table containing simply the month and n, i.e. the number of thefts occurring per month. We can and should go ahead and rename this column to help with our interpretation of the dataframe. We will use a quick approach to do this, that uses selection of the precise column to rename only the second column:\n\n\n\nR code\n\n# rename the second column of our new dataframe to crime_totals\nnames(month_theft_df)[2] &lt;- \"crime_totals\"\n\n\nThis selection is made through the [2] element of code added after the names() function we have used earlier. We will look more at selection, slicing and indexing in next week’s tutorial.\n\n\n\n\n\nNow we have prepared our dataset, we can conduct some analysis:\n\nWhat was the average number of crimes per month in London in 2021?\nWhat was the median number of crimes per month in London in 2021?\nWhat were the minimum and maximum values of crime in London in 2021?\nBesides descriptive statistics, it would be really useful to generate a simple chart. Use the documentation of the barplot() function to create the barplot below:\n\n\n\n\n\n\n\n\n\n\n\n\nDo not forget to save your script so you can go back to it at a later time. When you close R and are asked if you want to save your workspace: this is not per se necessary. Saving the workspace will keep any variables generated during your current session saved and available in a future session, but so will re-running your script.\n\n\n\n\n\n\n\n\nThe barplot we have made above is very basic, and there are better ways to make nice visualisations. For this we can turn to other R packages that have been developed. In fact, there are many hundreds of packages in R each designed for a specific purpose, some of which you can use to create plots in R. One of those packages is called ggplot2. The ggplot2 package is an implementation of the Grammar of Graphics (Wilkinson 2005): a general scheme for data visualisation that breaks up graphs into semantic components such as scales and layers. ggplot2 can serve as a replacement for the base graphics in R and contains a number of default options that match good visualisation practice. You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details. An excellent introduction to ggplot2 can be found in the online, freely available book R for Data Science; written by Hadley Wickham, core developer of ggplot2 and the tidyverse. Have a particularly close look at Chapter 2: Data vizualisation.\n\n\n\nThe book Data Skills for Reproducible Research provides an excellent overview of skills needed for reproducible and open research using the statistical programming language R and tidyverse packages. To get started: have a look at Chapter 2: Reproducible Workflows, Chapter 7: Data Wrangling, and Chapter 8: Iterations and Functions.\nAnother great tool is found in the targets package. The targets package is a Make-like pipeline tool for Statistics and data science in R. With targets, you can maintain a reproducible workflow without repeating yourself. To get started: have a look at the Walkthrough chapter to see targets in action.\n\n\n\n\nWe have managed to take a dataset of over one million records and clean and filter it to create a barplot on theft crime in London. Of course, there is a lot more research and exploratory data analysis that can be done, but this first chart is certainly a step in the right direction. Next week, we will be doing a lot more with our dataset, including a lot more data wrangling and an introduction to using spatial data, but hopefully this week has shown you want you can achieve with just a few lines of code. That concludes the tutorial for this week!"
  },
  {
    "objectID": "04-statistics.html#slides-w04",
    "href": "04-statistics.html#slides-w04",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "The slides for this week’s lecture can be downloaded here: [Link]"
  },
  {
    "objectID": "04-statistics.html#reading-w04",
    "href": "04-statistics.html#reading-w04",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "Hadley, W. 2017. R for Data Science. Chapter 3: Workflow: basics. [Link]\nHadley, W. 2017. R for Data Science. Chapter 4: Data transformation. [Link]\nHadley, W. 2017. R for Data Science. Chapter 7: Workflow: scripts and projects. [Link]\nLovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 1: Introduction. [Link]\n\n\n\n\n\nArribas-Bel, D. et al. 2021. Open data products - A framework for creating valuable analysis ready data. Journal of Geographical Systems 23: 497-514. [Link]"
  },
  {
    "objectID": "04-statistics.html#programming",
    "href": "04-statistics.html#programming",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "Programming is our most fundamental way of interacting with a computer, it was how computers were first built and operated and for a long time, the Command Line Interface (CLI) was our primary way of using computers before our Graphical User Interface (GUI) Operating Systems (OS) and software became mainstream. Nowadays, the majority of us use our computers through clicking instead of typing. However, programming and computer code underpin every single application that we use on our computers.\nProgramming is used for endless purposes and applications, ranging from software engineering and application development, to creating websites and managing databases at substantial scales. To help with this diversity of applications, multiple types of programming languages have developed. Wikipedia, for example, has a list of hundreds of different languages, although there is some overlap between many of these, some are used for incredibly niche activities, and some are not used any more at all."
  },
  {
    "objectID": "04-statistics.html#programming-in-r",
    "href": "04-statistics.html#programming-in-r",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "We will be using R and RStudio in this module as the main tool to complete specific tasks we need to do for our data analysis. There are a lot of alternative tools out there that you can use to achieve the same outcomes (as you have seen with QGIS, and no doubt had experience of using some statistics/spreadsheet software) but we choose to use this tool because it provides us with many advantages over these other tools.\nWhat is important to understand is that R and RStudio are two different things:\n\nR is our programming language, which we need to understand in terms of general principles, syntax and structure.\nRStudio is our Integrated Development Environment (IDE), which we need to understand in terms of functionality and workflow. An IDE is simply a complicated way of saying “a place where I write and build scripts and execute my code”.\n\nAs you may know already, R is a free and open-source programming language, that originally was created to focus on statistical analysis. In conjunction with the development of R as a language, the same community created the RStudio IDE to execute this statistical programming. Together, R and RStudio have grown into an incredibly success partnership of analytical programming language and analysis software. As a result, it has a huge and active contributor community which constantly adds functionality to the language and software, making it an incredibly useful tool for many purposes and applications beyond statistical analysis.\nUnlike traditional statistical analysis programmes you may have used such as Microsoft Excel or even ArcGIS Online, within the RStudio IDE, the user has to type commands to get it to execute tasks such as loading in a dataset or performing a calculation. We primarily do this by building up a script, that provides a record of what you have done, whilst also enabling the straightforward repetition of tasks.\nWe can also use the R Console to execute simple instructions that do not need repeating such as installing libraries or quickly viewing data. In addition, R, its various graphic-oriented “packages” and RStudio are capable of making graphs, charts and maps through just a few lines of code which can then be easily modified and tweaked by making slight changes to the script if mistakes are spotted. Unfortunately, command-line computing can also be off-putting at first. It is easy to make mistakes that are not always obvious to detect and thus debug. Nevertheless, there are good reasons to stick with R and RStudio. These include:\n\nIt is broadly intuitive with a strong focus on publishable-quality graphics.\nIt is ‘intelligent’ and offers in-built good practice; it tends to stick to statistical conventions and present data in sensible ways.\nIt is free, cross-platform, customisable and extendable with a whole swathe of packages/libraries (‘add ons’) including those for discrete choice, multilevel and longitudinal regression, mapping, spatial statistics, spatial regression, and geostatistics.\nIt is well respected and used at the world’s largest technology companies (including Google, Microsoft and Facebook, and at hundreds of other companies).\nIt offers a transferable skill that shows to potential employers experience both of statistics and of computing.\n\nThe intention of the practical elements of this week is to provide a thorough introduction to RStudio to get you started:\n\nThe basic programming principles behind R.\nLoading in data from csv files, filtering and subsetting it into smaller chunks and joining them together.\nCalculating a number of statistics for data exploration and checking.\nCreating basic and more complex plots in order to visualise the distributions values within a dataset.\n\nWhat you should remember is that R has a steep learning curve, but the benefits of using it are well worth the effort. The best way to really learn R is to take the basic code provided in tutorials and experiment with changing parameters such as the colour of points in a graph to really get ‘under the hood’ of the software.\n\n\nYou should all have access to some form of R on your personal computer, or through Desktop@UCL Anywhere or the RStudio Server. If not, please refer to the Geocomputation: An Introduction section. Go ahead and open RStudio and we will first take a quick tour of the various components of the RStudio environment interface and how and when to use them. When you first open RStudio, it should look a little something like this:\n\n\n\n\n\nFigure 1: RStudio on RStudio Server. [Enlarge image]\n\n\n\n\nThe main windows (panel/pane) to keep focused on for now are:\n\nConsole: where we write “one-off” code, such as installing libraries/packages, as well as running quick views or plots of our data.\nFiles: where our files are stored on our computer system, also helpful for general file management.\nEnvironment: where our variables are recorded; we can find out a lot about our variables by looking at the environment window, including data structure, data type(s) and the fields and ‘attributes’ of our variables.\nPlots: where the outputs of our graphs, charts and maps are shown\nHelp: where you can search for help, e.g. by typing in a function to find out its parameters.\n\nYou may also have your Script Window open, which is where we build up and write code, to a) keep a record of our work, b) enable us to repeat and re-run code again, often with different parameters. We will not use this window until we get to the final practical instructions.\nWe will see how we use these windows as we progress through this tutorial and understand in more detail what we mean by words such as ‘attributes’ (do not get confused here with the Attribute Table for QGIS) and data structures."
  },
  {
    "objectID": "04-statistics.html#rstudio-console",
    "href": "04-statistics.html#rstudio-console",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "We will first start off with using RStudio’s console to test out some of R’s in-built functionality by creating a few variables as well as a dummy dataset that we will be able to analyse.\n\n\n\n\n\n\nYou might need to click on the console window to get it to expand; you can then drag it to take up a larger space in your RStudio window.\n\n\n\nIn your console, let us go ahead and conduct some quick maths. At their most basic, all programming languages can be used like calculators.\n\n\n\n\n\n\nIn your RStudio console, you should see a prompt sign &gt; on the left hand side. This is where we can directly interact with R. Anything that appears as red in the command line means it is an error (or a warning) so you will likely need to correct your code. If you just see a &gt; it means you can type in your next line, whilst a + means that you have not finished the previous line of code. As will become clear, + signs often appear if you do not close brackets or you did not properly finish your command in a way that R expected.\n\n\n\n\n\nType in 10 * 12 into the console.\n\n\n\nR code\n\n# conduct some maths\n10 * 12\n\n\n[1] 120\n\n\nOnce you press return, you should see the answer of 120 returned below.\n\n\n\nRather than use ‘raw’ or ‘standalone’ numbers and values, we primarily want to use variables that store these values (or groups of them) under a memorable name for easy reference later. In R terminology this is called creating an object and this object becomes stored as a variable. The &lt;- symbol is used to assign the value to the variable name you have given. Let us create two variables for experimenting with.\nType in ten &lt;- 10 into the console and execute.\n\n\n\nR code\n\n# store a variable\nten &lt;- 10\n\n\nYou have just created your first variable. You will see nothing is returned in the console, but if you check your environment window it has now appeared as a new variable that contains the associated value.\nType in twelve &lt;- 12 into the console and execute.\n\n\n\nR code\n\n# store a variable\ntwelve &lt;- 12\n\n\nOnce again, you will see nothing returned to the console but do check your environment window for your variable. We have now stored two numbers into our environment and given them variable names for easy reference. R stores these objects as variables in your computer’s memory so they can be processed quickly. Without saving your environment (we will come onto this below), these variables would be lost if you close R. Now we have our variables, we can go ahead and execute the same simple multiplication:\nType in ten * twelve into the console and execute.\n\n\n\nR code\n\n# using variables\nten * twelve\n\n\n[1] 120\n\n\nYou should see the output in the console of 120. Whilst this maths may look trivial, it is, in fact, extremely powerful as it shows how these variables can be treated in the same way as the values they contain.\nNext, type in ten * twelve * 8 into the console and execute.\n\n\n\nR code\n\n# using variables and values\nten * twelve * 8\n\n\n[1] 960\n\n\nYou should get an answer of 960. As you can see, we can mix variables with raw values without any problems. We can also store the output of variable calculations as a new variable.\nType output &lt;- ten * twelve * 8 into the console and execute.\n\n\n\nR code\n\n# store output\noutput &lt;- ten * twelve * 8\n\n\nBecause we are storing the output of our maths to a new variable, the answer is not returned to the screen.\n\n\n\nWe can ask our computer to return this output by simply typing it into the console. You should see we get the same value as the earlier equation.\n\n\n\nR code\n\n# return value\noutput\n\n\n[1] 960\n\n\n\n\n\nWe can also store variables of different data types, not just numbers but text as well.\nType in str_variable &lt;- \"This is our 1st string variable\" into the console and execute.\n\n\n\nR code\n\n# store a variable\nstr_variable &lt;- \"This is our 1st string variable\"\n\n\nWe have just stored our sentence made from a combination of characters, including letters and numbers. A variable that stores “words” (that may be sentences, or codes, or file names), is known as a string. A string is always denoted by the use of quotation marks (\"\" or ''). Type in str_variable into the console and execute.\n\n\n\nR code\n\n# return variable\nstr_variable\n\n\n[1] \"This is our 1st string variable\"\n\n\nYou should see our entire sentence returned,enclosed in quotation marks (\"\"). Again, by simply entering our variable into the console, we have asked R to return our variable to us.\n\n\n\nWe can also call a function on our variable. This use of call is a very specific programming term and generally what you use to say ‘use’ a function. What it simply means is that we will use a specific function to do something to our variable. For example, we can also ask R to print our variable, which will give us the same output as accessing it directly via the console.\nType in print(str_variable) into the console and execute.\n\n\n\nR code\n\n# printing a variable\nprint(str_variable)\n\n\n[1] \"This is our 1st string variable\"\n\n\nWe have just used our first function: print(). This function actively finds the variable and then returns this to our screen.\nYou can type ?print into the console to find out more about the print() function.\n\n\n\nR code\n\n# open documentation of the print function\n?print\n\n\nThis can be used with any function to get access to their documentation which is essential to know how to use the function correctly and understand its output.\n\n\n\n\n\n\nIn many cases, a function will take more than one argument or parameter, so it is important to know what you need to provide the function with in order for it to work. For now, we are using functions that only need one required argument although most functions will also have several optional or default parameters.\n\n\n\n\n\n\nWhen a function provides an output, such as this, it is known as returning. Not all functions will return an output to your screen, so often we require a print() statement or another type of returning function to check whether the function was successful or not. More on this later.\n\n\n\nWithin the base R language, there are various functions that have been written to help us examine and find out information about our variables. For example, we can use the typeof() function to check what data type our variable is.\nType in typeof(str_variable) into the console and execute.\n\n\n\nR code\n\n# call the typeof() function\ntypeof(str_variable)\n\n\n[1] \"character\"\n\n\nYou should see the answer: character. As evident, our str_variable is a character data type. We can try testing this out on one of our earlier variables too.\nType in typeof(ten) into the console and execute.\n\n\n\nR code\n\n# call the typeof() function\ntypeof(ten)\n\n\n[1] \"double\"\n\n\nYou should see the answer: double. As evident, our ten is a double data type. For high-level objects that involve (more complicated) data structures, such as when we load a csv into R as a dataframe, we are also able to check what class our object is. Type in class(str_variable) into the console and execute.\n\n\n\nR code\n\n# call the class() function\nclass(str_variable)\n\n\n[1] \"character\"\n\n\nIn this case, you will get the same answer because in R both its class and type are the same: a character. In other programming languages, you might have had string returned instead, but this effectively means the same thing.\nType in class(ten) into the console and execute.\n\n\n\nR code\n\n# call the class() function\nclass(ten)\n\n\n[1] \"numeric\"\n\n\nIn this case, you will get a different answer because the class of this variable is numeric. This is because the class of numeric objects can contain either doubles (decimals) or integers (whole numbers). We can test this by asking whether our ten variable is an integer or not.\nType in is.integer(ten) into the console and execute.\n\n\n\nR code\n\nis.integer(ten)\n\n\n[1] FALSE\n\n\nYou should see we get the answer FALSE: as we know from our earlier typeof() function our variable ten is stored as a double and therefore cannot be an integer.\n\n\n\n\n\n\nWhilst knowing how to distinguish between different data types might not seem important now, the difference of a double versus an integer can quite easily lead to unexpected errors.\n\n\n\nWe can also ask how long our variable is. in this case, we will find out how many different sets of characters (strings) are stored in our variable, str_variable.\nType in length(str_variable) into the console and execute.\n\n\n\nR code\n\n# call the length() function\nlength(str_variable)\n\n\n[1] 1\n\n\nYou should get the answer 1 because we only have one set of characters. We can also ask how long each set of characters is within our variable, i.e. ask how long the string contained by our variable is. Type in nchar(str_variable) into the console and execute.\n\n\n\nR code\n\n# call the nchar() function\nnchar(str_variable)\n\n\n[1] 31\n\n\nYou should get an answer of 31.\n\n\n\nLet us go ahead and test these two ‘length’ functions a little further by creating a new variable to store two string sets within our object, i.e. our variable will hold two elements.\nType in two_str_variable &lt;- c(\"This is our second variable\", \"It has two parts to it\") into the console and execute.\n\n\n\nR code\n\n# store a new variable\ntwo_str_variable &lt;- c(\"This is our second string variable\", \"It has two parts to it\")\n\n\nIn this piece of code, we have created a new variable using the c() function in R, that stands for combine values into a vector or list. We have provided that function with two sets of strings, using a comma to separate our two strings - all contained within the function’s brackets (()). You should now see a new variable in your environment window which tells us it is a) chr: characters, b) contains two items, and c) lists those items. Let us now try both our length() and nchar() on our new variable and see what the results are.\n\n\n\nR code\n\n# call the length() function\nlength(two_str_variable)\n\n\n[1] 2\n\n# call the nchar() function\nnchar(two_str_variable)\n\n[1] 34 22\n\n\nYou should notice that the length() function now returned a 2 and the nchar() function returned two values of 34 and 22.\nThere is one final function that we often want to use with our variables when we are first exploring them, which is attributes(). Because our current variables are very simple, they do not have any attributes but it is a really useful function, which we will come across later on.\n\n\n\nR code\n\n# call the attributes() function\nattributes(two_str_variable)\n\n\nNULL\n\n\n\n\n\n\n\n\nIn addition to make notes about the functions you are coming across in the workshop, you should notice that with each line of code in the examples, an additional comment is used to explain what the code does. Comments are denoted using the hash symbol #. This comments out that particular line so that R ignores it when the code is run. These comments will help you in future when you return to scripts a week or so after writing the code as well as help others understand what is going on when sharing your code. It is good practice to get into writing comments as you code and not leave it to do retrospectively. Whilst we are using the console, using comments is not necessary but as we start to build up a script later on, you will find them essential to help understand your workflow in the future."
  },
  {
    "objectID": "04-statistics.html#simple-analysis",
    "href": "04-statistics.html#simple-analysis",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "The objects we created and played with above are very simple but the real power of R comes when we can begin to execute functions on more complex objects. R accepts four main types of data structures: vectors, matrices, dataframes, and lists. These data structures are essential because they allow us to apply common statistical functions. We are going to explore these data structures with some of dummy data on the total number of pages and publication dates of the various editions of Geographic Information Systems and Science (GISS) book by Longley et al. and use these for a brief analysis:\n\n\n\nBook Edition\nYear of Publication\nTotal Number of Pages\n\n\n\n\n1st\n2001\n454\n\n\n2nd\n2005\n517\n\n\n3rd\n2011\n560\n\n\n4th\n2015\n477\n\n\n\n\n\nFirst, let us clear up our workspace and remove our current variables. Type rm(ten, twelve, output, str_variable, two_str_variable) into the console and execute.\n\n\n\nR code\n\n# clear our workspace\nrm(ten, twelve, output, str_variable, two_str_variable)\n\n\nYou should now see we no longer have any variables in our window. We just used the rm() function to remove these variables from our environment and free up some RAM. Keeping a clear workspace is another recommendation of good practice moving forward. Of course, we do not want to get rid of any variables we might need to use later but removing any variables we no longer need (such as test variables) will help you understand and manage your code and your working environment.\n\n\n\nThe first complex data object we will create is a vector. A vector is the most common and basic data structure in R. Vectors are a collection of elements that are mostly of either character, logical integer or numeric data types. Technically, vectors can be one of two types:\n\nAtomic vectors (all elements are of the same data type)\nLists (elements can be of different data types)\n\nAlthough in practice the term ‘vector’ most commonly refers to the atomic types and not to lists. Let us create our first official ’complex; vector, detailing the different total page numbers for GISS.\nType gisspage_no &lt;- c(454, 517, 560, 477) into the console and execute.\n\n\n\nR code\n\n# store the page numbers as a variable\ngiss_page_no &lt;- c(454, 517, 560, 477)\n\n\nType print(giss_page_no) into the console and execute to check the results.\n\n\n\nR code\n\n# print our giss_page_no variable\nprint(giss_page_no)\n\n\n[1] 454 517 560 477\n\n\nWe can see we have our total number of pages collected together in a single vector. We could if we want, execute some statistical functions on our vector object.\n\n\n\nR code\n\n# calculate the arithmetic mean on our variable\nmean(giss_page_no)\n\n\n[1] 502\n\n# calculate the median on our variable\nmedian(giss_page_no)\n\n[1] 497\n\n# calculate the range numbers of our variable\nrange(giss_page_no)\n\n[1] 454 560\n\n\nWe have now completed our first set of descriptive statistics in R. Let us see how we can build on our vector object by adding in a second vector object that details the relevant years of our book. Note that the total number of pages are entered in a specific order to correspond to these publishing dates (i.e. chronological) and therefore we will need to enter the publication year in the same order.\nType giss_year &lt;- c(2001, 2005, 2011, 2015) into the console and execute.\n\n\n\nR code\n\n# store the publication years as a variable\ngiss_year &lt;- c(2001, 2005, 2011, 2015)\n\n\nType print(giss_year) into the console and execute.\n\n\n\nR code\n\nprint(giss_year)\n\n\n[1] 2001 2005 2011 2015\n\n\nOf course, on their own, the two vectors do not mean much but we can use the same c() function that we used earlier to combine the two together to create a matrix.\n\n\n\nIn R, a matrix is simply an extension of the numeric or character vectors. They are not a separate type of object per se but simply a vector that has two dimensions. That is they contain both rows and columns. As with atomic vectors, the elements of a matrix must be of the same data type. As both our page numbers and our years are numeric, we can add them together to create a matrix using the matrix() function.\nType giss_year_nos &lt;- matrix(c(giss_year, giss_page_no), ncol=2) into the console and execute.\n\n\n\nR code\n\n# create a new matrix from our two vectors with two columns\ngiss_year_nos &lt;- matrix(c(giss_year, giss_page_no), ncol = 2)\n\n\nType print(giss_year_nos) into the console and execute to check the result.\n\n\n\nR code\n\n# inspect\nprint(giss_year_nos)\n\n\n     [,1] [,2]\n[1,] 2001  454\n[2,] 2005  517\n[3,] 2011  560\n[4,] 2015  477\n\n\nThe thing about matrices is that, for us, they do not have a huge amount of use. If we were to look at this matrix in isolation from what we know it represents, we would not really know what to do with it. As a result, we tend to primarily use dataframes in R as they offer the opportunity to add field names to our columns to help with their interpretation.\n\n\n\n\n\n\nThe function we just used above, matrix(), was the first function that we used that took more than one argument. In this case, the arguments the matrix needed to run were:\n\nWhat data or dataset should be stored in the matrix.\nHow many columns (ncol=) do we need to store our data in.\n\nFor any function, there will be mandatory arguments (i.e. it will not run without these) or optional arguments (i.e. it will run without these, as the default to this argument has been set usually to FALSE, 0 or NULL). These are normally documented in the documentation, including details on the format the function expects these arguments to be in.\nUnderstanding how to find out what object and data type a variable is essential therefore to knowing whether it can be used within a function or whether we will need to transform our variable into a different data structure to be used for that specific function.\n\n\n\n\n\n\nA dataframe is an extremely important data type in R. It is pretty much the de-facto data structure for most tabular data and the data structure we use for statistics. It also is the underlying structure to the table data (what we would call the attribute table in Q-GIS) that we associate with spatial data, more on this next week.\nA dataframe is a special type of list where every element of the list will have the same length (i.e. dataframe is a ‘rectangular’ list), Essentially, a dataframe is constructed from columns (which represent a list) and rows (which represents a corresponding element on each list). Each column will have the same amount of entries - even if, for that row, for example, the entry is simply NULL.\ndataframes can have additional attributes such as rownames(), which can be useful for annotating data, like subject_id or sample_id or UID. In statistics, they are often not used but in spatial analysis, these IDs can be essential to join data together. Some additional information on dataframes:\n\nThey are usually created by read.csv() and read.table(), i.e. when importing the data into R.\nYou can also create a new dataframe with data.frame() function, e.g. a matrix can be converted to a dataframe.\nYou can find out the number of rows and columns with nrow() and ncol(), respectively.\nRownames are often automatically generated and look likeX1, X2, … , Xn. Consistency in numbering of rownames may not be honoured when rows are reshuffled or subset.\n\nType giss_df &lt;- data.frame(giss_year_nos) into the console and execute.\n\n\n\nR code\n\n# create a new dataframe from our matrix\ngiss_df &lt;- data.frame(giss_year_nos)\n\n\nWe now have a dataframe, we can use the View() function in R. Still in your console, type: View(giss_df)\n\n\n\nR code\n\n# view our dataframe\nView(giss_df)\n\n\nYou should now see a table pop-up as a new tab on your script window. It is now starting to look like the table we are trying to create, but we need to do something about the fieldnames. X1 and X2 are not very informative.\n\n\n\nWe can rename our dataframe column field names by using the names() function. Before we do this, have a read of what the names() function does. Still in your console, type: ?names\n\n\n\nR code\n\n# open documentation of the names function\n?names\n\n\nAs you can see, the function will get or set the names of an object, with renaming occurring by using the following syntax: names(x) &lt;- value\nThe value itself needs to be a character vector of up to the same length as x, or NULL. We have two columns in our dataframe, so we need to parse our names() function with a character vector with two elements. In the console, we shall enter two lines of code, one after another. First our character vector with our new names, new_names &lt;- c(\"year\", \"page_nos\"), and then the names() function containing this vector for renaming, names(giss_df) &lt;- new_names:\n\n\n\nR code\n\n# create a vector with our new column names\nnew_names &lt;- c(\"year\", \"page_nos\")\n\n# rename our columns with our next names\nnames(giss_df) &lt;- new_names\n\n\nYou can go and check your dataframe again and see the new names using either View() function or by clicking on the tab at the top.\n\n\n\nWe are still missing one final column from our dataframe: our edition of the textbook column. As this is a character data type, we would not have been able to add this directly to our matrix. This is because dataframes can take different data types, unlike matrices - so let us go ahead and add the edition as a new column.\nTo do so, we follow a similar process of creating a vector with our editions listed in chronological order, but then add this to our dataframe by storing this vector as a new column in our dataframe. We use the $ sign with our code that gives us “access” to the dataframe’s column - we then specify the column edition, which whilst it does not exist at the moment, will be created from our code that assigns our edition variable to this column.\nType and execute edition &lt;- c(\"1st\", \"2nd\", \"3rd\", \"4th\"). Then store this vector as a new column in our dataframe under the column name edition by typing and executing giss_df$edition &lt;- edition:\n\n\n\nR code\n\n# create a vector witheditions\nedition &lt;- c(\"1st\", \"2nd\", \"3rd\", \"4th\")\n\n# add this vector as a new column to our dataframe\ngiss_df$edition &lt;- edition\n\n\nAgain, you can go and check your dataframe and see the new column using either View() function or by clicking on the tab at the top or by typing giss_df in your console window.\n\n\n\nR code\n\n# inspect\ngiss_df\n\n\n  year page_nos edition\n1 2001      454     1st\n2 2005      517     2nd\n3 2011      560     3rd\n4 2015      477     4th\n\n\nNow we have our dataframe, let us find out a little about it. We can first return the dimensions (the size) of our dataframe by using the dim() function. In your console, type dim(giss_df) and execute.\n\n\n\nR code\n\n# check our dataframe dimensions\ndim(giss_df)\n\n\n[1] 4 3\n\n\nWe can see we have four rows and three columns. We can also finally use our attributes() function to get the attributes of our dataframe. In your console, type attributes(giss_df) and execute:\n\n\n\nR code\n\n# check our dataframe attributes\nattributes(giss_df)\n\n\n$names\n[1] \"year\"     \"page_nos\" \"edition\" \n\n$row.names\n[1] 1 2 3 4\n\n$class\n[1] \"data.frame\"\n\n\n\n\n\n\n\n\n\nR is case-sensitive so you need to make sure that you capitalise everything correctly if required.\nThe spaces between the words do not matter but the positions of the commas and brackets do. Remember, if you find the prompt, &gt;, is replaced with a + it is because the command is incomplete. If necessary, hit the escape (esc) key and try again.\nIt is important to come up with good names for your objects. In the case of the majority of our variables, we used an underscore (_) to separate the words. It is good practice to keep the object names as short as possible but they still need to be easy to read and clear what they are referring to. Be aware: you cannot start an object name with a number!\nIf you press the up arrow in the console you will be able to edit the previous lines of code you have inputted."
  },
  {
    "objectID": "04-statistics.html#crime-in-london-ii",
    "href": "04-statistics.html#crime-in-london-ii",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "During Week 1’s computer tutorial, we already installed several R libraries. One of these libraries was called the tidyverse. The tidyverse is a collection of packages that are specifically designed for data wrangling, management, cleaning, analysis and visualisation within RStudio. Whilst in many cases different packages work all slightly differently, all packages of the tidyverse share the underlying design philosophy, grammar, and data structures.\nThe tidyverse itself is treated and loaded as a single package, but this means if you load the tidyverse package within your script (through library(tidyverse)), you will directly have access to all the functions that are part of each of the packages that are within the overall tidyverse. This means you do not have to load each package separately. For more information have a look at www.tidyverse.org.\nThere are some specific functions in the tidyverse suite of packages that will help us cleaning and preparing our datasets now and in the future, which is one of the main reasons for using this library. Some of the most important and useful functions, from the tidyr and dplyr packages, are:\n\n\n\n\n\n\n\n\nPackage\nFunction\nUse to\n\n\n\n\ndplyr\nselect()\nselect columns\n\n\ndplyr\nfilter()\nselect rows\n\n\ndplyr\nmutate()\ntransform or recode variables\n\n\ndplyr\nsummarise()\nsummarise data\n\n\ndplyr\ngroup_by()\ngroup data into subgroups for further processing\n\n\ntidyr\npivot_longer()\nconvert data from wide format to long format\n\n\ntidyr\npivot_wider()\nconvert long format dataset to wide format\n\n\n\nThese functions all complete very fundamental tasks that we need to manipulate and wrangle our data.\n\n\n\n\n\n\nThe code you just ran asked R to load all functions of the tidyverse. However: these functions are only available for the duration of your R sessions. When you restart your R session, you will have to load these functions again if you want to use them. Another thing to be aware of when it comes to using functions in these additional libraries, is that sometimes these functions share a name with a function form one of the base R packages. For instance, there exists a select() function within in the stats package that conducts linear filtering on a time series. However, after we load the tidyverse package and we would type select() this function will select columns from a dataframe. We therefore sometimes need to specify which library we want to use this function from, and this can be done with a simple command (library::function) in our code: stats::select to filter that time series and dplyr::select to select columns in a dataframe.\n\n\n\n\n\nIn the previous section, R may have seemed fairly labour-intensive. We had to enter all our data manually and each line of code had to be written into the command line. Fortunately this is not routinely the case. In RStudio, we can use scripts to build up our code that we can run repeatedly and save for future use. Before we start a new script, we first want to set up ourselves ready for the rest of our practicals by creating a new project.\nTo put it succinctly, projects in RStudio keep all the files associated with a project together: input data, R scripts, analytical results, figures, etc. This means we can easily keep track of all data, input and output, whilst still creating standalone scripts for each bit of processing analysis we do. It also makes dealing with directories and paths a whole lot easier; particularly if you have followed the folder structure that was advised at the start of the module.\nClick on File -&gt; New Project -&gt; Existing Directory and browse to your GEOG0030 folder. Click on Create Project. You should now see your main window switch to this new project and if you check your Files window, you should now see a new R Project called GEOG0030.\n\n\n\n\n\n\nPlease ensure that folder names and file names do not contain spaces or special characters such as * . \" / \\ [ ] : ; | = , &lt; ? &gt; & $ # ! ' { } ( ). Different operating systems and programming languages deal differently with spaces and special characters and as such including these in your folder names and file names can cause many problems and unexpected errors. As an alternative to using white space you can use an underscore _ or hyphen - if you like.\n\n\n\n\n\n\nFor the majority of our analysis work, we will type our code within a script and not the console. Let us create our first script. Click on File -&gt; New File -&gt; R Script. This should give you a blank document that looks a bit like the command line. The difference is that anything you type here can be saved as a script and re-run at a later date.\n\n\n\n\n\nFigure 2: Creating a new script in RStudio. [Enlarge image]\n\n\n\n\nSave your script as: wk4-csv-processing.r. Through our name, we know now that our script was created in Week 4 of Geocomputation and the code it will contain is something to do with csv processing. This will help us a lot in the future when we come to find code that we need for other projects.\nThe first bit of code you will want to add to any script is to add a title. This title should give any reader a quick understanding of what your code achieves. When writing a script it is important to keep notes about what each step is doing. To do this, the hash (#) symbol is put before any code. This comments out that particular line so that R ignores it when the script is run.\nLet us go ahead and give our script a title and include some metadata:\n\n\n\nR code\n\n# Analysing theft in London by month\n# Date: January 2024\n# Author: Justin \n\n\nNow we have our title, the second bit of code we want to include in our script is to load our libraries (i.e. the installed packages we want to use in our script):\n\n\n\nR code\n\n# load libraries\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nBy loading simply the tidyverse we gain access to several useful functions. However, when developing a script you will realise that you may need to load more libraries as you go along. When you do this, always add your library to the top of your script. If you ever share your script, it helps the person you are sharing with to recognise quickly if they need to install any additional packages prior to running the code It also means your libraries do not get lost in the multiple lines of code you are writing.\n\n\n\nThere are two main ways to run a script in RStudio: all at once or by line/chunk. It can be advantageous to pursue with the second option as you first start out to build your script as it allows you to test your code interactively.\n\n\n\nBy clicking: select the line or chunk of code you want to run, then click on Code and choose Run selected lines.\nBy key commands: select the line or chunk of code you want to run and then hold Ctl or Cmd and press Return.\n\n\n\n\n\nBy clicking: select Run on the top-right of the scripting window and choose Run All.\nBy key commands: hold Option plus Ctl or Cmd and R.\n\n\n\n\nIf you are running a script that seems to be stuck (for whatever reason) or you notice some of your code is wrong, you will need to interrupt R. To do so, click on Session -&gt; Interrupt R. If this does not work, you may end up needing to terminate R but this will loose any unsaved progress.\n\n\n\n\nWhere last week we provided you with a crime dataset, this week you will download and prepare the dataset yourselves.\n\nStart by navigating to data.police.uk. And click on Downloads.\nUnder the data range select January 2021 to December 2021.\nUnder the Custom download tab select Metropolitan Police Service and City of London Police. Leave all other settings and click on Generate file.\n\n\n\n\n\n\nFigure 3: Downloading London’s crime data. [Enlarge image]\n\n\n\n\n\nIt may take a few minutes for the download to be generated, so be patient. Once the Download now button appears, you can download the 2021 crime dataset.\nOnce downloaded, unzip the file. You will notice that the zip file contains 12 individual folders, one for each month in 2021. Each folder contains two files: one containing the data for the Metropolitan Police Service and one for the City of London Police.\nCreate a new folder named all-crime in your data/raw/crime directory and copy all 12 folders containing our data to this new folder.\n\n\n\n\n\n\nFigure 4: Your data folder should now look something like this.. [Enlarge image]\n\n\n\n\n\n\nWe are now ready to get started with using the crime data csv's currently sat in our all-crime folder. To do so, we need to first figure out how to import the csv and understand the data structure it will be in after importing. To read in a csv into R requires the use of a very simple function from the tidyverse library: read_csv().\nWe can look at the help documentation to understand what we need to provide the function (or rather the optional arguments), but as we just want to load single csv, we will go ahead and just use the function with a simple parameter.\n\n\n\nR code\n\n# read in a single csv from our crime data\ncrime_csv &lt;- read_csv(\"data/raw/crime/all-crime/2021-01/2021-01-metropolitan-street.csv\")\n\n\nRows: 84848 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Crime ID, Month, Reported by, Falls within, Location, LSOA code, LS...\ndbl (2): Longitude, Latitude\nlgl (1): Context\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nIf using a Windows machine, you will need to substitute your forward-slashes (/) with two backslashes (\\\\) whenever you are dealing with file paths.\n\n\n\nWe can explore the csv we have just loaded as our new crime_csv variable and understand the class, attributes and dimensions of our variable.\n\n\n\nR code\n\n# inspect class\nclass(crime_csv)\n\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n# inspect dimensions\ndim(crime_csv)\n\n[1] 84848    12\n\n\nWe have found out our variable is a dataframe, containing 84,848 rows and 12 columns. We however do not want just the single csv and instead what to combine all our csv's in our all-crime folder into a single dataframe. How do we do this?\nThis will be the most complicated section of code you will come across today, and we will use some functions that you have not seen before. Copy the following code below into your script, then execute.\n\n\n\nR code\n\n# create a list of all csv files in the crime folder\nall_crime_df &lt;- list.files(path = \"data/raw/crime/all-crime/\", full.names = TRUE, recursive = TRUE) |&gt;\n  # apply the read_csv() function on each of these files\n  lapply(read_csv) |&gt;\n  # combine ('bind') them all together into one\n  bind_rows()\n\n\nThis might take a little time to process (or might not), as we have a lot of data to get through. You should see a new dataframe appear in your global environment called all_crime_df, for which we now have 1,079,267 observations!\n\n\n\n\n\n\nIt is a little difficult to explain the code above without going into too much detail and at this stage you are not expected to fully understand what is happening here, but essentially what the code does is:\n\nList all the files found in the data path: data/raw/crime/all-crime/\nRead each of these as a csv by “applying” the read_csv() function to all files.\nBinding all rows of all individual dataframes together in a single dataframe.\n\nThese three different actions are combined by using something called a pipe (|&gt;), which we will explain in a bit more detail next week.\n\n\n\n\n\n\nWe can now have a look at our large dataframe in more detail.\n\n\n\nR code\n\n# full inspection of the dataframe\nncol(all_crime_df)\n\n\n[1] 12\n\nnrow(all_crime_df)\n\n[1] 1079267\n\nhead(all_crime_df)\n\n# A tibble: 6 × 12\n  Crime …¹ Month Repor…² Falls…³ Longi…⁴ Latit…⁵ Locat…⁶ LSOA …⁷ LSOA …⁸ Crime…⁹\n  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  \n1 &lt;NA&gt;     2021… City o… City o… -0.0976    51.5 On or … E01000… City o… Anti-s…\n2 &lt;NA&gt;     2021… City o… City o… -0.0986    51.5 On or … E01000… City o… Anti-s…\n3 455f0a5… 2021… City o… City o… -0.0973    51.5 On or … E01000… City o… Other …\n4 19f0605… 2021… City o… City o… -0.0986    51.5 On or … E01000… City o… Other …\n5 c1554ce… 2021… City o… City o… -0.0976    51.5 On or … E01000… City o… Shopli…\n6 fe0819e… 2021… City o… City o… -0.0976    51.5 On or … E01000… City o… Shopli…\n# … with 2 more variables: `Last outcome category` &lt;chr&gt;, Context &lt;lgl&gt;, and\n#   abbreviated variable names ¹​`Crime ID`, ²​`Reported by`, ³​`Falls within`,\n#   ⁴​Longitude, ⁵​Latitude, ⁶​Location, ⁷​`LSOA code`, ⁸​`LSOA name`, ⁹​`Crime type`\n\n\nYou should now see with have the same number of columns as our previous single csv, but with many more rows. You can also see that the head() function provides us with the first five rows of our dataframe. You can conversely use tail() to provide the last five rows.\nFor now in our analysis, we only want to extract the theft crime in our dataframe, so we need to filter our data based on the Crime type column. However, as we can see, we have a space in our field name for Crime type and, in fact, many of the other fields. As we want to avoid having spaces in our field names when coding, we need to rename our fields. Rename the field names, just as we did with our GIS table earlier:\n\n\n\nR code\n\n# create a new vector containing updated no space / no capital field names\nno_space_names &lt;- c(\"crime_id\", \"month\", \"reported_by\", \"falls_within\", \"longitude\",\n    \"latitude\", \"location\", \"lsoa_code\", \"lsoa_name\", \"crime_type\", \"last_outcome_category\",\n    \"context\")\n\n# rename our df field names using these new names\nnames(all_crime_df) &lt;- no_space_names\n\n\nWe now have our dataframe ready for filtering. To do so, we will use the filter() function from the dplyr package:\n\n\n\nR code\n\n# filter all_crime_df to contain only theft\nall_theft_df &lt;- dplyr::filter(all_crime_df, crime_type == \"Theft from the person\")\n\n\n\n\n\n\n\n\nIf two functions from different packages have the same name, R default to use the function from the package that got loaded last. To avoid confusion, however, it can be a good idea at times to specify the library from which a function should be taken. In this case, we can make it clear that we want to use filter() from the dplyr package instead of the default stats library.\n\n\n\nYou should now see the new variable appear in your environment with 38,229 observations. Now save the dataframe as a csv file.\n\n\n\nR code\n\n# save all_crime_df as csv\nwrite_csv(all_theft_df, \"data/raw/crime/crime-theft-2021-london.csv\")\n\n\n\n\n\n\n\n\nRemember that if using a Windows machine, you might need to substitute your forward-slashes (/) with two backslashes (\\\\) whenever you are dealing with file paths!\n\n\n\nWe now want to do some further housekeeping and create on final dataframe that will allow us to analyse crime in London by month. To do so, we want to count how many thefts occur each month in London. Fortunately, dplyr has another function that will do this for us, known simply as count().\nWhen you go ahead and search the documentation to understand the count() function, you will see that there is only one function called count() at the moment, i.e. the one in the dplyr library, so we do not need to use the additional syntax we used above. Let us go ahead and count the number of thefts in London by month:\n\n\n\nR code\n\n# count in the all_theft_df the number of crimes by month\nmonth_theft_df &lt;- count(all_theft_df, month)\n\n\nWe have stored the output of our count() function to a new dataframe: month_theft_df. Go ahead and look at the dataframe to see the output: it is a very simple table containing simply the month and n, i.e. the number of thefts occurring per month. We can and should go ahead and rename this column to help with our interpretation of the dataframe. We will use a quick approach to do this, that uses selection of the precise column to rename only the second column:\n\n\n\nR code\n\n# rename the second column of our new dataframe to crime_totals\nnames(month_theft_df)[2] &lt;- \"crime_totals\"\n\n\nThis selection is made through the [2] element of code added after the names() function we have used earlier. We will look more at selection, slicing and indexing in next week’s tutorial."
  },
  {
    "objectID": "04-statistics.html#assignment-w04",
    "href": "04-statistics.html#assignment-w04",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "Now we have prepared our dataset, we can conduct some analysis:\n\nWhat was the average number of crimes per month in London in 2021?\nWhat was the median number of crimes per month in London in 2021?\nWhat were the minimum and maximum values of crime in London in 2021?\nBesides descriptive statistics, it would be really useful to generate a simple chart. Use the documentation of the barplot() function to create the barplot below:\n\n\n\n\n\n\n\n\n\n\n\n\nDo not forget to save your script so you can go back to it at a later time. When you close R and are asked if you want to save your workspace: this is not per se necessary. Saving the workspace will keep any variables generated during your current session saved and available in a future session, but so will re-running your script."
  },
  {
    "objectID": "04-statistics.html#wm-w04",
    "href": "04-statistics.html#wm-w04",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "The barplot we have made above is very basic, and there are better ways to make nice visualisations. For this we can turn to other R packages that have been developed. In fact, there are many hundreds of packages in R each designed for a specific purpose, some of which you can use to create plots in R. One of those packages is called ggplot2. The ggplot2 package is an implementation of the Grammar of Graphics (Wilkinson 2005): a general scheme for data visualisation that breaks up graphs into semantic components such as scales and layers. ggplot2 can serve as a replacement for the base graphics in R and contains a number of default options that match good visualisation practice. You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details. An excellent introduction to ggplot2 can be found in the online, freely available book R for Data Science; written by Hadley Wickham, core developer of ggplot2 and the tidyverse. Have a particularly close look at Chapter 2: Data vizualisation.\n\n\n\nThe book Data Skills for Reproducible Research provides an excellent overview of skills needed for reproducible and open research using the statistical programming language R and tidyverse packages. To get started: have a look at Chapter 2: Reproducible Workflows, Chapter 7: Data Wrangling, and Chapter 8: Iterations and Functions.\nAnother great tool is found in the targets package. The targets package is a Make-like pipeline tool for Statistics and data science in R. With targets, you can maintain a reproducible workflow without repeating yourself. To get started: have a look at the Walkthrough chapter to see targets in action."
  },
  {
    "objectID": "04-statistics.html#byl-w04",
    "href": "04-statistics.html#byl-w04",
    "title": "1 Programming for Data Analysis",
    "section": "",
    "text": "We have managed to take a dataset of over one million records and clean and filter it to create a barplot on theft crime in London. Of course, there is a lot more research and exploratory data analysis that can be done, but this first chart is certainly a step in the right direction. Next week, we will be doing a lot more with our dataset, including a lot more data wrangling and an introduction to using spatial data, but hopefully this week has shown you want you can achieve with just a few lines of code. That concludes the tutorial for this week!"
  },
  {
    "objectID": "01-introduction.html",
    "href": "01-introduction.html",
    "title": "1 Geocomputation: An Introduction",
    "section": "",
    "text": "This week’s lecture provided you with a thorough introduction to this Geocomputation module, outlining how and why it is different to a traditional GIScience course. We set the scene for the remainder of the module and explained how the foundational concepts that you will learn in the first half of term sit within the overall module. This week we start easy by setting up our work environment and making sure that we can access the software that we will need over the coming weeks.\n\n\nThe slides for this week’s lecture can be downloaded here: [Link]\n\n\n\n\n\n\nBrundson, C. and Comber, A. 2020. Opening practice: Supporting reproducibility and critical spatial data science. Journal of Geographical Systems 23: 477–496. [Link]\nFranklin, R. 2023. Quantitative methods III: Strength in numbers? Progress in Human Geography. Online First. [Link].\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 1: Geographic Information: Science, Systems, and Society, pp. 1-32. [Link]\nSingleton, A. and Arribas-Bel, D. 2019. Geographic Data Science. Geographical Analysis 53(1): 61-75. [Link]\n\n\n\n\n\nMiller, H. and Goodchild, M. 2015. Data-driven geography. GeoJournal 80: 449–461. [Link]\nGoodchild, M. 2009. Geographic information systems and science: Today and tomorrow. Annals of GIS 15(1): 3-9. [Link]\nWorobey, M. et al. 2022. The Huanan Seafood Wholesale Market in Wuhan was the early epicenter of the COVID-19 pandemic. Science 377(6609): 951-959. [Link]\n\n\n\n\n\nOver the next few weeks, we will be taking a closer look at many of the foundational concepts that will ultimately enable you to confidently and competently analyse spatial data using both programming and GIS software. You will further learn how to plan, structure and conduct your own spatial analysis using programming.\n\n\n\nThis module primarily uses the R programming language, although we will start by using QGIS over the next two weeks to provide you with a visual introduction to the principles of spatial analysis.\n\n\n\n\n\n\nPlease follow the instructions below to install both QGIS and R onto your own personal computer. If you cannot install the software on your personal computer or you are not planning to bring your own laptop to the computer practicals, please refer to the UCL Desktop and RStudio Server section below. Please make sure that you have access to a working installation of QGIS and R (including relevant packages) before the first hands-on practical session next week.\n\n\n\n\n\nQGIS is an open-source graphic user interface GIS with many community developed add-on packages (or plugins) that provide additional functionality to the software. You can download and install QGIS on your personal machine by going to the QGIS website: [Link].\n\n\n\n\n\n\nWe recommend installing the Long Term Release (QGIS 3.28 LTR) as this version should be the most current stable version. For Windows users: be aware that the QGIS installation can be a little slow.\n\n\n\nAfter installation, start QGIS to see if the installation was successful.\n\n\n\nR is a programming language originally designed for conducting statistical analysis and creating graphics. R’s great strength is that it is open source, can be used on any computer operating system, and is free for anyone to use and contribute to. Because of this, it has rapidly become the statistical language of choice for many academics and has a large user community with people constantly contributing new packages to carry out all manner of statistical, graphical, and importantly for us, geographical tasks.\nInstalling R takes a few relatively simple steps involving two pieces of software. First there is the R programme itself. Follow these steps to get it installed on your computer:\n\nNavigate in your browser to the download page: [Link]\nIf you use a Windows computer, click on Download R for Windows. Then click on base. Download and install R 4.3.x for Windows. If you use a Mac computer, click on Download R for macOS and download and install R-4.3.x.arm64.pkg for Apple silicon Macs and R-4.3.x.x86_64.pkg for older Intel-based Macs.\n\nThat is it! You now have installed R onto your own machine. However, to make working with R a little bit easier we also need to install something called an Integrated Development Environment (IDE). We will use RStudio Desktop:\n\nNavigate to the official webpage of RStudio: [Link]\nDownload and install RStudio Desktop on your computer (free version!)\n\nAfter this, start RStudio to see if the installation was successful. If no errors are shown after start starting the programme, you are ready to go.\n\n\n\nThere are two alternatives to installing QGIS and R with RStudio onto your personal device. First, both programmes are available through Desktop@UCL Anywhere as well as all UCL computers on campus. Second, specifically to R, we have RStudio Server available which you can access through your web browser: [Link]\n\n\n\n\n\n\nRStudio Server is a version of R ‘in the cloud’ which you can access through your web browser.\n\n\n\nYou should be able to log onto the RStudio server with your regular UCL username and password. After logging in, you should see the RStudio interface appear.\n\n\n\n\n\nFigure 1: The RStudio Server interface. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nIf it is the first time you log on to RStudio server you may only see the RStudio interface appear once you have clicked on the start a new session button. More importantly: if you are not on campus, RStudio server will only work with an active Virtual Private Network (VPN) connection that links your personal computer into UCL’s network. Details on setting up a VPN connection can be found in UCL’s VPN connection guides: [Link]\n\n\n\n\n\n\nNow we have installed QGIS and R onto our machines / have access to QGIS and R through UCL’s resources, we need to customise R. Many useful R functions come in packages, these are free libraries of code written and made available by other R users. This includes packages specifically developed for data cleaning, data wrangling, visualisation, mapping, and spatial analysis. To save us some time, we will install all R packages that we will need over the next ten weeks in one go. Start RStudio, and copy and paste the following code into the console window. You can execute the code by hitting Enter. Depending on your computer’s specificiations and the internet connection, this may take a while.\n\n\n\nR code\n\n# install packages\ninstall.packages(c(\"tidyverse\", \"sf\", \"tmap\", \"osmdata\", \"terra\", \"dodgr\"))\n\n\n\n\n\n\n\n\nEven if you have used R or RStudio Server before and previously installed some of the packages in the above list, do re-install all packages by running the code above to make sure you have the latest versions. Legacy installations that have not been updated may cause errors when running the code in this workbook.\n\n\n\nOnce you have installed the packages, we need to check whether we can in fact load them into R. Copy and paste the following code into the console, and execute by hitting Enter again.\n\n\n\nR code\n\n# load packages\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nlibrary(osmdata)\nlibrary(terra)\nlibrary(dodgr)\n\n\nYou will see some information printed to your console but as long as you do not get any of the messages below, the installation was successful. If you do get any of the messages below it means that the package was not properly installed, so try to install the package in question again.\n\nError: package or namespace load failed for &lt;packagename&gt;\nError: package '&lt;packagename&gt;' could not be loaded\nError in library(&lt;packagename&gt;) : there is no package called '&lt;packagename&gt;'\n\n\n\n\n\n\n\nMany packages depend on other packages (so-called dependencies). It happens at times when you install a package it does not install all dependencies. If you encounter any of the above errors in reference to a package that you did not explicitly install, it is probably a missing dependency. Simply install the dependency by typing install.packages('&lt;dependencyname&gt;') and try loading all packages again.\n\n\n\n\n\n\nArcGIS Pro is the main commercial GIS software that you may have already used or seen/heard about through other modules or even job adverts. We do not use ArcGIS Pro in this module for the following reasons:\n\nComputing requirements for ArcGIS Pro are substantial and it only operates on the Windows Operating System. For Mac or Linux users, using ArcGIS Pro would require using a Virtual Machine, Docker Installation, or a separate copy of Windows OS running on a separate partition of your hard drive.\nArcGIS is proprietary software, which means you need a license to use the software. For those of us in education, the University covers the cost of this license, but when you leave, you will need to pay for a personal license to continue using the software and repeat any analysis you have used the software for.\nWhilst ArcPro can use pure Python (and even R) as a programming language within it through scripts and notebooks, it primarily relies on its own ArcPy and ArcGIS API for Python packages to run the in-built tools and analytical functions. To use these packages, you still need a license which makes it difficult to share your code with others if they do not have their own ArcGIS license.\n\nRecent developments in the ArcPro software, however, does make it an attractive tool for spatial data science and quantitative geography: it has cross-user functionality, from data analysts to those focused more on cartography and visualisation with in-built bridges to Adobe’s Creative Suite. We therefore do not want to put you off looking into ArcGIS in the future, but during this module we want to ensure the reproducibility of your work.\n\n\n\n\nYou should now be all ready to go with the computer practicals the coming week. Nice and easy. Time to look at the articles on the reading list? That is it for this week!"
  },
  {
    "objectID": "01-introduction.html#slides-w01",
    "href": "01-introduction.html#slides-w01",
    "title": "1 Geocomputation: An Introduction",
    "section": "",
    "text": "The slides for this week’s lecture can be downloaded here: [Link]"
  },
  {
    "objectID": "01-introduction.html#reading-w01",
    "href": "01-introduction.html#reading-w01",
    "title": "1 Geocomputation: An Introduction",
    "section": "",
    "text": "Brundson, C. and Comber, A. 2020. Opening practice: Supporting reproducibility and critical spatial data science. Journal of Geographical Systems 23: 477–496. [Link]\nFranklin, R. 2023. Quantitative methods III: Strength in numbers? Progress in Human Geography. Online First. [Link].\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 1: Geographic Information: Science, Systems, and Society, pp. 1-32. [Link]\nSingleton, A. and Arribas-Bel, D. 2019. Geographic Data Science. Geographical Analysis 53(1): 61-75. [Link]\n\n\n\n\n\nMiller, H. and Goodchild, M. 2015. Data-driven geography. GeoJournal 80: 449–461. [Link]\nGoodchild, M. 2009. Geographic information systems and science: Today and tomorrow. Annals of GIS 15(1): 3-9. [Link]\nWorobey, M. et al. 2022. The Huanan Seafood Wholesale Market in Wuhan was the early epicenter of the COVID-19 pandemic. Science 377(6609): 951-959. [Link]"
  },
  {
    "objectID": "01-introduction.html#getting-started",
    "href": "01-introduction.html#getting-started",
    "title": "1 Geocomputation: An Introduction",
    "section": "",
    "text": "Over the next few weeks, we will be taking a closer look at many of the foundational concepts that will ultimately enable you to confidently and competently analyse spatial data using both programming and GIS software. You will further learn how to plan, structure and conduct your own spatial analysis using programming."
  },
  {
    "objectID": "01-introduction.html#software",
    "href": "01-introduction.html#software",
    "title": "1 Geocomputation: An Introduction",
    "section": "",
    "text": "This module primarily uses the R programming language, although we will start by using QGIS over the next two weeks to provide you with a visual introduction to the principles of spatial analysis.\n\n\n\n\n\n\nPlease follow the instructions below to install both QGIS and R onto your own personal computer. If you cannot install the software on your personal computer or you are not planning to bring your own laptop to the computer practicals, please refer to the UCL Desktop and RStudio Server section below. Please make sure that you have access to a working installation of QGIS and R (including relevant packages) before the first hands-on practical session next week.\n\n\n\n\n\nQGIS is an open-source graphic user interface GIS with many community developed add-on packages (or plugins) that provide additional functionality to the software. You can download and install QGIS on your personal machine by going to the QGIS website: [Link].\n\n\n\n\n\n\nWe recommend installing the Long Term Release (QGIS 3.28 LTR) as this version should be the most current stable version. For Windows users: be aware that the QGIS installation can be a little slow.\n\n\n\nAfter installation, start QGIS to see if the installation was successful.\n\n\n\nR is a programming language originally designed for conducting statistical analysis and creating graphics. R’s great strength is that it is open source, can be used on any computer operating system, and is free for anyone to use and contribute to. Because of this, it has rapidly become the statistical language of choice for many academics and has a large user community with people constantly contributing new packages to carry out all manner of statistical, graphical, and importantly for us, geographical tasks.\nInstalling R takes a few relatively simple steps involving two pieces of software. First there is the R programme itself. Follow these steps to get it installed on your computer:\n\nNavigate in your browser to the download page: [Link]\nIf you use a Windows computer, click on Download R for Windows. Then click on base. Download and install R 4.3.x for Windows. If you use a Mac computer, click on Download R for macOS and download and install R-4.3.x.arm64.pkg for Apple silicon Macs and R-4.3.x.x86_64.pkg for older Intel-based Macs.\n\nThat is it! You now have installed R onto your own machine. However, to make working with R a little bit easier we also need to install something called an Integrated Development Environment (IDE). We will use RStudio Desktop:\n\nNavigate to the official webpage of RStudio: [Link]\nDownload and install RStudio Desktop on your computer (free version!)\n\nAfter this, start RStudio to see if the installation was successful. If no errors are shown after start starting the programme, you are ready to go.\n\n\n\nThere are two alternatives to installing QGIS and R with RStudio onto your personal device. First, both programmes are available through Desktop@UCL Anywhere as well as all UCL computers on campus. Second, specifically to R, we have RStudio Server available which you can access through your web browser: [Link]\n\n\n\n\n\n\nRStudio Server is a version of R ‘in the cloud’ which you can access through your web browser.\n\n\n\nYou should be able to log onto the RStudio server with your regular UCL username and password. After logging in, you should see the RStudio interface appear.\n\n\n\n\n\nFigure 1: The RStudio Server interface. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nIf it is the first time you log on to RStudio server you may only see the RStudio interface appear once you have clicked on the start a new session button. More importantly: if you are not on campus, RStudio server will only work with an active Virtual Private Network (VPN) connection that links your personal computer into UCL’s network. Details on setting up a VPN connection can be found in UCL’s VPN connection guides: [Link]\n\n\n\n\n\n\nNow we have installed QGIS and R onto our machines / have access to QGIS and R through UCL’s resources, we need to customise R. Many useful R functions come in packages, these are free libraries of code written and made available by other R users. This includes packages specifically developed for data cleaning, data wrangling, visualisation, mapping, and spatial analysis. To save us some time, we will install all R packages that we will need over the next ten weeks in one go. Start RStudio, and copy and paste the following code into the console window. You can execute the code by hitting Enter. Depending on your computer’s specificiations and the internet connection, this may take a while.\n\n\n\nR code\n\n# install packages\ninstall.packages(c(\"tidyverse\", \"sf\", \"tmap\", \"osmdata\", \"terra\", \"dodgr\"))\n\n\n\n\n\n\n\n\nEven if you have used R or RStudio Server before and previously installed some of the packages in the above list, do re-install all packages by running the code above to make sure you have the latest versions. Legacy installations that have not been updated may cause errors when running the code in this workbook.\n\n\n\nOnce you have installed the packages, we need to check whether we can in fact load them into R. Copy and paste the following code into the console, and execute by hitting Enter again.\n\n\n\nR code\n\n# load packages\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nlibrary(osmdata)\nlibrary(terra)\nlibrary(dodgr)\n\n\nYou will see some information printed to your console but as long as you do not get any of the messages below, the installation was successful. If you do get any of the messages below it means that the package was not properly installed, so try to install the package in question again.\n\nError: package or namespace load failed for &lt;packagename&gt;\nError: package '&lt;packagename&gt;' could not be loaded\nError in library(&lt;packagename&gt;) : there is no package called '&lt;packagename&gt;'\n\n\n\n\n\n\n\nMany packages depend on other packages (so-called dependencies). It happens at times when you install a package it does not install all dependencies. If you encounter any of the above errors in reference to a package that you did not explicitly install, it is probably a missing dependency. Simply install the dependency by typing install.packages('&lt;dependencyname&gt;') and try loading all packages again.\n\n\n\n\n\n\nArcGIS Pro is the main commercial GIS software that you may have already used or seen/heard about through other modules or even job adverts. We do not use ArcGIS Pro in this module for the following reasons:\n\nComputing requirements for ArcGIS Pro are substantial and it only operates on the Windows Operating System. For Mac or Linux users, using ArcGIS Pro would require using a Virtual Machine, Docker Installation, or a separate copy of Windows OS running on a separate partition of your hard drive.\nArcGIS is proprietary software, which means you need a license to use the software. For those of us in education, the University covers the cost of this license, but when you leave, you will need to pay for a personal license to continue using the software and repeat any analysis you have used the software for.\nWhilst ArcPro can use pure Python (and even R) as a programming language within it through scripts and notebooks, it primarily relies on its own ArcPy and ArcGIS API for Python packages to run the in-built tools and analytical functions. To use these packages, you still need a license which makes it difficult to share your code with others if they do not have their own ArcGIS license.\n\nRecent developments in the ArcPro software, however, does make it an attractive tool for spatial data science and quantitative geography: it has cross-user functionality, from data analysts to those focused more on cartography and visualisation with in-built bridges to Adobe’s Creative Suite. We therefore do not want to put you off looking into ArcGIS in the future, but during this module we want to ensure the reproducibility of your work."
  },
  {
    "objectID": "01-introduction.html#byl-w01",
    "href": "01-introduction.html#byl-w01",
    "title": "1 Geocomputation: An Introduction",
    "section": "",
    "text": "You should now be all ready to go with the computer practicals the coming week. Nice and easy. Time to look at the articles on the reading list? That is it for this week!"
  },
  {
    "objectID": "02-GIScience.html",
    "href": "02-GIScience.html",
    "title": "1 GIScience and GIS software",
    "section": "",
    "text": "This week’s lecture introduced you to foundational concepts associated with GIScience and GIS software, with particular emphasis on the representation of spatial data and sample design. Out of all our foundational concepts you will come across in the next four weeks, this is probably the most substantial to get to grips with and has both significant theoretical and practical aspects to its learning. The practical component of the week puts some of these learnings into practice by creating a simple visualisation of London’s population in the Census years of 2011 and 2021.\n\n\nThe slides for this week’s lecture can be downloaded here: [Link]\n\n\n\n\n\n\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 2: The Nature of Geographic Data, pp. 33-54. [Link]\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 3: Representing Geography, pp. 55-76. [Link]\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 7: Geographic Data Modeling, pp. 152-172. [Link]\n\n\n\n\n\nGoodchild, M. and Haining, R. 2005. GIS and spatial data analysis: Converging perspectives. Papers in Regional Science 83(1): 363–385. [Link]\nSchurr, C., Müller, M. and Imhof, N. 2020. Who makes geographical knowledge? The gender of Geography’s gatekeepers. The Professional Geographer 72(3): 317-331. [Link]\nYuan, M. 2001. Representing complex geographic phenomena in GIS. Cartography and Geographic Information Science 28(2): 83-96. [Link]\n\n\n\n\n\nThis first computer practical is mainly concerned with creating Attribute Joins so to create choropleth maps. You will be using different types of joins throughout this practical, this module in general, and probably the rest of your career, so it is incredibly important that you understand how these work.\n\n\n\n\n\n\nThe datasets you will create in this practical will be used in coming week’s practicals, so make sure to follow every step and save your data carefully.\n\n\n\nWhen using spatial data, there is generally a specific workflow that you will need to go through and, believe it or not, the majority of this is not actually focused on analysing your data. One of the most often-quoted GIS-related ‘facts’ is that anyone working with spatial data will spend 80% of their time simply finding, retrieving, managing and processing the data before any analysis can be done.\nOne of the reasons behind this is that the data you often need to use is almost never in the format that you require for analysis. Instead, we need to go and find the raw datasets and create the data layers that we want ourselves.\nA typical spatial analysis workflow typically will look something like this:\n\n\n\n\n\n\n\nStep\nAction\n\n\n\n\nidentify\nThink about the data you need to complete your analysis.\n\n\nfind\nFind the data that matches your requirements.\n\n\ndownload\nStore the data on your computer in the right folder.\n\n\nclean\nAssess whether the data needs pre-processing before moving to QGIS or R.\n\n\nload\nLoad the cleaned data into QGIS, R, or software of choice.\n\n\nprocess\nPrepare the data so that they are ready for analysis (e.g. joining, aggregating).\n\n\nanalyse\nExecute the actual analysis that you set out to do.\n\n\nvisualise\nCreate graphs and maps where appropriate.\n\n\n\nAs you can see, the analysis and visualisation parts only make up the last steps of the workflow and instead, the workflow is very top-heavy with data management.\n\n\n\n\n\n\nVery often in GIS-related modules you will be given pre-processed datasets. We will minimise the usage of pre-processed dataset in this module. Because data management is an essential part of your workflow, we will clean the majority of our data from the get-go. This will help you understand the processes that you will need to go through in the future as you search for and download your own data before loading it into your GIS environment.\n\n\n\n\n\nToday we will investigate how the population in London has changed over time. Understanding population change over time and space is spatial analysis at its most fundamental. We can understand a lot just from where population is growing or decreasing, including thinking through the impacts of these changes on the provision of housing, education, health and transport infrastructure. Today we will look at population in London in the Census years of 2011 and 2021 at the so-called Lower Super Output Area (LSOA) geography level (see @w02-download-population below for some details on Administrative Geographies).\n\n\n\n\n\n\nAdministrative geographies are a way of dividing the country into smaller sub-divisions or areas that correspond with the area of responsibility of local authorities and government bodies. These administrative sub-divisions and their associated geography have several important uses, including assigning electoral constituencies and serving as a mechanism for collecting Census data. These geographies are updated as populations evolve and as a result the boundaries of the administrative geographies are subject to either periodic or occasional change.\n\n\n\n\n\n\nIn the UK, finding authoritative data on population and Administrative Geography boundaries is increasingly straightforward. Over the last decade, the UK government has opened up many of its datasets as part of an Open Data precedent that began in 2010 with the creation of data.gov.uk and the Open Government Licence. For our practical today, we will access data from two authoritative data portals:\n\nFor our administrative boundaries, we will download the spatial data through the Open Geography Portal.\nFor our population data, we will download attribute data directly from the Office of National Statistics (ONS).\n\n\n\n\nBefore we download our data, it is important to establish an organised file system that we will use throughout the module. Create a GEOG0030 folder in your Documents folder on your computer and within your GEOG0030 folder, create the following subfolders:\n\n\n\n\n\n\n\nFolder name\nPurpose\n\n\n\n\nraw\nTo store all your raw data files that have not yet been cleaned and processed.\n\n\ndata\nTo store data files that have been cleaned and processed.\n\n\noutput\nTo store all your final output data files.\n\n\nmaps\nTo store the maps you will create.\n\n\n\n\n\n\nWe will start by downloading the administrative geography boundaries for England and Wales:\n\nNavigate to the Open Geography Portal: [Link]\nIn the main menu go to Boundaries -&gt; Census Boundaries  -&gt; Lower Layer Super Output Areas -&gt; 2011 Boundaries.\nClick on LSOA (Dec 2011) Boundaries Generalised Clipped BGC EW V3.\nClick on Download -&gt; Download GeoPackage.\n\nRepeat the above process to also download the 2021 LSOA boundaries: Lower Layer Super Output Areas (2021) Boundaries EW BGC. Make sure you download the Generalised (20m) version.\n\n\n\n\n\n\nDue to boundary changes, we need to download both the 2011 and 2021 LSOA files. More details on the administrative geographies of the UK can be found on the website of the Office for National Statistics. On a different page they also explain the Census 2021 geographies, which include the LSOAs that we are using.\n\n\n\nNow open your GEOG0030/raw/ folder and create a new folder called boundaries. Rename the two files you just downloaded to LSOA2011.gpkg and LSOA2021.gpkg, respectively, and copy these into your boundaries folder.\n\n\n\n\n\n\nYou may have used spatial data before and noticed that we did not download a collection of files known as a shapefile but a GeoPackage instead. Whilst shapefiles are still being used, and you will most likely come across them at some point in your career if you have not already, the more modern, more portable, and open-source GeoPackage file format should be your spatial data format of choice where possible. Have a look at this article on towardsdatascience.com for an excellent explanation on why one should use GeoPackage files over shapefiles where possible: [Link]\n\n\n\n\n\n\nFor our population data, we will use the 2011 and 2021 Census population counts that are made available by the ONS through their Nomis portal.\nTo get the 2011 Census population counts, you should:\n\nNavigate to the Nomis portal: [Link]\nClick on Query data in the Data Downloads panel.\nClick on Census 2011 -&gt; Key Statistics.\nClick on KS101EW - Usual resident population.\nSelect Geography and set 2011 super output areas - lower layer to All.\nClick on Download data at the left hand side of the screen.\nOnce the data is ready for download, download the file to your computer.\n\nTo get the 2021 Census population counts, you should:\n\nNavigate to the Nomis portal: [Link]\nClick on Query data in the Data Downloads panel.\nClick on Census 2021 -&gt; Topic Summaries.\nClick on TS007A - Age by five-year age bands.\nSelect Geography and set 2021 super output areas - lower layer to All.\nClick on Download data at the left hand side of the screen.\nOnce the data is ready for download, download the file to your computer.\n\nIn your GEOG0030/raw/ folder, now create a new folder called population and copy the two Excel files to the newly created population folder. Rename the files you downloaded to: LSOA2011_population.xlsx and LSOA2021_population.xlsx, respectively.\n\n\n\nWhen you open up any of the LSOA spreadsheets in Excel, you will notice that some additional rows of information are contained at the top of each of these files. This extra information will cause issues in QGIS and we therefore need to do some data cleaning. To reduce the chance of errors in later stages, we will also save the data in csv format.\n\n\n\n\n\n\ncsv stands for comma (or character) separated values. A csv file can be thought of as stripped-down Excel spreadsheet in which every column of data is separated by a comma. If you open a csv file within Excel, however, it will look ‘normal’. The advantage of using csv files is that it (should) make it easier to read data into QGIS and R as less things can go wrong. csv does have its limitations, especially when you are dealing with large datasets. A powerful and modern alternative is the parquet format. For an introduction on how to use this, refer to Chapter 23 in Hadley Wickham’s R for Data Science (Second Edition)\n\n\n\n\n\nOpen the LSOA2011_population.xlsx file in Excel. We have two main columns: one with identifying information that distinguishes each area from one another and one with population counts. In addition, there are some less informative rows at the top of the spreadsheet.\nLooking at this we need to take three steps. First, we need to remove the top rows that we do not need. Second, we need to make sure that we extract all the rows with data that are relevant to Greater London. Third, we need to split the information in the first column and put it into two separate columns. The reason for this is that the column contains unique area codes as well as unique area names. However, to be able to effectively link our population data to our spatial data, the codes are much more reliable and much less likely to cause issues than the area names. Putting area codes and area names into separate columns will help us sorting this out.\n\nOpen a new Excel spreadsheet.\nFrom the LSOA2011_population.xlsx spreadsheet, cut (Edit -&gt; Cut) all cells from columns A to B and rows 9 to 4,651 into this new spreadsheet. Row 4,651 denotes the end of the majority of the Greater London LSOAs.\nNow we need to identify the missing LSOAs that were not kept at the top of the file with the other London LSOAs, probably because these LSOAs got introduced at a later point in time. Unfortunately, we can only do this manually by searching for the name of each of the London Boroughs and subsequently cutting the associated rows of data from the spreadsheet and pasting these into the second spreadsheet.\nGo to Edit -&gt; Find -&gt; Find. Type in City of London. Cut (Edit -&gt; Cut) the two rows of data (City of London 001F, City of London 001G) and paste these at the bottom of the second spreadsheet.\nRepeat this process to find all missing LSOAs by searching the names of all 32 London Boroughs.\n\n\n\n\n\n\n\nYou can make this process a bit less tedious by using keyboard shortcuts. On MacOS you can use: cmd + f to open up the find menu, cmd + x to cut data, and cmd + v to paste data. On Windows you can use: ctrl + f to open up the find menu, ctrl + x to cut data, and ctrl + v to paste date.\n\n\n\n\n\n\n\n\n\nNot all of the 32 London Boroughs have missing LSOAs whilst in other cases the missing LSOAs are not grouped together (e.g. Wandsworth and Southwark) so after cutting the data, try Find again to make sure you did not miss any LSOAs. Once you are done cutting and pasting, you should have 4,836 rows of data in your second spreadsheet.\n\n\n\n\n\n\nLondon Boroughs\n\n\n\n\n\nWestminster\nSutton\n\n\nKensington and Chelsea\nCrodyon\n\n\nHammersmith and Fulham\nBromley\n\n\nWandsworth\nLewisham\n\n\nLambeth\nGreenwich\n\n\nSouthwark\nBexley\n\n\nTower Hamlets\nHavering\n\n\nHackney\nBarking and Dagenham\n\n\nIslington\nRedbridge\n\n\nCamden\nNewham\n\n\nBrent\nWaltham Forest\n\n\nEaling\nHaringey\n\n\nHounslow\nEnfield\n\n\nRichmond upon Thames\nBarnet\n\n\nKingston upon Thames\nHarrow\n\n\nMerton\nHillingdon\n\n\n\n\nOnce you copied all the rows of data, rename the columns in the new spreadsheet to lsoa and pop2011, respectively.\nCut all the data from the pop2011 column that is stored in column B and paste these into column C. You now should have a column without any data sat between the lsoa and pop2011 columns.\nHighlight the entire lsoa column and in the Data menu click on the Text to Columns menu button.\n\n\n\n\n\n\nFigure 1: Highlight the lsoa columns and find the Text to Columns menu option. Note that column B does not contain any data. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nNote that the Text to Columns function might be elsewhere in the menu depending on your version of Excel and/or your operating system.\n\n\n\n\nIn the Text to Columns menu, select the Delimited radio button and click Next.\nUncheck the checkbox for Tab and put : (colon) into the Other box. Click Finish.\nChange the name of the lsoa column to lsoa11_code and change the name of the now populated column B to lsoa11_name.\n\n\n\n\n\n\nFigure 2: Your spreadsheet should now look something like this. [Enlarge image]\n\n\n\n\n\nOne thing that might cause problems when we try to link the population data to the spatial data is that there are still spaces contained in the lsoa11_code column. This is not directly noticeable as these spaces are white space characters at the end of the LSOA codes without any other characters following it (i.e. trailing spaces). This may seem trivial, but we need this column and we therefore need to remove these. We can do this by highlighting the entire lsoa11_code column and in the Home menu opting for Replace under the Find & Select menu.\n\n\n\n\n\n\nFigure 3: Accessing the Replace option. [Enlarge image]\n\n\n\n\n\nIn the Find what box put in a singular white space, using the spacebar on your keyboard, keep the Replace with box empty, and click on Replace all. You should get a message that 4,835 replacements have been made.\n\nOne further bit of formatting that you must do before saving your data is to format our population field. At the moment, you will see that there are commas separating the thousands within our values. If we leave these commas in our values, QGIS will read them as decimal points, creating decimal values of our population. There are many points at which we could resolve this issue, but the easiest point is now.\n\nTo format the pop2011 column, highlight the entire column and right-click on the C cell. Click on Format Cells and set the cells to Number with 0 decimal places. You should see that the commas are now removed from your population values.\nSave your spreadsheet as a csv file into your data folder as LSOA2011_population.csv.\n\n\n\n\n\n\n\nAfter saving the file, Excel might give you a warning along the lines of Possible data loss. You can safely ignore this message as the only ‘information’ you have lost is markup information (e.g. fonts, colours, items in bold, etc.) or formulas within Excel (e.g. if you used Excel formulas to calculate means, medians, etc.). In some cases you might also have options to choose what type of csv you would want to save the spreadsheet as. If so, opt for something along the lines of CSV UTF-8 (Comma-delimited) (.csv).\n\n\n\n\n\n\n\n\n\nDepending on the language settings of your operating system (e.g. Windows, MacOS, Linux) and language settings, csv files might use a different character instead of a comma. This may seem trivial, but it can cause issues when reading the data into a different programme. It is therefore always a good idea to check your csv file in a plain text editor (e.g. Textedit on MacOS or Notepad on Windows). In case you do not see commas (,), but semicolons (;) you can apply a quick and dirty fix to your data by finding and replacing every ; with a , in the same that way we fixed our problematic white space characters in Excel.\n\n\n\n\n\n\nNow the 2011 data is prepared, we can move on to the 2021 data:\n\nOpen the LSOA2021_population.xlsx in Excel. You will notice that the file is formatted largely the same as the LSOA2011_population.xlsx file, although if you were to look closely you will notice that the majority of London data are not at the top this time but that Local Authority Districts are grouped together - and in fact all data pertaining to Greater London are also grouped together. This makes our lives much easier because we can now simply cut the data for each of the 32 Boroughs and City of London in one go.\nOpen a new Excel spreadsheet.\nFrom the LSOA2021_population.xlsx spreadsheet, cut (Edit -&gt; Cut) all cells from columns A to B and rows 19,790 to 2,4783 and paste these into this new spreadsheet.\nTake the remaining steps to prepare the 2021 population steps: split the lsoa column, remove the trailing white space characters from the LSOA code column, and remove the decimal commas in the population count column.\nSave the file as csv into your data folder as LSOA2021_population.csv with the following column names: lsoa21_code, lsoa21_name, and pop2021.\n\n\n\n\n\n\n\nAgain make sure you did not miss any LSOAs. You should end up with 4,995 rows of data in your second spreadsheet.\n\n\n\n\n\n\n\n\n\nWe will now use QGIS to create population maps for the LSOAs in London for both years. To achieve this, we need to join our table data to our spatial datasets and then map our populations for our visual analysis.\n\n\n\n\n\n\nDue to the differences in the LSOA boundaries between 2011 and 2021, we can only make a visual comparison between the two years. You will notice that data interoperability is a key issue that you will face in spatial analysis, particularly when it comes to working with ever-changing administrative geographies.\n\n\n\n\nStart QGIS.\nClick on Project -&gt; New. Save your project as w2-pop-analysis. Remember to save your work throughout the practical.\nBefore we get started with adding data, we will first set the Coordinate Reference System of our Project. Click on Project -&gt; Properties – CRS. In the Filter box, type British National Grid. Select OSGB 1936 / British National Grid - EPSG:27700 and click Apply. Click OK.\n\n\n\n\n\n\n\nWe will explain CRSs and using CRSs in GIS software in more detail next week. For now all you need to know is that the CRS makes sure that the data we plot on the map are plotted in the correct location.\n\n\n\n\n\n\nNow are project is set up, we can start by loading our 2011 spatial layer.\n\nClick on Layer -&gt; Add Layer -&gt; Add Vector Layer.\nWith File as your source type, click on the small three dots button and navigate to your 2011 boundary files.\nHere, we will select the LSOA2011.gpkg dataset. Highlight the file and click Open. Then click Add. You may need to close the box after adding the layer. The 2011 LSOA geography for England and Wales should now be loaded.\n\n\n\n\n\n\nFigure 4: 2011 LSOAs for England and Wales. [Enlarge image]\n\n\n\n\n\n\n\nWe are now going to join our 2011 population data to our 2011 spatial data file. We start by adding the 2011 population data to our project.\n\nClick on Layer -&gt; Add Layer -&gt; Add Delimited Text Layer.\nClick on the three dots button again and navigate to your 2011 population data in your data folder. Your file format should be set to csv. You should have the following boxes ticked under the Record and Field options menu: Decimal separator is comma, First record has field names, Detect field types and Discard empty fields. QGIS does many of these by default, but do double-check.\nSet the Geometry to No geometry (attribute only table) under the Geometry Definition menu. Then click Add and Close. You should now see a table added to your Layers pane.\n\nWe can now join this table data to our spatial data using an Attribute Join.\n\n\n\n\n\n\nAn Attribute Join is one of two types of data joins you will use in spatial analysis (the other is a Spatial join, which we will look at later on in the module). An attribute join essentially allows you to link two datasets together, as long as they share a common attribute to facilitate the ‘matching’ of rows:\n\n\n\n\n\nFigure 5: Attribute Joins. [Enlarge image]\n\n\n\n\nEssentially you need a single unique identifying (UID) field for your records within both datasets: this can be a code, a name or any other string of information. In spatial analysis, we always join our table data to our spatial data. One way to think about it as attaching the table data to the spatial data layer.\nTo make a join work, you need to make sure your ID field is correct across both datasets, i.e. no typos or spelling mistakes. Computers can only follow instructions, so they do not know that St. Thomas in one dataset is the same as St Thomas in another.\nAs a result, whilst in our datasets we have kept both the name and code for both the boundary data and the population data, when creating the join, we will always prefer to use the code over their names. Unlike names, codes reduce the likelihood of error and mismatch because they do not rely on understanding spelling. Common errors, such as adding in spaces or using 0 instead O (and vice versa) can still happen but it is less likely.\n\n\n\nTo make our join work, we need to check that we have a matching UID across both our datasets. We therefore need to look at the tables of both datasets and check what attributes we have that could be used for this possible match.\n\nOpen up the Attribute Tables of each layer and check what fields we have that could be used for the join. We can see that both our respective ‘code’ fields have the same codes (LSOA11CD and lsoa11_code) which seem to contain the same type of information.\nRight-click on your LSOA2011 spatial layer, click on Properties and then click on the Joins tab.\n\nClick on the + button. Make sure the Join Layer is set to LSOA2011_population.\nSet the Join field to lsoa11_code.\nSet the Target field to LSOA11CD.\nClick the Joined Fields box and click to only select the pop2011 field.\nClick on the Custom Field Name Prefix and remove the pre-entered text to leave it blank.\nClick on OK.\nClick on Apply in the main Join tab and then click OK to return to the main QGIS window.\n\n\nWe can now check to see if our join has worked by opening up the Attribute Table of our LSOA11CD spatial layer and looking to see if our LSOAs now have a Population field attached to it.\n\nSort the data in the Attribute Table on the pop2011 field by clicking on the column name: all LSOAs for which we have population data (i.e. only the London LSOAs) are now grouped at the top of the file. Select the first 4,835 rows of data.\n\n\n\n\n\n\n\nYou can select the first row, scroll down to the last row that has population data, hold down the shift button on your keyboard, and click on the last row that has population data to select all rows that we need in one go.\n\n\n\n\n\n\n\n\nFigure 6: All 4,835 London LSOAs selected. [Enlarge image]\n\n\n\n\n\nClose the Attribute Table. Right-click on the LSOA2011 layer and select Export -&gt; Save Selected Features As. Set Format to GeoPackage and click on the small three dots button next to File name and navigate to your raw/boundaries folder. Save the file as LSOA2011_London.gpkg.\nYou can now untick the LSOA2011 containing all the LSOAs for England and Wales. Right-click on the LSOA2011_London layer and click on Zoom to Layer(s).\n\n\n\n\n\n\nFigure 7: All 4,835 2011 London LSOAs. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nThe main strength of a GUI GIS system is that is really helps us understand how spatial data relate to one another and are visualised. Even with just two spatial layers loaded, we can understand two key concepts of using spatial data within GIS. The first, and this is only really relevant to GUI GIS systems, is that each layer can either be turned on or off, to make it visible or not. The second concept is the order in which your layers are drawn – and this is relevant for both GUI GIS and when using plotting libraries such as ggplot2 or tmap in RStudio. Your layers will be drawn depending on the order in which your layers are either tabled (as in a GUI GIS) or ‘called’ in your function in code. Being aware of this need for ‘order’ is important when we shift to using RStudio and tmap to plot our maps, as if you do not layer your data correctly in your code, your map will end up not looking as you hoped. For us using QGIS right now, the layers will be drawn from bottom to top.\n\n\n\nWe can now finally map the population distribution of London in 2011.\n\nRight-click on the LSOA2011_London layer and click on Properties -&gt; Symbology.\n\nIn the dropdown menu at the top of the window, select Graduated as symbology.\nUnder Value choose pop2011 as your column.\nWe can then change the color ramp to suit our aesthetic preferences. In the Colour ramp dropdown menu select Magma.\nThe final thing we need to do is classify our data - what this simply means is to decide how to group the values in our dataset together to create the graduated representation. We will be looking at classification options in later weeks, but for now, we will use the Natural Breaks option. Open the drop-down menu next to Mode, select Natural Breaks, change it to 7 classes and then click Classify.\nFinally click Apply to style your dataset.\n\n\n\n\n\n\n\n\nUnderstanding what classification is appropriate to visualise your data is an important step within spatial analysis and visualisation, and something you will learn more about in the following weeks. Overall, they should be determined by looking at the distribution of the underlying data.\n\n\n\nYou should now be looking at something like this:\n\n\n\n\n\nFigure 8: The population distribution of London in 2011. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nWhereas the above map is fine for today, it is technically incorrect because we are showing absolute numbers on a choropleth. This is something we should never do, unless the spatial units are identical in size (e.g. a hexagonal tessellation of an area), because larger areas will draw attention and affect the visualisation.\n\n\n\n\n\n\n\nTo export your map select only the map layers you want to export and then opt for Project -&gt; Import/Export -&gt; Export to Image and save your final map in your maps folder. Next week, we will look at how to style our maps using the main map conventions (adding North Arrows, Scale Bars and Legends, etc.) but for now a simple output will do.\n\n\n\n\nYou now need to repeat the entire process to also create a map for the 2021 Census data. Remember, you need to:\n\nLoad the respective spatial layer.\nLoad the respective population dataset.\nJoin the two datasets together using an Attribute Join.\nExport your joined dataset (London only) as a GeoPackage and save this into your raw/boundaries folder as LSOA2021_London.gpkg. We will use this file in later weeks.\nStyle your data appropriately.\nExport your maps as an image to your output folder.\n\n\n\n\n\n\n\nTo make visual comparisons against our two datasets, theoretically we would need to standardise the breaks at which our classification schemes are set at. To set all two datasets to the same breaks, you can do the following:\n\nRight-click again on the LSOA2011_London dataset and, click on Styles -&gt; Copy Styles -&gt; Symbology.\nNow right-click on the LSOA2021_London file, and click on Styles -&gt; Paste Style -&gt; Symbology. You should now see the classification breaks in the 2021 dataset change to match those in the 2011 data.\nThe final thing you need to do is to change the classification column in the Symbology tab for the 2021 dataset to say pop2021 instead of pop2011.\n\n\n\n\n\n\n\nSave your project so you can go back to it if you need to, other than that that is it for this week. Probably time to start looking at this week’s reading list!"
  },
  {
    "objectID": "02-GIScience.html#slides-w01",
    "href": "02-GIScience.html#slides-w01",
    "title": "1 GIScience and GIS software",
    "section": "",
    "text": "The slides for this week’s lecture can be downloaded here: [Link]"
  },
  {
    "objectID": "02-GIScience.html#reading-w02",
    "href": "02-GIScience.html#reading-w02",
    "title": "1 GIScience and GIS software",
    "section": "",
    "text": "Longley, P. et al. 2015. Geographic Information Science & Systems, Chapter 2: The Nature of Geographic Data, pp. 33-54. [Link]\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 3: Representing Geography, pp. 55-76. [Link]\nLongley, P. et al. 2015. Geographic Information Science & Systems, Chapter 7: Geographic Data Modeling, pp. 152-172. [Link]\n\n\n\n\n\nGoodchild, M. and Haining, R. 2005. GIS and spatial data analysis: Converging perspectives. Papers in Regional Science 83(1): 363–385. [Link]\nSchurr, C., Müller, M. and Imhof, N. 2020. Who makes geographical knowledge? The gender of Geography’s gatekeepers. The Professional Geographer 72(3): 317-331. [Link]\nYuan, M. 2001. Representing complex geographic phenomena in GIS. Cartography and Geographic Information Science 28(2): 83-96. [Link]"
  },
  {
    "objectID": "02-GIScience.html#population-change-in-london",
    "href": "02-GIScience.html#population-change-in-london",
    "title": "1 GIScience and GIS software",
    "section": "",
    "text": "This first computer practical is mainly concerned with creating Attribute Joins so to create choropleth maps. You will be using different types of joins throughout this practical, this module in general, and probably the rest of your career, so it is incredibly important that you understand how these work.\n\n\n\n\n\n\nThe datasets you will create in this practical will be used in coming week’s practicals, so make sure to follow every step and save your data carefully.\n\n\n\nWhen using spatial data, there is generally a specific workflow that you will need to go through and, believe it or not, the majority of this is not actually focused on analysing your data. One of the most often-quoted GIS-related ‘facts’ is that anyone working with spatial data will spend 80% of their time simply finding, retrieving, managing and processing the data before any analysis can be done.\nOne of the reasons behind this is that the data you often need to use is almost never in the format that you require for analysis. Instead, we need to go and find the raw datasets and create the data layers that we want ourselves.\nA typical spatial analysis workflow typically will look something like this:\n\n\n\n\n\n\n\nStep\nAction\n\n\n\n\nidentify\nThink about the data you need to complete your analysis.\n\n\nfind\nFind the data that matches your requirements.\n\n\ndownload\nStore the data on your computer in the right folder.\n\n\nclean\nAssess whether the data needs pre-processing before moving to QGIS or R.\n\n\nload\nLoad the cleaned data into QGIS, R, or software of choice.\n\n\nprocess\nPrepare the data so that they are ready for analysis (e.g. joining, aggregating).\n\n\nanalyse\nExecute the actual analysis that you set out to do.\n\n\nvisualise\nCreate graphs and maps where appropriate.\n\n\n\nAs you can see, the analysis and visualisation parts only make up the last steps of the workflow and instead, the workflow is very top-heavy with data management.\n\n\n\n\n\n\nVery often in GIS-related modules you will be given pre-processed datasets. We will minimise the usage of pre-processed dataset in this module. Because data management is an essential part of your workflow, we will clean the majority of our data from the get-go. This will help you understand the processes that you will need to go through in the future as you search for and download your own data before loading it into your GIS environment.\n\n\n\n\n\nToday we will investigate how the population in London has changed over time. Understanding population change over time and space is spatial analysis at its most fundamental. We can understand a lot just from where population is growing or decreasing, including thinking through the impacts of these changes on the provision of housing, education, health and transport infrastructure. Today we will look at population in London in the Census years of 2011 and 2021 at the so-called Lower Super Output Area (LSOA) geography level (see @w02-download-population below for some details on Administrative Geographies).\n\n\n\n\n\n\nAdministrative geographies are a way of dividing the country into smaller sub-divisions or areas that correspond with the area of responsibility of local authorities and government bodies. These administrative sub-divisions and their associated geography have several important uses, including assigning electoral constituencies and serving as a mechanism for collecting Census data. These geographies are updated as populations evolve and as a result the boundaries of the administrative geographies are subject to either periodic or occasional change.\n\n\n\n\n\n\nIn the UK, finding authoritative data on population and Administrative Geography boundaries is increasingly straightforward. Over the last decade, the UK government has opened up many of its datasets as part of an Open Data precedent that began in 2010 with the creation of data.gov.uk and the Open Government Licence. For our practical today, we will access data from two authoritative data portals:\n\nFor our administrative boundaries, we will download the spatial data through the Open Geography Portal.\nFor our population data, we will download attribute data directly from the Office of National Statistics (ONS).\n\n\n\n\nBefore we download our data, it is important to establish an organised file system that we will use throughout the module. Create a GEOG0030 folder in your Documents folder on your computer and within your GEOG0030 folder, create the following subfolders:\n\n\n\n\n\n\n\nFolder name\nPurpose\n\n\n\n\nraw\nTo store all your raw data files that have not yet been cleaned and processed.\n\n\ndata\nTo store data files that have been cleaned and processed.\n\n\noutput\nTo store all your final output data files.\n\n\nmaps\nTo store the maps you will create.\n\n\n\n\n\n\nWe will start by downloading the administrative geography boundaries for England and Wales:\n\nNavigate to the Open Geography Portal: [Link]\nIn the main menu go to Boundaries -&gt; Census Boundaries  -&gt; Lower Layer Super Output Areas -&gt; 2011 Boundaries.\nClick on LSOA (Dec 2011) Boundaries Generalised Clipped BGC EW V3.\nClick on Download -&gt; Download GeoPackage.\n\nRepeat the above process to also download the 2021 LSOA boundaries: Lower Layer Super Output Areas (2021) Boundaries EW BGC. Make sure you download the Generalised (20m) version.\n\n\n\n\n\n\nDue to boundary changes, we need to download both the 2011 and 2021 LSOA files. More details on the administrative geographies of the UK can be found on the website of the Office for National Statistics. On a different page they also explain the Census 2021 geographies, which include the LSOAs that we are using.\n\n\n\nNow open your GEOG0030/raw/ folder and create a new folder called boundaries. Rename the two files you just downloaded to LSOA2011.gpkg and LSOA2021.gpkg, respectively, and copy these into your boundaries folder.\n\n\n\n\n\n\nYou may have used spatial data before and noticed that we did not download a collection of files known as a shapefile but a GeoPackage instead. Whilst shapefiles are still being used, and you will most likely come across them at some point in your career if you have not already, the more modern, more portable, and open-source GeoPackage file format should be your spatial data format of choice where possible. Have a look at this article on towardsdatascience.com for an excellent explanation on why one should use GeoPackage files over shapefiles where possible: [Link]\n\n\n\n\n\n\nFor our population data, we will use the 2011 and 2021 Census population counts that are made available by the ONS through their Nomis portal.\nTo get the 2011 Census population counts, you should:\n\nNavigate to the Nomis portal: [Link]\nClick on Query data in the Data Downloads panel.\nClick on Census 2011 -&gt; Key Statistics.\nClick on KS101EW - Usual resident population.\nSelect Geography and set 2011 super output areas - lower layer to All.\nClick on Download data at the left hand side of the screen.\nOnce the data is ready for download, download the file to your computer.\n\nTo get the 2021 Census population counts, you should:\n\nNavigate to the Nomis portal: [Link]\nClick on Query data in the Data Downloads panel.\nClick on Census 2021 -&gt; Topic Summaries.\nClick on TS007A - Age by five-year age bands.\nSelect Geography and set 2021 super output areas - lower layer to All.\nClick on Download data at the left hand side of the screen.\nOnce the data is ready for download, download the file to your computer.\n\nIn your GEOG0030/raw/ folder, now create a new folder called population and copy the two Excel files to the newly created population folder. Rename the files you downloaded to: LSOA2011_population.xlsx and LSOA2021_population.xlsx, respectively.\n\n\n\nWhen you open up any of the LSOA spreadsheets in Excel, you will notice that some additional rows of information are contained at the top of each of these files. This extra information will cause issues in QGIS and we therefore need to do some data cleaning. To reduce the chance of errors in later stages, we will also save the data in csv format.\n\n\n\n\n\n\ncsv stands for comma (or character) separated values. A csv file can be thought of as stripped-down Excel spreadsheet in which every column of data is separated by a comma. If you open a csv file within Excel, however, it will look ‘normal’. The advantage of using csv files is that it (should) make it easier to read data into QGIS and R as less things can go wrong. csv does have its limitations, especially when you are dealing with large datasets. A powerful and modern alternative is the parquet format. For an introduction on how to use this, refer to Chapter 23 in Hadley Wickham’s R for Data Science (Second Edition)\n\n\n\n\n\nOpen the LSOA2011_population.xlsx file in Excel. We have two main columns: one with identifying information that distinguishes each area from one another and one with population counts. In addition, there are some less informative rows at the top of the spreadsheet.\nLooking at this we need to take three steps. First, we need to remove the top rows that we do not need. Second, we need to make sure that we extract all the rows with data that are relevant to Greater London. Third, we need to split the information in the first column and put it into two separate columns. The reason for this is that the column contains unique area codes as well as unique area names. However, to be able to effectively link our population data to our spatial data, the codes are much more reliable and much less likely to cause issues than the area names. Putting area codes and area names into separate columns will help us sorting this out.\n\nOpen a new Excel spreadsheet.\nFrom the LSOA2011_population.xlsx spreadsheet, cut (Edit -&gt; Cut) all cells from columns A to B and rows 9 to 4,651 into this new spreadsheet. Row 4,651 denotes the end of the majority of the Greater London LSOAs.\nNow we need to identify the missing LSOAs that were not kept at the top of the file with the other London LSOAs, probably because these LSOAs got introduced at a later point in time. Unfortunately, we can only do this manually by searching for the name of each of the London Boroughs and subsequently cutting the associated rows of data from the spreadsheet and pasting these into the second spreadsheet.\nGo to Edit -&gt; Find -&gt; Find. Type in City of London. Cut (Edit -&gt; Cut) the two rows of data (City of London 001F, City of London 001G) and paste these at the bottom of the second spreadsheet.\nRepeat this process to find all missing LSOAs by searching the names of all 32 London Boroughs.\n\n\n\n\n\n\n\nYou can make this process a bit less tedious by using keyboard shortcuts. On MacOS you can use: cmd + f to open up the find menu, cmd + x to cut data, and cmd + v to paste data. On Windows you can use: ctrl + f to open up the find menu, ctrl + x to cut data, and ctrl + v to paste date.\n\n\n\n\n\n\n\n\n\nNot all of the 32 London Boroughs have missing LSOAs whilst in other cases the missing LSOAs are not grouped together (e.g. Wandsworth and Southwark) so after cutting the data, try Find again to make sure you did not miss any LSOAs. Once you are done cutting and pasting, you should have 4,836 rows of data in your second spreadsheet.\n\n\n\n\n\n\nLondon Boroughs\n\n\n\n\n\nWestminster\nSutton\n\n\nKensington and Chelsea\nCrodyon\n\n\nHammersmith and Fulham\nBromley\n\n\nWandsworth\nLewisham\n\n\nLambeth\nGreenwich\n\n\nSouthwark\nBexley\n\n\nTower Hamlets\nHavering\n\n\nHackney\nBarking and Dagenham\n\n\nIslington\nRedbridge\n\n\nCamden\nNewham\n\n\nBrent\nWaltham Forest\n\n\nEaling\nHaringey\n\n\nHounslow\nEnfield\n\n\nRichmond upon Thames\nBarnet\n\n\nKingston upon Thames\nHarrow\n\n\nMerton\nHillingdon\n\n\n\n\nOnce you copied all the rows of data, rename the columns in the new spreadsheet to lsoa and pop2011, respectively.\nCut all the data from the pop2011 column that is stored in column B and paste these into column C. You now should have a column without any data sat between the lsoa and pop2011 columns.\nHighlight the entire lsoa column and in the Data menu click on the Text to Columns menu button.\n\n\n\n\n\n\nFigure 1: Highlight the lsoa columns and find the Text to Columns menu option. Note that column B does not contain any data. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nNote that the Text to Columns function might be elsewhere in the menu depending on your version of Excel and/or your operating system.\n\n\n\n\nIn the Text to Columns menu, select the Delimited radio button and click Next.\nUncheck the checkbox for Tab and put : (colon) into the Other box. Click Finish.\nChange the name of the lsoa column to lsoa11_code and change the name of the now populated column B to lsoa11_name.\n\n\n\n\n\n\nFigure 2: Your spreadsheet should now look something like this. [Enlarge image]\n\n\n\n\n\nOne thing that might cause problems when we try to link the population data to the spatial data is that there are still spaces contained in the lsoa11_code column. This is not directly noticeable as these spaces are white space characters at the end of the LSOA codes without any other characters following it (i.e. trailing spaces). This may seem trivial, but we need this column and we therefore need to remove these. We can do this by highlighting the entire lsoa11_code column and in the Home menu opting for Replace under the Find & Select menu.\n\n\n\n\n\n\nFigure 3: Accessing the Replace option. [Enlarge image]\n\n\n\n\n\nIn the Find what box put in a singular white space, using the spacebar on your keyboard, keep the Replace with box empty, and click on Replace all. You should get a message that 4,835 replacements have been made.\n\nOne further bit of formatting that you must do before saving your data is to format our population field. At the moment, you will see that there are commas separating the thousands within our values. If we leave these commas in our values, QGIS will read them as decimal points, creating decimal values of our population. There are many points at which we could resolve this issue, but the easiest point is now.\n\nTo format the pop2011 column, highlight the entire column and right-click on the C cell. Click on Format Cells and set the cells to Number with 0 decimal places. You should see that the commas are now removed from your population values.\nSave your spreadsheet as a csv file into your data folder as LSOA2011_population.csv.\n\n\n\n\n\n\n\nAfter saving the file, Excel might give you a warning along the lines of Possible data loss. You can safely ignore this message as the only ‘information’ you have lost is markup information (e.g. fonts, colours, items in bold, etc.) or formulas within Excel (e.g. if you used Excel formulas to calculate means, medians, etc.). In some cases you might also have options to choose what type of csv you would want to save the spreadsheet as. If so, opt for something along the lines of CSV UTF-8 (Comma-delimited) (.csv).\n\n\n\n\n\n\n\n\n\nDepending on the language settings of your operating system (e.g. Windows, MacOS, Linux) and language settings, csv files might use a different character instead of a comma. This may seem trivial, but it can cause issues when reading the data into a different programme. It is therefore always a good idea to check your csv file in a plain text editor (e.g. Textedit on MacOS or Notepad on Windows). In case you do not see commas (,), but semicolons (;) you can apply a quick and dirty fix to your data by finding and replacing every ; with a , in the same that way we fixed our problematic white space characters in Excel.\n\n\n\n\n\n\nNow the 2011 data is prepared, we can move on to the 2021 data:\n\nOpen the LSOA2021_population.xlsx in Excel. You will notice that the file is formatted largely the same as the LSOA2011_population.xlsx file, although if you were to look closely you will notice that the majority of London data are not at the top this time but that Local Authority Districts are grouped together - and in fact all data pertaining to Greater London are also grouped together. This makes our lives much easier because we can now simply cut the data for each of the 32 Boroughs and City of London in one go.\nOpen a new Excel spreadsheet.\nFrom the LSOA2021_population.xlsx spreadsheet, cut (Edit -&gt; Cut) all cells from columns A to B and rows 19,790 to 2,4783 and paste these into this new spreadsheet.\nTake the remaining steps to prepare the 2021 population steps: split the lsoa column, remove the trailing white space characters from the LSOA code column, and remove the decimal commas in the population count column.\nSave the file as csv into your data folder as LSOA2021_population.csv with the following column names: lsoa21_code, lsoa21_name, and pop2021.\n\n\n\n\n\n\n\nAgain make sure you did not miss any LSOAs. You should end up with 4,995 rows of data in your second spreadsheet.\n\n\n\n\n\n\n\n\n\nWe will now use QGIS to create population maps for the LSOAs in London for both years. To achieve this, we need to join our table data to our spatial datasets and then map our populations for our visual analysis.\n\n\n\n\n\n\nDue to the differences in the LSOA boundaries between 2011 and 2021, we can only make a visual comparison between the two years. You will notice that data interoperability is a key issue that you will face in spatial analysis, particularly when it comes to working with ever-changing administrative geographies.\n\n\n\n\nStart QGIS.\nClick on Project -&gt; New. Save your project as w2-pop-analysis. Remember to save your work throughout the practical.\nBefore we get started with adding data, we will first set the Coordinate Reference System of our Project. Click on Project -&gt; Properties – CRS. In the Filter box, type British National Grid. Select OSGB 1936 / British National Grid - EPSG:27700 and click Apply. Click OK.\n\n\n\n\n\n\n\nWe will explain CRSs and using CRSs in GIS software in more detail next week. For now all you need to know is that the CRS makes sure that the data we plot on the map are plotted in the correct location.\n\n\n\n\n\n\nNow are project is set up, we can start by loading our 2011 spatial layer.\n\nClick on Layer -&gt; Add Layer -&gt; Add Vector Layer.\nWith File as your source type, click on the small three dots button and navigate to your 2011 boundary files.\nHere, we will select the LSOA2011.gpkg dataset. Highlight the file and click Open. Then click Add. You may need to close the box after adding the layer. The 2011 LSOA geography for England and Wales should now be loaded.\n\n\n\n\n\n\nFigure 4: 2011 LSOAs for England and Wales. [Enlarge image]\n\n\n\n\n\n\n\nWe are now going to join our 2011 population data to our 2011 spatial data file. We start by adding the 2011 population data to our project.\n\nClick on Layer -&gt; Add Layer -&gt; Add Delimited Text Layer.\nClick on the three dots button again and navigate to your 2011 population data in your data folder. Your file format should be set to csv. You should have the following boxes ticked under the Record and Field options menu: Decimal separator is comma, First record has field names, Detect field types and Discard empty fields. QGIS does many of these by default, but do double-check.\nSet the Geometry to No geometry (attribute only table) under the Geometry Definition menu. Then click Add and Close. You should now see a table added to your Layers pane.\n\nWe can now join this table data to our spatial data using an Attribute Join.\n\n\n\n\n\n\nAn Attribute Join is one of two types of data joins you will use in spatial analysis (the other is a Spatial join, which we will look at later on in the module). An attribute join essentially allows you to link two datasets together, as long as they share a common attribute to facilitate the ‘matching’ of rows:\n\n\n\n\n\nFigure 5: Attribute Joins. [Enlarge image]\n\n\n\n\nEssentially you need a single unique identifying (UID) field for your records within both datasets: this can be a code, a name or any other string of information. In spatial analysis, we always join our table data to our spatial data. One way to think about it as attaching the table data to the spatial data layer.\nTo make a join work, you need to make sure your ID field is correct across both datasets, i.e. no typos or spelling mistakes. Computers can only follow instructions, so they do not know that St. Thomas in one dataset is the same as St Thomas in another.\nAs a result, whilst in our datasets we have kept both the name and code for both the boundary data and the population data, when creating the join, we will always prefer to use the code over their names. Unlike names, codes reduce the likelihood of error and mismatch because they do not rely on understanding spelling. Common errors, such as adding in spaces or using 0 instead O (and vice versa) can still happen but it is less likely.\n\n\n\nTo make our join work, we need to check that we have a matching UID across both our datasets. We therefore need to look at the tables of both datasets and check what attributes we have that could be used for this possible match.\n\nOpen up the Attribute Tables of each layer and check what fields we have that could be used for the join. We can see that both our respective ‘code’ fields have the same codes (LSOA11CD and lsoa11_code) which seem to contain the same type of information.\nRight-click on your LSOA2011 spatial layer, click on Properties and then click on the Joins tab.\n\nClick on the + button. Make sure the Join Layer is set to LSOA2011_population.\nSet the Join field to lsoa11_code.\nSet the Target field to LSOA11CD.\nClick the Joined Fields box and click to only select the pop2011 field.\nClick on the Custom Field Name Prefix and remove the pre-entered text to leave it blank.\nClick on OK.\nClick on Apply in the main Join tab and then click OK to return to the main QGIS window.\n\n\nWe can now check to see if our join has worked by opening up the Attribute Table of our LSOA11CD spatial layer and looking to see if our LSOAs now have a Population field attached to it.\n\nSort the data in the Attribute Table on the pop2011 field by clicking on the column name: all LSOAs for which we have population data (i.e. only the London LSOAs) are now grouped at the top of the file. Select the first 4,835 rows of data.\n\n\n\n\n\n\n\nYou can select the first row, scroll down to the last row that has population data, hold down the shift button on your keyboard, and click on the last row that has population data to select all rows that we need in one go.\n\n\n\n\n\n\n\n\nFigure 6: All 4,835 London LSOAs selected. [Enlarge image]\n\n\n\n\n\nClose the Attribute Table. Right-click on the LSOA2011 layer and select Export -&gt; Save Selected Features As. Set Format to GeoPackage and click on the small three dots button next to File name and navigate to your raw/boundaries folder. Save the file as LSOA2011_London.gpkg.\nYou can now untick the LSOA2011 containing all the LSOAs for England and Wales. Right-click on the LSOA2011_London layer and click on Zoom to Layer(s).\n\n\n\n\n\n\nFigure 7: All 4,835 2011 London LSOAs. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nThe main strength of a GUI GIS system is that is really helps us understand how spatial data relate to one another and are visualised. Even with just two spatial layers loaded, we can understand two key concepts of using spatial data within GIS. The first, and this is only really relevant to GUI GIS systems, is that each layer can either be turned on or off, to make it visible or not. The second concept is the order in which your layers are drawn – and this is relevant for both GUI GIS and when using plotting libraries such as ggplot2 or tmap in RStudio. Your layers will be drawn depending on the order in which your layers are either tabled (as in a GUI GIS) or ‘called’ in your function in code. Being aware of this need for ‘order’ is important when we shift to using RStudio and tmap to plot our maps, as if you do not layer your data correctly in your code, your map will end up not looking as you hoped. For us using QGIS right now, the layers will be drawn from bottom to top.\n\n\n\nWe can now finally map the population distribution of London in 2011.\n\nRight-click on the LSOA2011_London layer and click on Properties -&gt; Symbology.\n\nIn the dropdown menu at the top of the window, select Graduated as symbology.\nUnder Value choose pop2011 as your column.\nWe can then change the color ramp to suit our aesthetic preferences. In the Colour ramp dropdown menu select Magma.\nThe final thing we need to do is classify our data - what this simply means is to decide how to group the values in our dataset together to create the graduated representation. We will be looking at classification options in later weeks, but for now, we will use the Natural Breaks option. Open the drop-down menu next to Mode, select Natural Breaks, change it to 7 classes and then click Classify.\nFinally click Apply to style your dataset.\n\n\n\n\n\n\n\n\nUnderstanding what classification is appropriate to visualise your data is an important step within spatial analysis and visualisation, and something you will learn more about in the following weeks. Overall, they should be determined by looking at the distribution of the underlying data.\n\n\n\nYou should now be looking at something like this:\n\n\n\n\n\nFigure 8: The population distribution of London in 2011. [Enlarge image]\n\n\n\n\n\n\n\n\n\n\nWhereas the above map is fine for today, it is technically incorrect because we are showing absolute numbers on a choropleth. This is something we should never do, unless the spatial units are identical in size (e.g. a hexagonal tessellation of an area), because larger areas will draw attention and affect the visualisation.\n\n\n\n\n\n\n\nTo export your map select only the map layers you want to export and then opt for Project -&gt; Import/Export -&gt; Export to Image and save your final map in your maps folder. Next week, we will look at how to style our maps using the main map conventions (adding North Arrows, Scale Bars and Legends, etc.) but for now a simple output will do."
  },
  {
    "objectID": "02-GIScience.html#assignment-w02",
    "href": "02-GIScience.html#assignment-w02",
    "title": "1 GIScience and GIS software",
    "section": "",
    "text": "You now need to repeat the entire process to also create a map for the 2021 Census data. Remember, you need to:\n\nLoad the respective spatial layer.\nLoad the respective population dataset.\nJoin the two datasets together using an Attribute Join.\nExport your joined dataset (London only) as a GeoPackage and save this into your raw/boundaries folder as LSOA2021_London.gpkg. We will use this file in later weeks.\nStyle your data appropriately.\nExport your maps as an image to your output folder.\n\n\n\n\n\n\n\nTo make visual comparisons against our two datasets, theoretically we would need to standardise the breaks at which our classification schemes are set at. To set all two datasets to the same breaks, you can do the following:\n\nRight-click again on the LSOA2011_London dataset and, click on Styles -&gt; Copy Styles -&gt; Symbology.\nNow right-click on the LSOA2021_London file, and click on Styles -&gt; Paste Style -&gt; Symbology. You should now see the classification breaks in the 2021 dataset change to match those in the 2011 data.\nThe final thing you need to do is to change the classification column in the Symbology tab for the 2021 dataset to say pop2021 instead of pop2011."
  },
  {
    "objectID": "02-GIScience.html#byl-w02",
    "href": "02-GIScience.html#byl-w02",
    "title": "1 GIScience and GIS software",
    "section": "",
    "text": "Save your project so you can go back to it if you need to, other than that that is it for this week. Probably time to start looking at this week’s reading list!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GEOG0030 Geocomputation 2023-2024",
    "section": "",
    "text": "This page is currently unfinished and receiving updates for the 2023-2024 academic year. Refer to the GEOG0030: Geocomputation 2022-2023 workbook for the 2022-2023 content.\n\n\n\n\n\nWelcome to Geocomputation. This module will introduce you both to the principles of spatial analysis as well as provide you with a comprehensive introduction to the use of programming. Over the next ten weeks, you will learn about the theory, methods and tools of spatial analysis through relevant case studies. We will start by using QGIS before moving to the R programming language. You will learn how to find, manage and clean spatial, demographic and socioeconomic datasets, and then analyse them using core spatial analysis techniques.\n\n\n\nMoodle is the central point of contact for GEOG0030 and it is where all important information will be communicated such as key module and assessment information. This workbook contains links to all reading material as well as the contents for all computer tutorials\n\n\n\nThe topics covered over the next ten weeks are:\n\n\n\nWeek\nSection\nTopic\n\n\n\n\n1\nFoundational Concepts\nGeocomputation: An Introduction\n\n\n2\nFoundational Concepts\nGIScience and GIS software\n\n\n3\nFoundational Concepts\nCartography and Visualisation\n\n\n4\nFoundational Concepts\nProgramming for Data Analysis\n\n\n5\nFoundational Concepts\nProgramming for Spatial Analysis\n\n\n\nReading week\nReading week\n\n\n6\nCore Spatial Analysis\nAnalysing Spatial Patterns I: Geometric Operations and Spatial Queries\n\n\n7\nCore Spatial Analysis\nAnalysing Spatial Patterns II: Spatial Autocorrelation\n\n\n8\nCore Spatial Analysis\nAnalysing Spatial Patterns III: Point Pattern Analysis\n\n\n9\nAdvanced Spatial Analysis\nRasters, Zonal Statistics and Interpolation\n\n\n10\nAdvanced Spatial Analysis\nTransport Network Analysis\n\n\n\n\n\n\nSpatial analysis can yield fascinating insights into geographical relationships, albeit at times it can be challenging, particularly when we combine this with learning how to program at the same time. You will most likely encounter error messages, experience software crashes, and spend time to identify bugs in your code. However, the rewards of learning how to programmatically solve complex spatial problems will be very much worth it in the end.\nIf you need specific assistance with this module, please:\n\nAsk a question at the end of a lecture or during the computer practicals.\nCheck the Moodle assessment tab for queries relating to this module’s assessment.\nAttend the scheduled Geocomputation Additional Support Hours.\nBook a slot in our Academic Support and Feedback hours.\n\n\n\n\nThis year’s workbook is compiled using:\n\nThe GEOG0030: Geocomputation 2022-2023 workbook by Justin van Dijk\nThe GEOG0030: Geocomputation 2021-2022 workbook by Justin van Dijk\nThe GEOG0030: Geocomputation 2020-2021 workbook by Jo Wilkin\n\nThis year’s workbook also takes inspiration and design elements from:\n\nThe Spatial Data Science for Social Geography course by Martin Fleischmann\n\n\n\n\n\n\n\n\n\n\nThis year’s version features the following major updates:\n\nFull rewrite of the workbook using Quarto.\nUpdate to using 2021 Census data where possible.\nRewriting sections relying on deprecated and outdated core packages: raster, rgdal, rgeos.\nMove to GeoPackage over shapefile where possible.\nInclude WorldPop data for raster analysis.\nUpdate to use native pipe |&gt; over dplyr’s implementation (%&gt;%).\nAdd dark mode switch."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "GEOG0030 Geocomputation 2023-2024",
    "section": "",
    "text": "Welcome to Geocomputation. This module will introduce you both to the principles of spatial analysis as well as provide you with a comprehensive introduction to the use of programming. Over the next ten weeks, you will learn about the theory, methods and tools of spatial analysis through relevant case studies. We will start by using QGIS before moving to the R programming language. You will learn how to find, manage and clean spatial, demographic and socioeconomic datasets, and then analyse them using core spatial analysis techniques."
  },
  {
    "objectID": "index.html#moodle",
    "href": "index.html#moodle",
    "title": "GEOG0030 Geocomputation 2023-2024",
    "section": "",
    "text": "Moodle is the central point of contact for GEOG0030 and it is where all important information will be communicated such as key module and assessment information. This workbook contains links to all reading material as well as the contents for all computer tutorials"
  },
  {
    "objectID": "index.html#module-overview",
    "href": "index.html#module-overview",
    "title": "GEOG0030 Geocomputation 2023-2024",
    "section": "",
    "text": "The topics covered over the next ten weeks are:\n\n\n\nWeek\nSection\nTopic\n\n\n\n\n1\nFoundational Concepts\nGeocomputation: An Introduction\n\n\n2\nFoundational Concepts\nGIScience and GIS software\n\n\n3\nFoundational Concepts\nCartography and Visualisation\n\n\n4\nFoundational Concepts\nProgramming for Data Analysis\n\n\n5\nFoundational Concepts\nProgramming for Spatial Analysis\n\n\n\nReading week\nReading week\n\n\n6\nCore Spatial Analysis\nAnalysing Spatial Patterns I: Geometric Operations and Spatial Queries\n\n\n7\nCore Spatial Analysis\nAnalysing Spatial Patterns II: Spatial Autocorrelation\n\n\n8\nCore Spatial Analysis\nAnalysing Spatial Patterns III: Point Pattern Analysis\n\n\n9\nAdvanced Spatial Analysis\nRasters, Zonal Statistics and Interpolation\n\n\n10\nAdvanced Spatial Analysis\nTransport Network Analysis"
  },
  {
    "objectID": "index.html#troubleshooting",
    "href": "index.html#troubleshooting",
    "title": "GEOG0030 Geocomputation 2023-2024",
    "section": "",
    "text": "Spatial analysis can yield fascinating insights into geographical relationships, albeit at times it can be challenging, particularly when we combine this with learning how to program at the same time. You will most likely encounter error messages, experience software crashes, and spend time to identify bugs in your code. However, the rewards of learning how to programmatically solve complex spatial problems will be very much worth it in the end.\nIf you need specific assistance with this module, please:\n\nAsk a question at the end of a lecture or during the computer practicals.\nCheck the Moodle assessment tab for queries relating to this module’s assessment.\nAttend the scheduled Geocomputation Additional Support Hours.\nBook a slot in our Academic Support and Feedback hours."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "GEOG0030 Geocomputation 2023-2024",
    "section": "",
    "text": "This year’s workbook is compiled using:\n\nThe GEOG0030: Geocomputation 2022-2023 workbook by Justin van Dijk\nThe GEOG0030: Geocomputation 2021-2022 workbook by Justin van Dijk\nThe GEOG0030: Geocomputation 2020-2021 workbook by Jo Wilkin\n\nThis year’s workbook also takes inspiration and design elements from:\n\nThe Spatial Data Science for Social Geography course by Martin Fleischmann"
  },
  {
    "objectID": "index.html#major-updates",
    "href": "index.html#major-updates",
    "title": "GEOG0030 Geocomputation 2023-2024",
    "section": "",
    "text": "This year’s version features the following major updates:\n\nFull rewrite of the workbook using Quarto.\nUpdate to using 2021 Census data where possible.\nRewriting sections relying on deprecated and outdated core packages: raster, rgdal, rgeos.\nMove to GeoPackage over shapefile where possible.\nInclude WorldPop data for raster analysis.\nUpdate to use native pipe |&gt; over dplyr’s implementation (%&gt;%).\nAdd dark mode switch."
  },
  {
    "objectID": "11-data.html",
    "href": "11-data.html",
    "title": "1 Data Sources",
    "section": "",
    "text": "Below you will find a list of resources that you might want to explore when sourcing data for your coursework assignment or your dissertation. This is by no means an exhaustive list, but simply contains some suggestions of websites that you may want to use.\n\n\n\n\n\n\nYou are not limited to using these datasets for your coursework assignment or your dissertation, but these are merely some suggestions .\n\n\n\n\n\nThe following websites contain Open Data or link to Open Data from several respectable data providers:\n\nAfricanUrbanNetwork\nAirBnB Data\nBike Docking Data (ready for R)\nBing Maps worldwide road detections\nCamden Air Action\nConsumer Data Research Centre\nDepartment for Environment, Food & Rural Affairs\nEdina (e.g. OS mastermap)\nEU Tourism Data\nEurostat\nGeofabrik (OSM data)\nGlobal Weather Data\nGoogle Dataset Search\nGoogle Open Buildings\nKing’s College Data on Air Pollution\nLondon Data Store\nLondon Local Authority Maintained Trees\nLondon Tube PM2.5 Levels\nMicrosoft Global Building Footprints\nMicrosoft Research Open Data\nNational Public Transport Access Nodes (NaPTAN)\nNASA EARTHDATA\nNASA SocioEconomic Data and Applications Center (SEDAC)\nNHS Data (ready for R)\nnomis Official Census and Labour Market Statistics\nOffice for National Statistics Geoportal\nOffice for National Statistics\nOpen Topography\nPlanetary Computer Data Catalog\npseudo Census Output Areas 2001-2011-2021\nTesco Store Data (London)\nTfL Cycling Data\nTfL Open Data\nTidy Tuesday Data (not exclusively spatial data)\nUK Data Service\nUS Census Data\nUS City Open Data Census\nUSGS Earth Explorer\nWorldPop GitHub\nWorldPop\n\nSome other websites that could be helpful:\n\nAwesome Public Datasets; general collection of datasets, although not limited to spatial data.\nFree GIS data; long list with lots of GIS datasets on many different topics and covering many different areas.\n\n\n\n\nUndergraduate students can also apply for a Safeguarded dataset held by the Consumer Data Research Centre. There is a process to access these Safeguarded datasets, which is detailed on the CDRC website. Please be aware that it normally takes 4-5 weeks for your application to be processed.\nAs part of the process, you will need to state in your application why you want that specific dataset and what you are planning to do with it. You will also need to have at least thought about the ethical implications of using that data and provide this with your data application.\nSome of the datasets held by the CDRC that you can apply for are:\n\nBicycle Sharing System Docking Station Observations\nCDRC Modelled Ethnicity Proportions - LSOA Geography\nFCA Financial Lives Survey\nSpeedchecker Broadband Internet Speed Tests\n\n\n\n\n\n\n\nGiven that the application can take several weeks, the Safeguarded CDRC datasets may be useful for your undergraduate dissertation but probably not for the GEOG0030 coursework assignment. However, any of the CDRC datasets that are marked as Open Data do not require this application process and you can download these datasets directly after registering on the website."
  },
  {
    "objectID": "11-data.html#open-data",
    "href": "11-data.html#open-data",
    "title": "1 Data Sources",
    "section": "",
    "text": "The following websites contain Open Data or link to Open Data from several respectable data providers:\n\nAfricanUrbanNetwork\nAirBnB Data\nBike Docking Data (ready for R)\nBing Maps worldwide road detections\nCamden Air Action\nConsumer Data Research Centre\nDepartment for Environment, Food & Rural Affairs\nEdina (e.g. OS mastermap)\nEU Tourism Data\nEurostat\nGeofabrik (OSM data)\nGlobal Weather Data\nGoogle Dataset Search\nGoogle Open Buildings\nKing’s College Data on Air Pollution\nLondon Data Store\nLondon Local Authority Maintained Trees\nLondon Tube PM2.5 Levels\nMicrosoft Global Building Footprints\nMicrosoft Research Open Data\nNational Public Transport Access Nodes (NaPTAN)\nNASA EARTHDATA\nNASA SocioEconomic Data and Applications Center (SEDAC)\nNHS Data (ready for R)\nnomis Official Census and Labour Market Statistics\nOffice for National Statistics Geoportal\nOffice for National Statistics\nOpen Topography\nPlanetary Computer Data Catalog\npseudo Census Output Areas 2001-2011-2021\nTesco Store Data (London)\nTfL Cycling Data\nTfL Open Data\nTidy Tuesday Data (not exclusively spatial data)\nUK Data Service\nUS Census Data\nUS City Open Data Census\nUSGS Earth Explorer\nWorldPop GitHub\nWorldPop\n\nSome other websites that could be helpful:\n\nAwesome Public Datasets; general collection of datasets, although not limited to spatial data.\nFree GIS data; long list with lots of GIS datasets on many different topics and covering many different areas."
  },
  {
    "objectID": "11-data.html#safeguarded-data",
    "href": "11-data.html#safeguarded-data",
    "title": "1 Data Sources",
    "section": "",
    "text": "Undergraduate students can also apply for a Safeguarded dataset held by the Consumer Data Research Centre. There is a process to access these Safeguarded datasets, which is detailed on the CDRC website. Please be aware that it normally takes 4-5 weeks for your application to be processed.\nAs part of the process, you will need to state in your application why you want that specific dataset and what you are planning to do with it. You will also need to have at least thought about the ethical implications of using that data and provide this with your data application.\nSome of the datasets held by the CDRC that you can apply for are:\n\nBicycle Sharing System Docking Station Observations\nCDRC Modelled Ethnicity Proportions - LSOA Geography\nFCA Financial Lives Survey\nSpeedchecker Broadband Internet Speed Tests\n\n\n\n\n\n\n\nGiven that the application can take several weeks, the Safeguarded CDRC datasets may be useful for your undergraduate dissertation but probably not for the GEOG0030 coursework assignment. However, any of the CDRC datasets that are marked as Open Data do not require this application process and you can download these datasets directly after registering on the website."
  }
]